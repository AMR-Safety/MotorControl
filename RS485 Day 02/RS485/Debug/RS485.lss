
RS485.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dca  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8d  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000488  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012a  00000000  00000000  0000278a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e4       	ldi	r30, 0x44	; 68
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 32       	cpi	r26, 0x21	; 33
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  e2:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <blink_led>:
char buffer[MAX_LEN];
uint8_t idx = 0;


void blink_led() {
	PORTB |= (1 << LED_PIN);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <blink_led+0xc>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <blink_led+0x16>
 100:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1 << LED_PIN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret

0000010a <main>:
}

int main(void) {
	DDRD |= (1 << RE_DE_PIN);   // RE/DE pin as output
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << LED_PIN);     // TX LED pin as output (optional)
 110:	84 b1       	in	r24, 0x04	; 4
 112:	81 60       	ori	r24, 0x01	; 1
 114:	84 b9       	out	0x04, r24	; 4
	PORTD &= ~(1 << RE_DE_PIN); // Start in receive mode
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	8b b9       	out	0x0b, r24	; 11

	usart1_init(9600);
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	95 e2       	ldi	r25, 0x25	; 37
 120:	0e 94 d6 00 	call	0x1ac	; 0x1ac <usart1_init>

	while (1) {
		if (usart1_available()) {
 124:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <usart1_available>
 128:	88 23       	and	r24, r24
 12a:	e1 f3       	breq	.-8      	; 0x124 <main+0x1a>
			char c = usart1_read();
 12c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <usart1_read>

			if (idx < MAX_LEN - 1) {
 130:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	ef 31       	cpi	r30, 0x1F	; 31
 136:	40 f4       	brcc	.+16     	; 0x148 <main+0x3e>
				buffer[idx++] = c;
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	9e 0f       	add	r25, r30
 13c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	ef 5f       	subi	r30, 0xFF	; 255
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	80 83       	st	Z, r24
			}

			if (c == '\n') {  // End of message
 148:	8a 30       	cpi	r24, 0x0A	; 10
 14a:	61 f7       	brne	.-40     	; 0x124 <main+0x1a>
				buffer[idx] = '\0';  // Null-terminate
 14c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ef 5f       	subi	r30, 0xFF	; 255
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	10 82       	st	Z, r1

				blink_led();  // Optional: show activity on LED
 158:	0e 94 75 00 	call	0xea	; 0xea <blink_led>

				// Echo back full message
				UCSR1A |= (1 << TXC1);
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
				PORTD |= (1 << RE_DE_PIN);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	85 e3       	ldi	r24, 0x35	; 53
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x64>
 172:	00 00       	nop
				_delay_us(10);
				for (uint8_t i = 0; i < idx; i++) {
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	0c c0       	rjmp	.+24     	; 0x190 <main+0x86>
					usart1_write(buffer[i]);
 178:	ec 2f       	mov	r30, r28
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ef 5f       	subi	r30, 0xFF	; 255
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <usart1_write>
					while (!(UCSR1A & (1 << TXC1)));
 186:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 18a:	86 ff       	sbrs	r24, 6
 18c:	fc cf       	rjmp	.-8      	; 0x186 <main+0x7c>

				// Echo back full message
				UCSR1A |= (1 << TXC1);
				PORTD |= (1 << RE_DE_PIN);
				_delay_us(10);
				for (uint8_t i = 0; i < idx; i++) {
 18e:	cf 5f       	subi	r28, 0xFF	; 255
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	c8 17       	cp	r28, r24
 196:	80 f3       	brcs	.-32     	; 0x178 <main+0x6e>
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x90>
 19e:	00 00       	nop
					usart1_write(buffer[i]);
					while (!(UCSR1A & (1 << TXC1)));
				}
				_delay_us(10);
				PORTD &= ~(1 << RE_DE_PIN);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	8b b9       	out	0x0b, r24	; 11

				idx = 0;  // Reset buffer
 1a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	bc cf       	rjmp	.-136    	; 0x124 <main+0x1a>

000001ac <usart1_init>:
 1ac:	9c 01       	movw	r18, r24
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	60 e4       	ldi	r22, 0x40	; 64
 1b4:	72 e4       	ldi	r23, 0x42	; 66
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodsi4>
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	31 09       	sbc	r19, r1
 1c2:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 1c6:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 1d6:	08 95       	ret

000001d8 <usart1_write>:
 1d8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 1dc:	95 ff       	sbrs	r25, 5
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <usart1_write>
 1e0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 1e4:	08 95       	ret

000001e6 <usart1_read>:
 1e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <usart1_read>
 1ee:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 1f2:	08 95       	ret

000001f4 <usart1_available>:
 1f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 1f8:	80 78       	andi	r24, 0x80	; 128
 1fa:	08 95       	ret

000001fc <__udivmodsi4>:
 1fc:	a1 e2       	ldi	r26, 0x21	; 33
 1fe:	1a 2e       	mov	r1, r26
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	fd 01       	movw	r30, r26
 206:	0d c0       	rjmp	.+26     	; 0x222 <__udivmodsi4_ep>

00000208 <__udivmodsi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	ee 1f       	adc	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	a2 17       	cp	r26, r18
 212:	b3 07       	cpc	r27, r19
 214:	e4 07       	cpc	r30, r20
 216:	f5 07       	cpc	r31, r21
 218:	20 f0       	brcs	.+8      	; 0x222 <__udivmodsi4_ep>
 21a:	a2 1b       	sub	r26, r18
 21c:	b3 0b       	sbc	r27, r19
 21e:	e4 0b       	sbc	r30, r20
 220:	f5 0b       	sbc	r31, r21

00000222 <__udivmodsi4_ep>:
 222:	66 1f       	adc	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	88 1f       	adc	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	1a 94       	dec	r1
 22c:	69 f7       	brne	.-38     	; 0x208 <__udivmodsi4_loop>
 22e:	60 95       	com	r22
 230:	70 95       	com	r23
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	bd 01       	movw	r22, r26
 23c:	cf 01       	movw	r24, r30
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
