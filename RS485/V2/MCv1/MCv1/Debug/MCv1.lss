
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118f  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d2c  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073a  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062a  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056c  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 90 00 	call	0x120	; 0x120 <main>
  bc:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <set_direction>:
	PORTB &= ~(1 << EN_PIN);
	set_direction(1);
}

void set_direction(uint8_t forward) {
	if (forward)
  c4:	88 23       	and	r24, r24
  c6:	21 f0       	breq	.+8      	; 0xd0 <set_direction+0xc>
	PORTB |= (1 << DIR_PIN);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <setup_pins>:
#include "direction.h"



void setup_pins(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	80 67       	ori	r24, 0x70	; 112
  dc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
	set_direction(1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 62 00 	call	0xc4	; 0xc4 <set_direction>
  ea:	08 95       	ret

000000ec <set_direction_motor2>:
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
	set_direction_motor2(1);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	08 95       	ret

00000100 <setup_pins_motor2>:
	else
	PORTB &= ~(1 << DIR_PIN);
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	80 64       	ori	r24, 0x40	; 64
 104:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	8b b9       	out	0x0b, r24	; 11
	set_direction_motor2(1);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 76 00 	call	0xec	; 0xec <set_direction_motor2>
 11e:	08 95       	ret

00000120 <main>:
#include <util/delay.h>

#define USE_TRAPEZOID 0 // Set to 1 for trapezoidal, 0 for S-curve

int main(void) {
	setup_pins();
 120:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup_pins>
	setup_pins_motor2();
 124:	0e 94 80 00 	call	0x100	; 0x100 <setup_pins_motor2>

	set_direction(DEFAULT_DIRECTION_M1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <set_direction>
	set_direction_motor2(DEFAULT_DIRECTION_M2);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 76 00 	call	0xec	; 0xec <set_direction_motor2>

	ramp_up_trapezoid(DEFAULT_OMEGA_M1);
 134:	64 ea       	ldi	r22, 0xA4	; 164
 136:	70 e7       	ldi	r23, 0x70	; 112
 138:	81 ed       	ldi	r24, 0xD1	; 209
 13a:	92 e4       	ldi	r25, 0x42	; 66
 13c:	0e 94 b0 00 	call	0x160	; 0x160 <ramp_up_trapezoid>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	87 ea       	ldi	r24, 0xA7	; 167
 144:	91 e6       	ldi	r25, 0x61	; 97
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x26>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x30>
 150:	00 00       	nop
	//set_angular_velocity(100);
	//set_angular_velocity_motor2(100);
	_delay_ms(2000);
	ramp_down_trapezoid(DEFAULT_OMEGA_M1);
 152:	64 ea       	ldi	r22, 0xA4	; 164
 154:	70 e7       	ldi	r23, 0x70	; 112
 156:	81 ed       	ldi	r24, 0xD1	; 209
 158:	92 e4       	ldi	r25, 0x42	; 66
 15a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ramp_down_trapezoid>
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x3e>

00000160 <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <ramp_up_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 17e:	be 01       	movw	r22, r28
 180:	0d 2e       	mov	r0, r29
 182:	00 0c       	add	r0, r0
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	0e 94 4b 02 	call	0x496	; 0x496 <__floatsisf>
 18c:	a5 01       	movw	r20, r10
 18e:	94 01       	movw	r18, r8
 190:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	48 e4       	ldi	r20, 0x48	; 72
 19a:	52 e4       	ldi	r21, 0x42	; 66
 19c:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>
 1a0:	6b 01       	movw	r12, r22
 1a2:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 1a4:	0e 94 95 01 	call	0x32a	; 0x32a <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 9c 01 	call	0x338	; 0x338 <set_angular_velocity_motor2>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	80 e7       	ldi	r24, 0x70	; 112
 1b4:	92 e0       	ldi	r25, 0x02	; 2
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <ramp_up_trapezoid+0x56>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <ramp_up_trapezoid+0x60>
 1c0:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	c3 33       	cpi	r28, 0x33	; 51
 1c6:	d1 05       	cpc	r29, r1
 1c8:	d4 f2       	brlt	.-76     	; 0x17e <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	8f 90       	pop	r8
 1de:	08 95       	ret

000001e0 <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	4b 01       	movw	r8, r22
 1f6:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 1f8:	c1 e3       	ldi	r28, 0x31	; 49
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	23 c0       	rjmp	.+70     	; 0x244 <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 1fe:	be 01       	movw	r22, r28
 200:	0d 2e       	mov	r0, r29
 202:	00 0c       	add	r0, r0
 204:	88 0b       	sbc	r24, r24
 206:	99 0b       	sbc	r25, r25
 208:	0e 94 4b 02 	call	0x496	; 0x496 <__floatsisf>
 20c:	a5 01       	movw	r20, r10
 20e:	94 01       	movw	r18, r8
 210:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	48 e4       	ldi	r20, 0x48	; 72
 21a:	52 e4       	ldi	r21, 0x42	; 66
 21c:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>
 220:	6b 01       	movw	r12, r22
 222:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 224:	0e 94 95 01 	call	0x32a	; 0x32a <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 228:	c7 01       	movw	r24, r14
 22a:	b6 01       	movw	r22, r12
 22c:	0e 94 9c 01 	call	0x338	; 0x338 <set_angular_velocity_motor2>
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	80 e7       	ldi	r24, 0x70	; 112
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <ramp_down_trapezoid+0x56>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <ramp_down_trapezoid+0x60>
 240:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 242:	21 97       	sbiw	r28, 0x01	; 1
 244:	dd 23       	and	r29, r29
 246:	dc f6       	brge	.-74     	; 0x1fe <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	08 95       	ret

0000025e <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 25e:	2b ee       	ldi	r18, 0xEB	; 235
 260:	39 ec       	ldi	r19, 0xC9	; 201
 262:	48 e1       	ldi	r20, 0x18	; 24
 264:	51 e4       	ldi	r21, 0x41	; 65
 266:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3>
}
 26a:	08 95       	ret

0000026c <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	6b 01       	movw	r12, r22
 276:	7c 01       	movw	r14, r24
	if (rpm <= 0) return 65535;
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	a9 01       	movw	r20, r18
 27e:	0e 94 a3 01 	call	0x346	; 0x346 <__cmpsf2>
 282:	18 16       	cp	r1, r24
 284:	ac f5       	brge	.+106    	; 0x2f0 <rpm_to_ocr+0x84>
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	48 e4       	ldi	r20, 0x48	; 72
 28c:	54 e4       	ldi	r21, 0x44	; 68
 28e:	c7 01       	movw	r24, r14
 290:	b6 01       	movw	r22, r12
 292:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3>
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	40 e7       	ldi	r20, 0x70	; 112
 29c:	52 e4       	ldi	r21, 0x42	; 66
 29e:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	51 e4       	ldi	r21, 0x41	; 65
 2aa:	0e 94 00 03 	call	0x600	; 0x600 <__mulsf3>
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	74 e2       	ldi	r23, 0x24	; 36
 2b6:	84 e7       	ldi	r24, 0x74	; 116
 2b8:	9b e4       	ldi	r25, 0x4B	; 75
 2ba:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>
 2be:	6b 01       	movw	r12, r22
 2c0:	7c 01       	movw	r14, r24
	if (ocr > 65535) ocr = 65535;
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__gesf2>
 2ce:	18 16       	cp	r1, r24
 2d0:	4c f4       	brge	.+18     	; 0x2e4 <rpm_to_ocr+0x78>
 2d2:	0f 2e       	mov	r0, r31
 2d4:	c1 2c       	mov	r12, r1
 2d6:	dd 24       	eor	r13, r13
 2d8:	da 94       	dec	r13
 2da:	ff e7       	ldi	r31, 0x7F	; 127
 2dc:	ef 2e       	mov	r14, r31
 2de:	f7 e4       	ldi	r31, 0x47	; 71
 2e0:	ff 2e       	mov	r15, r31
 2e2:	f0 2d       	mov	r31, r0
	return (uint16_t)ocr;
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 1a 02 	call	0x434	; 0x434 <__fixunssfsi>
 2ec:	cb 01       	movw	r24, r22
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <rpm_to_ocr+0x88>
float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) return 65535;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
	if (ocr > 65535) ocr = 65535;
	return (uint16_t)ocr;
}
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	TCCR1A = (1 << COM1A0);
 2fe:	20 e4       	ldi	r18, 0x40	; 64
 300:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11);
 304:	2a e0       	ldi	r18, 0x0A	; 10
 306:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = ocr_value;
 30a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 30e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 312:	08 95       	ret

00000314 <setup_timer3>:
}

void setup_timer3(uint16_t ocr_value) {
	TCCR3A = (1 << COM3A0);
 314:	20 e4       	ldi	r18, 0x40	; 64
 316:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31);
 31a:	2a e0       	ldi	r18, 0x0A	; 10
 31c:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = ocr_value;
 320:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 324:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 328:	08 95       	ret

0000032a <set_angular_velocity>:
}

void set_angular_velocity(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 32a:	0e 94 2f 01 	call	0x25e	; 0x25e <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 32e:	0e 94 36 01 	call	0x26c	; 0x26c <rpm_to_ocr>
	setup_timer1(ocr);
 332:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setup_timer1>
 336:	08 95       	ret

00000338 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 338:	0e 94 2f 01 	call	0x25e	; 0x25e <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 33c:	0e 94 36 01 	call	0x26c	; 0x26c <rpm_to_ocr>
	setup_timer3(ocr);
 340:	0e 94 8a 01 	call	0x314	; 0x314 <setup_timer3>
 344:	08 95       	ret

00000346 <__cmpsf2>:
 346:	0e 94 86 02 	call	0x50c	; 0x50c <__fp_cmp>
 34a:	08 f4       	brcc	.+2      	; 0x34e <__cmpsf2+0x8>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret

00000350 <__divsf3>:
 350:	0e 94 bc 01 	call	0x378	; 0x378 <__divsf3x>
 354:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_round>
 358:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscB>
 35c:	58 f0       	brcs	.+22     	; 0x374 <__divsf3+0x24>
 35e:	0e 94 b3 02 	call	0x566	; 0x566 <__fp_pscA>
 362:	40 f0       	brcs	.+16     	; 0x374 <__divsf3+0x24>
 364:	29 f4       	brne	.+10     	; 0x370 <__divsf3+0x20>
 366:	5f 3f       	cpi	r21, 0xFF	; 255
 368:	29 f0       	breq	.+10     	; 0x374 <__divsf3+0x24>
 36a:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 36e:	51 11       	cpse	r21, r1
 370:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_szero>
 374:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_nan>

00000378 <__divsf3x>:
 378:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_split3>
 37c:	68 f3       	brcs	.-38     	; 0x358 <__divsf3+0x8>

0000037e <__divsf3_pse>:
 37e:	99 23       	and	r25, r25
 380:	b1 f3       	breq	.-20     	; 0x36e <__divsf3+0x1e>
 382:	55 23       	and	r21, r21
 384:	91 f3       	breq	.-28     	; 0x36a <__divsf3+0x1a>
 386:	95 1b       	sub	r25, r21
 388:	55 0b       	sbc	r21, r21
 38a:	bb 27       	eor	r27, r27
 38c:	aa 27       	eor	r26, r26
 38e:	62 17       	cp	r22, r18
 390:	73 07       	cpc	r23, r19
 392:	84 07       	cpc	r24, r20
 394:	38 f0       	brcs	.+14     	; 0x3a4 <__divsf3_pse+0x26>
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	44 1f       	adc	r20, r20
 3a0:	aa 1f       	adc	r26, r26
 3a2:	a9 f3       	breq	.-22     	; 0x38e <__divsf3_pse+0x10>
 3a4:	35 d0       	rcall	.+106    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3a6:	0e 2e       	mov	r0, r30
 3a8:	3a f0       	brmi	.+14     	; 0x3b8 <__divsf3_pse+0x3a>
 3aa:	e0 e8       	ldi	r30, 0x80	; 128
 3ac:	32 d0       	rcall	.+100    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	50 40       	sbci	r21, 0x00	; 0
 3b2:	e6 95       	lsr	r30
 3b4:	00 1c       	adc	r0, r0
 3b6:	ca f7       	brpl	.-14     	; 0x3aa <__divsf3_pse+0x2c>
 3b8:	2b d0       	rcall	.+86     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ba:	fe 2f       	mov	r31, r30
 3bc:	29 d0       	rcall	.+82     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	bb 1f       	adc	r27, r27
 3c6:	26 17       	cp	r18, r22
 3c8:	37 07       	cpc	r19, r23
 3ca:	48 07       	cpc	r20, r24
 3cc:	ab 07       	cpc	r26, r27
 3ce:	b0 e8       	ldi	r27, 0x80	; 128
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__divsf3_pse+0x56>
 3d2:	bb 0b       	sbc	r27, r27
 3d4:	80 2d       	mov	r24, r0
 3d6:	bf 01       	movw	r22, r30
 3d8:	ff 27       	eor	r31, r31
 3da:	93 58       	subi	r25, 0x83	; 131
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255
 3de:	3a f0       	brmi	.+14     	; 0x3ee <__divsf3_pse+0x70>
 3e0:	9e 3f       	cpi	r25, 0xFE	; 254
 3e2:	51 05       	cpc	r21, r1
 3e4:	78 f0       	brcs	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e6:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 3ea:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	e4 f3       	brlt	.-8      	; 0x3ea <__divsf3_pse+0x6c>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	d4 f3       	brlt	.-12     	; 0x3ea <__divsf3_pse+0x6c>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	c9 f7       	brne	.-14     	; 0x3f6 <__divsf3_pse+0x78>
 404:	88 0f       	add	r24, r24
 406:	91 1d       	adc	r25, r1
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret
 410:	e1 e0       	ldi	r30, 0x01	; 1
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	bb 1f       	adc	r27, r27
 41a:	62 17       	cp	r22, r18
 41c:	73 07       	cpc	r23, r19
 41e:	84 07       	cpc	r24, r20
 420:	ba 07       	cpc	r27, r26
 422:	20 f0       	brcs	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	ba 0b       	sbc	r27, r26
 42c:	ee 1f       	adc	r30, r30
 42e:	88 f7       	brcc	.-30     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 430:	e0 95       	com	r30
 432:	08 95       	ret

00000434 <__fixunssfsi>:
 434:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_splitA>
 438:	88 f0       	brcs	.+34     	; 0x45c <__fixunssfsi+0x28>
 43a:	9f 57       	subi	r25, 0x7F	; 127
 43c:	98 f0       	brcs	.+38     	; 0x464 <__fixunssfsi+0x30>
 43e:	b9 2f       	mov	r27, r25
 440:	99 27       	eor	r25, r25
 442:	b7 51       	subi	r27, 0x17	; 23
 444:	b0 f0       	brcs	.+44     	; 0x472 <__fixunssfsi+0x3e>
 446:	e1 f0       	breq	.+56     	; 0x480 <__fixunssfsi+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	1a f0       	brmi	.+6      	; 0x458 <__fixunssfsi+0x24>
 452:	ba 95       	dec	r27
 454:	c9 f7       	brne	.-14     	; 0x448 <__fixunssfsi+0x14>
 456:	14 c0       	rjmp	.+40     	; 0x480 <__fixunssfsi+0x4c>
 458:	b1 30       	cpi	r27, 0x01	; 1
 45a:	91 f0       	breq	.+36     	; 0x480 <__fixunssfsi+0x4c>
 45c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_zero>
 460:	b1 e0       	ldi	r27, 0x01	; 1
 462:	08 95       	ret
 464:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_zero>
 468:	67 2f       	mov	r22, r23
 46a:	78 2f       	mov	r23, r24
 46c:	88 27       	eor	r24, r24
 46e:	b8 5f       	subi	r27, 0xF8	; 248
 470:	39 f0       	breq	.+14     	; 0x480 <__fixunssfsi+0x4c>
 472:	b9 3f       	cpi	r27, 0xF9	; 249
 474:	cc f3       	brlt	.-14     	; 0x468 <__fixunssfsi+0x34>
 476:	86 95       	lsr	r24
 478:	77 95       	ror	r23
 47a:	67 95       	ror	r22
 47c:	b3 95       	inc	r27
 47e:	d9 f7       	brne	.-10     	; 0x476 <__fixunssfsi+0x42>
 480:	3e f4       	brtc	.+14     	; 0x490 <__fixunssfsi+0x5c>
 482:	90 95       	com	r25
 484:	80 95       	com	r24
 486:	70 95       	com	r23
 488:	61 95       	neg	r22
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__floatunsisf>:
 492:	e8 94       	clt
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__floatsisf+0x12>

00000496 <__floatsisf>:
 496:	97 fb       	bst	r25, 7
 498:	3e f4       	brtc	.+14     	; 0x4a8 <__floatsisf+0x12>
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	99 23       	and	r25, r25
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <__floatsisf+0x40>
 4ac:	f9 2f       	mov	r31, r25
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	bb 27       	eor	r27, r27
 4b2:	93 95       	inc	r25
 4b4:	f6 95       	lsr	r31
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f1 11       	cpse	r31, r1
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <__floatsisf+0x1c>
 4c2:	fa f4       	brpl	.+62     	; 0x502 <__floatsisf+0x6c>
 4c4:	bb 0f       	add	r27, r27
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__floatsisf+0x36>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	1b c0       	rjmp	.+54     	; 0x502 <__floatsisf+0x6c>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	16 c0       	rjmp	.+44     	; 0x502 <__floatsisf+0x6c>
 4d6:	88 23       	and	r24, r24
 4d8:	11 f0       	breq	.+4      	; 0x4de <__floatsisf+0x48>
 4da:	96 e9       	ldi	r25, 0x96	; 150
 4dc:	11 c0       	rjmp	.+34     	; 0x500 <__floatsisf+0x6a>
 4de:	77 23       	and	r23, r23
 4e0:	21 f0       	breq	.+8      	; 0x4ea <__floatsisf+0x54>
 4e2:	9e e8       	ldi	r25, 0x8E	; 142
 4e4:	87 2f       	mov	r24, r23
 4e6:	76 2f       	mov	r23, r22
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__floatsisf+0x5e>
 4ea:	66 23       	and	r22, r22
 4ec:	71 f0       	breq	.+28     	; 0x50a <__floatsisf+0x74>
 4ee:	96 e8       	ldi	r25, 0x86	; 134
 4f0:	86 2f       	mov	r24, r22
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	2a f0       	brmi	.+10     	; 0x502 <__floatsisf+0x6c>
 4f8:	9a 95       	dec	r25
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	da f7       	brpl	.-10     	; 0x4f8 <__floatsisf+0x62>
 502:	88 0f       	add	r24, r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	97 f9       	bld	r25, 7
 50a:	08 95       	ret

0000050c <__fp_cmp>:
 50c:	99 0f       	add	r25, r25
 50e:	00 08       	sbc	r0, r0
 510:	55 0f       	add	r21, r21
 512:	aa 0b       	sbc	r26, r26
 514:	e0 e8       	ldi	r30, 0x80	; 128
 516:	fe ef       	ldi	r31, 0xFE	; 254
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	e8 07       	cpc	r30, r24
 51e:	f9 07       	cpc	r31, r25
 520:	c0 f0       	brcs	.+48     	; 0x552 <__fp_cmp+0x46>
 522:	12 16       	cp	r1, r18
 524:	13 06       	cpc	r1, r19
 526:	e4 07       	cpc	r30, r20
 528:	f5 07       	cpc	r31, r21
 52a:	98 f0       	brcs	.+38     	; 0x552 <__fp_cmp+0x46>
 52c:	62 1b       	sub	r22, r18
 52e:	73 0b       	sbc	r23, r19
 530:	84 0b       	sbc	r24, r20
 532:	95 0b       	sbc	r25, r21
 534:	39 f4       	brne	.+14     	; 0x544 <__fp_cmp+0x38>
 536:	0a 26       	eor	r0, r26
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_cmp+0x46>
 53a:	23 2b       	or	r18, r19
 53c:	24 2b       	or	r18, r20
 53e:	25 2b       	or	r18, r21
 540:	21 f4       	brne	.+8      	; 0x54a <__fp_cmp+0x3e>
 542:	08 95       	ret
 544:	0a 26       	eor	r0, r26
 546:	09 f4       	brne	.+2      	; 0x54a <__fp_cmp+0x3e>
 548:	a1 40       	sbci	r26, 0x01	; 1
 54a:	a6 95       	lsr	r26
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	81 1d       	adc	r24, r1
 550:	81 1d       	adc	r24, r1
 552:	08 95       	ret

00000554 <__fp_inf>:
 554:	97 f9       	bld	r25, 7
 556:	9f 67       	ori	r25, 0x7F	; 127
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	08 95       	ret

00000560 <__fp_nan>:
 560:	9f ef       	ldi	r25, 0xFF	; 255
 562:	80 ec       	ldi	r24, 0xC0	; 192
 564:	08 95       	ret

00000566 <__fp_pscA>:
 566:	00 24       	eor	r0, r0
 568:	0a 94       	dec	r0
 56a:	16 16       	cp	r1, r22
 56c:	17 06       	cpc	r1, r23
 56e:	18 06       	cpc	r1, r24
 570:	09 06       	cpc	r0, r25
 572:	08 95       	ret

00000574 <__fp_pscB>:
 574:	00 24       	eor	r0, r0
 576:	0a 94       	dec	r0
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	14 06       	cpc	r1, r20
 57e:	05 06       	cpc	r0, r21
 580:	08 95       	ret

00000582 <__fp_round>:
 582:	09 2e       	mov	r0, r25
 584:	03 94       	inc	r0
 586:	00 0c       	add	r0, r0
 588:	11 f4       	brne	.+4      	; 0x58e <__fp_round+0xc>
 58a:	88 23       	and	r24, r24
 58c:	52 f0       	brmi	.+20     	; 0x5a2 <__fp_round+0x20>
 58e:	bb 0f       	add	r27, r27
 590:	40 f4       	brcc	.+16     	; 0x5a2 <__fp_round+0x20>
 592:	bf 2b       	or	r27, r31
 594:	11 f4       	brne	.+4      	; 0x59a <__fp_round+0x18>
 596:	60 ff       	sbrs	r22, 0
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <__fp_round+0x20>
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__fp_split3>:
 5a4:	57 fd       	sbrc	r21, 7
 5a6:	90 58       	subi	r25, 0x80	; 128
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	59 f0       	breq	.+22     	; 0x5c4 <__fp_splitA+0x10>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	71 f0       	breq	.+28     	; 0x5ce <__fp_splitA+0x1a>
 5b2:	47 95       	ror	r20

000005b4 <__fp_splitA>:
 5b4:	88 0f       	add	r24, r24
 5b6:	97 fb       	bst	r25, 7
 5b8:	99 1f       	adc	r25, r25
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <__fp_splitA+0x20>
 5bc:	9f 3f       	cpi	r25, 0xFF	; 255
 5be:	79 f0       	breq	.+30     	; 0x5de <__fp_splitA+0x2a>
 5c0:	87 95       	ror	r24
 5c2:	08 95       	ret
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	14 06       	cpc	r1, r20
 5ca:	55 1f       	adc	r21, r21
 5cc:	f2 cf       	rjmp	.-28     	; 0x5b2 <__fp_split3+0xe>
 5ce:	46 95       	lsr	r20
 5d0:	f1 df       	rcall	.-30     	; 0x5b4 <__fp_splitA>
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <__fp_splitA+0x30>
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	18 06       	cpc	r1, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	f1 cf       	rjmp	.-30     	; 0x5c0 <__fp_splitA+0xc>
 5de:	86 95       	lsr	r24
 5e0:	71 05       	cpc	r23, r1
 5e2:	61 05       	cpc	r22, r1
 5e4:	08 94       	sec
 5e6:	08 95       	ret

000005e8 <__fp_zero>:
 5e8:	e8 94       	clt

000005ea <__fp_szero>:
 5ea:	bb 27       	eor	r27, r27
 5ec:	66 27       	eor	r22, r22
 5ee:	77 27       	eor	r23, r23
 5f0:	cb 01       	movw	r24, r22
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__gesf2>:
 5f6:	0e 94 86 02 	call	0x50c	; 0x50c <__fp_cmp>
 5fa:	08 f4       	brcc	.+2      	; 0x5fe <__gesf2+0x8>
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__mulsf3>:
 600:	0e 94 13 03 	call	0x626	; 0x626 <__mulsf3x>
 604:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_round>
 608:	0e 94 b3 02 	call	0x566	; 0x566 <__fp_pscA>
 60c:	38 f0       	brcs	.+14     	; 0x61c <__mulsf3+0x1c>
 60e:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscB>
 612:	20 f0       	brcs	.+8      	; 0x61c <__mulsf3+0x1c>
 614:	95 23       	and	r25, r21
 616:	11 f0       	breq	.+4      	; 0x61c <__mulsf3+0x1c>
 618:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 61c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_nan>
 620:	11 24       	eor	r1, r1
 622:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_szero>

00000626 <__mulsf3x>:
 626:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_split3>
 62a:	70 f3       	brcs	.-36     	; 0x608 <__mulsf3+0x8>

0000062c <__mulsf3_pse>:
 62c:	95 9f       	mul	r25, r21
 62e:	c1 f3       	breq	.-16     	; 0x620 <__mulsf3+0x20>
 630:	95 0f       	add	r25, r21
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	55 1f       	adc	r21, r21
 636:	62 9f       	mul	r22, r18
 638:	f0 01       	movw	r30, r0
 63a:	72 9f       	mul	r23, r18
 63c:	bb 27       	eor	r27, r27
 63e:	f0 0d       	add	r31, r0
 640:	b1 1d       	adc	r27, r1
 642:	63 9f       	mul	r22, r19
 644:	aa 27       	eor	r26, r26
 646:	f0 0d       	add	r31, r0
 648:	b1 1d       	adc	r27, r1
 64a:	aa 1f       	adc	r26, r26
 64c:	64 9f       	mul	r22, r20
 64e:	66 27       	eor	r22, r22
 650:	b0 0d       	add	r27, r0
 652:	a1 1d       	adc	r26, r1
 654:	66 1f       	adc	r22, r22
 656:	82 9f       	mul	r24, r18
 658:	22 27       	eor	r18, r18
 65a:	b0 0d       	add	r27, r0
 65c:	a1 1d       	adc	r26, r1
 65e:	62 1f       	adc	r22, r18
 660:	73 9f       	mul	r23, r19
 662:	b0 0d       	add	r27, r0
 664:	a1 1d       	adc	r26, r1
 666:	62 1f       	adc	r22, r18
 668:	83 9f       	mul	r24, r19
 66a:	a0 0d       	add	r26, r0
 66c:	61 1d       	adc	r22, r1
 66e:	22 1f       	adc	r18, r18
 670:	74 9f       	mul	r23, r20
 672:	33 27       	eor	r19, r19
 674:	a0 0d       	add	r26, r0
 676:	61 1d       	adc	r22, r1
 678:	23 1f       	adc	r18, r19
 67a:	84 9f       	mul	r24, r20
 67c:	60 0d       	add	r22, r0
 67e:	21 1d       	adc	r18, r1
 680:	82 2f       	mov	r24, r18
 682:	76 2f       	mov	r23, r22
 684:	6a 2f       	mov	r22, r26
 686:	11 24       	eor	r1, r1
 688:	9f 57       	subi	r25, 0x7F	; 127
 68a:	50 40       	sbci	r21, 0x00	; 0
 68c:	9a f0       	brmi	.+38     	; 0x6b4 <__mulsf3_pse+0x88>
 68e:	f1 f0       	breq	.+60     	; 0x6cc <__mulsf3_pse+0xa0>
 690:	88 23       	and	r24, r24
 692:	4a f0       	brmi	.+18     	; 0x6a6 <__mulsf3_pse+0x7a>
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	bb 1f       	adc	r27, r27
 69a:	66 1f       	adc	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	50 40       	sbci	r21, 0x00	; 0
 6a4:	a9 f7       	brne	.-22     	; 0x690 <__mulsf3_pse+0x64>
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	51 05       	cpc	r21, r1
 6aa:	80 f0       	brcs	.+32     	; 0x6cc <__mulsf3_pse+0xa0>
 6ac:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_inf>
 6b0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	e4 f3       	brlt	.-8      	; 0x6b0 <__mulsf3_pse+0x84>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	d4 f3       	brlt	.-12     	; 0x6b0 <__mulsf3_pse+0x84>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	e7 95       	ror	r30
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	c1 f7       	brne	.-16     	; 0x6bc <__mulsf3_pse+0x90>
 6cc:	fe 2b       	or	r31, r30
 6ce:	88 0f       	add	r24, r24
 6d0:	91 1d       	adc	r25, r1
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
