
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a04  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019b0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f0b  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5c  00000000  00000000  000034b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ac  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000104d  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 98 00 	call	0x130	; 0x130 <main>
  cc:	0c 94 00 05 	jmp	0xa00	; 0xa00 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <set_direction_motor1>:
	PORTB &= ~(1 << EN_PIN);
	set_direction_motor1(1);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
  d4:	88 23       	and	r24, r24
  d6:	21 f0       	breq	.+8      	; 0xe0 <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <setup_pins_motor1>:
#include "direction.h"



void setup_pins_motor1(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	80 67       	ori	r24, 0x70	; 112
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	85 b9       	out	0x05, r24	; 5
	set_direction_motor1(1);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_direction_motor1>
  fa:	08 95       	ret

000000fc <set_direction_motor2>:
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
	set_direction_motor2(1);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
  fc:	88 23       	and	r24, r24
  fe:	21 f0       	breq	.+8      	; 0x108 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 b9       	out	0x05, r24	; 5
 106:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	08 95       	ret

00000110 <setup_pins_motor2>:
	else
	PORTB &= ~(1 << DIR_PIN);
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
 110:	87 b1       	in	r24, 0x07	; 7
 112:	80 64       	ori	r24, 0x40	; 64
 114:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
 116:	84 b1       	in	r24, 0x04	; 4
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	8b b9       	out	0x0b, r24	; 11
	set_direction_motor2(1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 7e 00 	call	0xfc	; 0xfc <set_direction_motor2>
 12e:	08 95       	ret

00000130 <main>:

#include "motion_control.h"


int main(void) {
	setup_pins_motor1();
 130:	0e 94 74 00 	call	0xe8	; 0xe8 <setup_pins_motor1>
	setup_pins_motor2();
 134:	0e 94 88 00 	call	0x110	; 0x110 <setup_pins_motor2>
	move_distance(10,104.72,1);
 138:	01 e0       	ldi	r16, 0x01	; 1
 13a:	24 ea       	ldi	r18, 0xA4	; 164
 13c:	30 e7       	ldi	r19, 0x70	; 112
 13e:	41 ed       	ldi	r20, 0xD1	; 209
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	91 e4       	ldi	r25, 0x41	; 65
 14a:	0e 94 a8 00 	call	0x150	; 0x150 <move_distance>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x1e>

00000150 <move_distance>:
#include <math.h>

#define WHEEL_RADIUS 0.03f
#define STEP_ANGLE   (2.0f * M_PI / STEPS_PER_REV)

void move_distance(float distance_m, float omega_target, uint8_t use_trapezoid) {
 150:	8f 92       	push	r8
 152:	9f 92       	push	r9
 154:	af 92       	push	r10
 156:	bf 92       	push	r11
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	49 01       	movw	r8, r18
 164:	5a 01       	movw	r10, r20
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	float rotations = distance_m / wheel_circ;
 166:	2b ef       	ldi	r18, 0xFB	; 251
 168:	34 e0       	ldi	r19, 0x04	; 4
 16a:	41 e4       	ldi	r20, 0x41	; 65
 16c:	5e e3       	ldi	r21, 0x3E	; 62
 16e:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
	uint32_t total_steps = (uint32_t)(rotations * STEPS_PER_REV);
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	48 e4       	ldi	r20, 0x48	; 72
 178:	54 e4       	ldi	r21, 0x44	; 68
 17a:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 17e:	0e 94 ad 03 	call	0x75a	; 0x75a <__fixunssfsi>

	uint16_t accel_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	uint32_t cruise_steps = (total_steps > 2 * accel_steps) ? (total_steps - 2 * accel_steps) : 0;
 182:	65 36       	cpi	r22, 0x65	; 101
 184:	71 05       	cpc	r23, r1
 186:	81 05       	cpc	r24, r1
 188:	91 05       	cpc	r25, r1
 18a:	40 f0       	brcs	.+16     	; 0x19c <move_distance+0x4c>
 18c:	6b 01       	movw	r12, r22
 18e:	7c 01       	movw	r14, r24
 190:	24 e6       	ldi	r18, 0x64	; 100
 192:	c2 1a       	sub	r12, r18
 194:	d1 08       	sbc	r13, r1
 196:	e1 08       	sbc	r14, r1
 198:	f1 08       	sbc	r15, r1
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <move_distance+0x52>
 19c:	c1 2c       	mov	r12, r1
 19e:	d1 2c       	mov	r13, r1
 1a0:	76 01       	movw	r14, r12

	// Ramp Up
	if (use_trapezoid) {
 1a2:	00 23       	and	r16, r16
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <move_distance+0x60>
		ramp_up_trapezoid(omega_target);
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ramp_up_trapezoid>
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <move_distance+0x68>
		} else {
		ramp_up_scurve(omega_target);
 1b0:	c5 01       	movw	r24, r10
 1b2:	b4 01       	movw	r22, r8
 1b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ramp_up_scurve>
	}

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
 1b8:	c5 01       	movw	r24, r10
 1ba:	b4 01       	movw	r22, r8
 1bc:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 1c0:	c5 01       	movw	r24, r10
 1c2:	b4 01       	movw	r22, r8
 1c4:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	ba 01       	movw	r22, r20
 1ce:	0e c0       	rjmp	.+28     	; 0x1ec <move_distance+0x9c>
		while (!(TIFR1 & (1 << OCF1A))) {}
 1d0:	b1 9b       	sbis	0x16, 1	; 22
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <move_distance+0x80>
		TIFR1 |= (1 << OCF1A);
 1d4:	86 b3       	in	r24, 0x16	; 22
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	86 bb       	out	0x16, r24	; 22
		while (!(TIFR3 & (1 << OCF3A))) {}
 1da:	c1 9b       	sbis	0x18, 1	; 24
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <move_distance+0x8a>
		TIFR3 |= (1 << OCF3A);
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	88 bb       	out	0x18, r24	; 24

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1e4:	4f 5f       	subi	r20, 0xFF	; 255
 1e6:	5f 4f       	sbci	r21, 0xFF	; 255
 1e8:	6f 4f       	sbci	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	4c 15       	cp	r20, r12
 1ee:	5d 05       	cpc	r21, r13
 1f0:	6e 05       	cpc	r22, r14
 1f2:	7f 05       	cpc	r23, r15
 1f4:	68 f3       	brcs	.-38     	; 0x1d0 <move_distance+0x80>
		while (!(TIFR3 & (1 << OCF3A))) {}
		TIFR3 |= (1 << OCF3A);
	}

	// Ramp Down
	if (use_trapezoid) {
 1f6:	00 23       	and	r16, r16
 1f8:	29 f0       	breq	.+10     	; 0x204 <move_distance+0xb4>
		ramp_down_trapezoid(omega_target);
 1fa:	c5 01       	movw	r24, r10
 1fc:	b4 01       	movw	r22, r8
 1fe:	0e 94 16 02 	call	0x42c	; 0x42c <ramp_down_trapezoid>
 202:	04 c0       	rjmp	.+8      	; 0x20c <move_distance+0xbc>
		} else {
		ramp_down_scurve(omega_target);
 204:	c5 01       	movw	r24, r10
 206:	b4 01       	movw	r22, r8
 208:	0e 94 95 01 	call	0x32a	; 0x32a <ramp_down_scurve>
	}

	// Stop motors
	set_angular_velocity_motor1(0);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	cb 01       	movw	r24, r22
 212:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	cb 01       	movw	r24, r22
 21c:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>
}
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	cf 90       	pop	r12
 22a:	bf 90       	pop	r11
 22c:	af 90       	pop	r10
 22e:	9f 90       	pop	r9
 230:	8f 90       	pop	r8
 232:	08 95       	ret

00000234 <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 234:	8f 92       	push	r8
 236:	9f 92       	push	r9
 238:	af 92       	push	r10
 23a:	bf 92       	push	r11
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	6b 01       	movw	r12, r22
 246:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e4       	ldi	r20, 0x40	; 64
 24e:	50 e4       	ldi	r21, 0x40	; 64
 250:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	c7 01       	movw	r24, r14
 25a:	b6 01       	movw	r22, r12
 25c:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 260:	4b 01       	movw	r8, r22
 262:	5c 01       	movw	r10, r24
 264:	a7 01       	movw	r20, r14
 266:	96 01       	movw	r18, r12
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 ca 02 	call	0x594	; 0x594 <__addsf3>
 270:	9b 01       	movw	r18, r22
 272:	ac 01       	movw	r20, r24
 274:	c7 01       	movw	r24, r14
 276:	b6 01       	movw	r22, r12
 278:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 288:	9b 01       	movw	r18, r22
 28a:	ac 01       	movw	r20, r24
 28c:	c5 01       	movw	r24, r10
 28e:	b4 01       	movw	r22, r8
 290:	0e 94 c9 02 	call	0x592	; 0x592 <__subsf3>
}
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	af 90       	pop	r10
 2a0:	9f 90       	pop	r9
 2a2:	8f 90       	pop	r8
 2a4:	08 95       	ret

000002a6 <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	4b 01       	movw	r8, r22
 2bc:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 2be:	c1 e0       	ldi	r28, 0x01	; 1
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	25 c0       	rjmp	.+74     	; 0x30e <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 2c4:	be 01       	movw	r22, r28
 2c6:	0d 2e       	mov	r0, r29
 2c8:	00 0c       	add	r0, r0
 2ca:	88 0b       	sbc	r24, r24
 2cc:	99 0b       	sbc	r25, r25
 2ce:	0e 94 de 03 	call	0x7bc	; 0x7bc <__floatsisf>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	48 e4       	ldi	r20, 0x48	; 72
 2d8:	52 e4       	ldi	r21, 0x42	; 66
 2da:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 2de:	0e 94 1a 01 	call	0x234	; 0x234 <s_curve_profile>
 2e2:	a5 01       	movw	r20, r10
 2e4:	94 01       	movw	r18, r8
 2e6:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 2ee:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	80 e7       	ldi	r24, 0x70	; 112
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <ramp_up_scurve+0x5a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <ramp_up_scurve+0x64>
 30a:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 30c:	21 96       	adiw	r28, 0x01	; 1
 30e:	c3 33       	cpi	r28, 0x33	; 51
 310:	d1 05       	cpc	r29, r1
 312:	c4 f2       	brlt	.-80     	; 0x2c4 <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	8f 90       	pop	r8
 328:	08 95       	ret

0000032a <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	4b 01       	movw	r8, r22
 340:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 342:	c1 e3       	ldi	r28, 0x31	; 49
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	25 c0       	rjmp	.+74     	; 0x392 <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 348:	be 01       	movw	r22, r28
 34a:	0d 2e       	mov	r0, r29
 34c:	00 0c       	add	r0, r0
 34e:	88 0b       	sbc	r24, r24
 350:	99 0b       	sbc	r25, r25
 352:	0e 94 de 03 	call	0x7bc	; 0x7bc <__floatsisf>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	48 e4       	ldi	r20, 0x48	; 72
 35c:	52 e4       	ldi	r21, 0x42	; 66
 35e:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 362:	0e 94 1a 01 	call	0x234	; 0x234 <s_curve_profile>
 366:	a5 01       	movw	r20, r10
 368:	94 01       	movw	r18, r8
 36a:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 36e:	6b 01       	movw	r12, r22
 370:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 372:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 376:	c7 01       	movw	r24, r14
 378:	b6 01       	movw	r22, r12
 37a:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	80 e7       	ldi	r24, 0x70	; 112
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <ramp_down_scurve+0x5a>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <ramp_down_scurve+0x64>
 38e:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 390:	21 97       	sbiw	r28, 0x01	; 1
 392:	dd 23       	and	r29, r29
 394:	cc f6       	brge	.-78     	; 0x348 <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	9f 90       	pop	r9
 3a8:	8f 90       	pop	r8
 3aa:	08 95       	ret

000003ac <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 3ac:	8f 92       	push	r8
 3ae:	9f 92       	push	r9
 3b0:	af 92       	push	r10
 3b2:	bf 92       	push	r11
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ef 92       	push	r14
 3ba:	ff 92       	push	r15
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	4b 01       	movw	r8, r22
 3c2:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 3c4:	c1 e0       	ldi	r28, 0x01	; 1
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	23 c0       	rjmp	.+70     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 3ca:	be 01       	movw	r22, r28
 3cc:	0d 2e       	mov	r0, r29
 3ce:	00 0c       	add	r0, r0
 3d0:	88 0b       	sbc	r24, r24
 3d2:	99 0b       	sbc	r25, r25
 3d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <__floatsisf>
 3d8:	a5 01       	movw	r20, r10
 3da:	94 01       	movw	r18, r8
 3dc:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	48 e4       	ldi	r20, 0x48	; 72
 3e6:	52 e4       	ldi	r21, 0x42	; 66
 3e8:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
 3ec:	6b 01       	movw	r12, r22
 3ee:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 3f0:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 3f4:	c7 01       	movw	r24, r14
 3f6:	b6 01       	movw	r22, r12
 3f8:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	80 e7       	ldi	r24, 0x70	; 112
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	c3 33       	cpi	r28, 0x33	; 51
 412:	d1 05       	cpc	r29, r1
 414:	d4 f2       	brlt	.-76     	; 0x3ca <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	08 95       	ret

0000042c <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 42c:	8f 92       	push	r8
 42e:	9f 92       	push	r9
 430:	af 92       	push	r10
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	4b 01       	movw	r8, r22
 442:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 444:	c1 e3       	ldi	r28, 0x31	; 49
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	23 c0       	rjmp	.+70     	; 0x490 <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 44a:	be 01       	movw	r22, r28
 44c:	0d 2e       	mov	r0, r29
 44e:	00 0c       	add	r0, r0
 450:	88 0b       	sbc	r24, r24
 452:	99 0b       	sbc	r25, r25
 454:	0e 94 de 03 	call	0x7bc	; 0x7bc <__floatsisf>
 458:	a5 01       	movw	r20, r10
 45a:	94 01       	movw	r18, r8
 45c:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	48 e4       	ldi	r20, 0x48	; 72
 466:	52 e4       	ldi	r21, 0x42	; 66
 468:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
 46c:	6b 01       	movw	r12, r22
 46e:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 470:	0e 94 bb 02 	call	0x576	; 0x576 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 474:	c7 01       	movw	r24, r14
 476:	b6 01       	movw	r22, r12
 478:	0e 94 c2 02 	call	0x584	; 0x584 <set_angular_velocity_motor2>
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	80 e7       	ldi	r24, 0x70	; 112
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <ramp_down_trapezoid+0x56>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <ramp_down_trapezoid+0x60>
 48c:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 48e:	21 97       	sbiw	r28, 0x01	; 1
 490:	dd 23       	and	r29, r29
 492:	dc f6       	brge	.-74     	; 0x44a <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	9f 90       	pop	r9
 4a6:	8f 90       	pop	r8
 4a8:	08 95       	ret

000004aa <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 4aa:	2b ee       	ldi	r18, 0xEB	; 235
 4ac:	39 ec       	ldi	r19, 0xC9	; 201
 4ae:	48 e1       	ldi	r20, 0x18	; 24
 4b0:	51 e4       	ldi	r21, 0x41	; 65
 4b2:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
}
 4b6:	08 95       	ret

000004b8 <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	6b 01       	movw	r12, r22
 4c2:	7c 01       	movw	r14, r24
	if (rpm <= 0) return 65535;
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	a9 01       	movw	r20, r18
 4ca:	0e 94 36 03 	call	0x66c	; 0x66c <__cmpsf2>
 4ce:	18 16       	cp	r1, r24
 4d0:	ac f5       	brge	.+106    	; 0x53c <rpm_to_ocr+0x84>
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	48 e4       	ldi	r20, 0x48	; 72
 4d8:	54 e4       	ldi	r21, 0x44	; 68
 4da:	c7 01       	movw	r24, r14
 4dc:	b6 01       	movw	r22, r12
 4de:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	40 e7       	ldi	r20, 0x70	; 112
 4e8:	52 e4       	ldi	r21, 0x42	; 66
 4ea:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	51 e4       	ldi	r21, 0x41	; 65
 4f6:	0e 94 93 04 	call	0x926	; 0x926 <__mulsf3>
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	74 e2       	ldi	r23, 0x24	; 36
 502:	84 e7       	ldi	r24, 0x74	; 116
 504:	9b e4       	ldi	r25, 0x4B	; 75
 506:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
 50a:	6b 01       	movw	r12, r22
 50c:	7c 01       	movw	r14, r24
	if (ocr > 65535) ocr = 65535;
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	3f ef       	ldi	r19, 0xFF	; 255
 512:	4f e7       	ldi	r20, 0x7F	; 127
 514:	57 e4       	ldi	r21, 0x47	; 71
 516:	0e 94 8e 04 	call	0x91c	; 0x91c <__gesf2>
 51a:	18 16       	cp	r1, r24
 51c:	4c f4       	brge	.+18     	; 0x530 <rpm_to_ocr+0x78>
 51e:	0f 2e       	mov	r0, r31
 520:	c1 2c       	mov	r12, r1
 522:	dd 24       	eor	r13, r13
 524:	da 94       	dec	r13
 526:	ff e7       	ldi	r31, 0x7F	; 127
 528:	ef 2e       	mov	r14, r31
 52a:	f7 e4       	ldi	r31, 0x47	; 71
 52c:	ff 2e       	mov	r15, r31
 52e:	f0 2d       	mov	r31, r0
	return (uint16_t)ocr;
 530:	c7 01       	movw	r24, r14
 532:	b6 01       	movw	r22, r12
 534:	0e 94 ad 03 	call	0x75a	; 0x75a <__fixunssfsi>
 538:	cb 01       	movw	r24, r22
 53a:	02 c0       	rjmp	.+4      	; 0x540 <rpm_to_ocr+0x88>
float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) return 65535;
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	9f ef       	ldi	r25, 0xFF	; 255
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
	if (ocr > 65535) ocr = 65535;
	return (uint16_t)ocr;
}
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	df 90       	pop	r13
 546:	cf 90       	pop	r12
 548:	08 95       	ret

0000054a <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	TCCR1A = (1 << COM1A0);
 54a:	20 e4       	ldi	r18, 0x40	; 64
 54c:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11);
 550:	2a e0       	ldi	r18, 0x0A	; 10
 552:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = ocr_value;
 556:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 55a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 55e:	08 95       	ret

00000560 <setup_timer3>:
}

void setup_timer3(uint16_t ocr_value) {
	TCCR3A = (1 << COM3A0);
 560:	20 e4       	ldi	r18, 0x40	; 64
 562:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31);
 566:	2a e0       	ldi	r18, 0x0A	; 10
 568:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = ocr_value;
 56c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 570:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 574:	08 95       	ret

00000576 <set_angular_velocity_motor1>:
}

void set_angular_velocity_motor1(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 576:	0e 94 55 02 	call	0x4aa	; 0x4aa <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 57a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rpm_to_ocr>
	setup_timer1(ocr);
 57e:	0e 94 a5 02 	call	0x54a	; 0x54a <setup_timer1>
 582:	08 95       	ret

00000584 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 584:	0e 94 55 02 	call	0x4aa	; 0x4aa <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 588:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rpm_to_ocr>
	setup_timer3(ocr);
 58c:	0e 94 b0 02 	call	0x560	; 0x560 <setup_timer3>
 590:	08 95       	ret

00000592 <__subsf3>:
 592:	50 58       	subi	r21, 0x80	; 128

00000594 <__addsf3>:
 594:	bb 27       	eor	r27, r27
 596:	aa 27       	eor	r26, r26
 598:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3x>
 59c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 5a0:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 5a4:	38 f0       	brcs	.+14     	; 0x5b4 <__addsf3+0x20>
 5a6:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__addsf3+0x20>
 5ac:	39 f4       	brne	.+14     	; 0x5bc <__addsf3+0x28>
 5ae:	9f 3f       	cpi	r25, 0xFF	; 255
 5b0:	19 f4       	brne	.+6      	; 0x5b8 <__addsf3+0x24>
 5b2:	26 f4       	brtc	.+8      	; 0x5bc <__addsf3+0x28>
 5b4:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 5b8:	0e f4       	brtc	.+2      	; 0x5bc <__addsf3+0x28>
 5ba:	e0 95       	com	r30
 5bc:	e7 fb       	bst	r30, 7
 5be:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>

000005c2 <__addsf3x>:
 5c2:	e9 2f       	mov	r30, r25
 5c4:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_split3>
 5c8:	58 f3       	brcs	.-42     	; 0x5a0 <__addsf3+0xc>
 5ca:	ba 17       	cp	r27, r26
 5cc:	62 07       	cpc	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3x+0x1c>
 5d6:	79 f4       	brne	.+30     	; 0x5f6 <__addsf3x+0x34>
 5d8:	a6 f5       	brtc	.+104    	; 0x642 <__addsf3x+0x80>
 5da:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_zero>
 5de:	0e f4       	brtc	.+2      	; 0x5e2 <__addsf3x+0x20>
 5e0:	e0 95       	com	r30
 5e2:	0b 2e       	mov	r0, r27
 5e4:	ba 2f       	mov	r27, r26
 5e6:	a0 2d       	mov	r26, r0
 5e8:	0b 01       	movw	r0, r22
 5ea:	b9 01       	movw	r22, r18
 5ec:	90 01       	movw	r18, r0
 5ee:	0c 01       	movw	r0, r24
 5f0:	ca 01       	movw	r24, r20
 5f2:	a0 01       	movw	r20, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	ff 27       	eor	r31, r31
 5f8:	59 1b       	sub	r21, r25
 5fa:	99 f0       	breq	.+38     	; 0x622 <__addsf3x+0x60>
 5fc:	59 3f       	cpi	r21, 0xF9	; 249
 5fe:	50 f4       	brcc	.+20     	; 0x614 <__addsf3x+0x52>
 600:	50 3e       	cpi	r21, 0xE0	; 224
 602:	68 f1       	brcs	.+90     	; 0x65e <__addsf3x+0x9c>
 604:	1a 16       	cp	r1, r26
 606:	f0 40       	sbci	r31, 0x00	; 0
 608:	a2 2f       	mov	r26, r18
 60a:	23 2f       	mov	r18, r19
 60c:	34 2f       	mov	r19, r20
 60e:	44 27       	eor	r20, r20
 610:	58 5f       	subi	r21, 0xF8	; 248
 612:	f3 cf       	rjmp	.-26     	; 0x5fa <__addsf3x+0x38>
 614:	46 95       	lsr	r20
 616:	37 95       	ror	r19
 618:	27 95       	ror	r18
 61a:	a7 95       	ror	r26
 61c:	f0 40       	sbci	r31, 0x00	; 0
 61e:	53 95       	inc	r21
 620:	c9 f7       	brne	.-14     	; 0x614 <__addsf3x+0x52>
 622:	7e f4       	brtc	.+30     	; 0x642 <__addsf3x+0x80>
 624:	1f 16       	cp	r1, r31
 626:	ba 0b       	sbc	r27, r26
 628:	62 0b       	sbc	r22, r18
 62a:	73 0b       	sbc	r23, r19
 62c:	84 0b       	sbc	r24, r20
 62e:	ba f0       	brmi	.+46     	; 0x65e <__addsf3x+0x9c>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	a1 f0       	breq	.+40     	; 0x65c <__addsf3x+0x9a>
 634:	ff 0f       	add	r31, r31
 636:	bb 1f       	adc	r27, r27
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	c2 f7       	brpl	.-16     	; 0x630 <__addsf3x+0x6e>
 640:	0e c0       	rjmp	.+28     	; 0x65e <__addsf3x+0x9c>
 642:	ba 0f       	add	r27, r26
 644:	62 1f       	adc	r22, r18
 646:	73 1f       	adc	r23, r19
 648:	84 1f       	adc	r24, r20
 64a:	48 f4       	brcc	.+18     	; 0x65e <__addsf3x+0x9c>
 64c:	87 95       	ror	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	9e 3f       	cpi	r25, 0xFE	; 254
 658:	08 f0       	brcs	.+2      	; 0x65c <__addsf3x+0x9a>
 65a:	b0 cf       	rjmp	.-160    	; 0x5bc <__addsf3+0x28>
 65c:	93 95       	inc	r25
 65e:	88 0f       	add	r24, r24
 660:	08 f0       	brcs	.+2      	; 0x664 <__addsf3x+0xa2>
 662:	99 27       	eor	r25, r25
 664:	ee 0f       	add	r30, r30
 666:	97 95       	ror	r25
 668:	87 95       	ror	r24
 66a:	08 95       	ret

0000066c <__cmpsf2>:
 66c:	0e 94 19 04 	call	0x832	; 0x832 <__fp_cmp>
 670:	08 f4       	brcc	.+2      	; 0x674 <__cmpsf2+0x8>
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	08 95       	ret

00000676 <__divsf3>:
 676:	0e 94 4f 03 	call	0x69e	; 0x69e <__divsf3x>
 67a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 67e:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 682:	58 f0       	brcs	.+22     	; 0x69a <__divsf3+0x24>
 684:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 688:	40 f0       	brcs	.+16     	; 0x69a <__divsf3+0x24>
 68a:	29 f4       	brne	.+10     	; 0x696 <__divsf3+0x20>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	29 f0       	breq	.+10     	; 0x69a <__divsf3+0x24>
 690:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 694:	51 11       	cpse	r21, r1
 696:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>
 69a:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>

0000069e <__divsf3x>:
 69e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_split3>
 6a2:	68 f3       	brcs	.-38     	; 0x67e <__divsf3+0x8>

000006a4 <__divsf3_pse>:
 6a4:	99 23       	and	r25, r25
 6a6:	b1 f3       	breq	.-20     	; 0x694 <__divsf3+0x1e>
 6a8:	55 23       	and	r21, r21
 6aa:	91 f3       	breq	.-28     	; 0x690 <__divsf3+0x1a>
 6ac:	95 1b       	sub	r25, r21
 6ae:	55 0b       	sbc	r21, r21
 6b0:	bb 27       	eor	r27, r27
 6b2:	aa 27       	eor	r26, r26
 6b4:	62 17       	cp	r22, r18
 6b6:	73 07       	cpc	r23, r19
 6b8:	84 07       	cpc	r24, r20
 6ba:	38 f0       	brcs	.+14     	; 0x6ca <__divsf3_pse+0x26>
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	44 1f       	adc	r20, r20
 6c6:	aa 1f       	adc	r26, r26
 6c8:	a9 f3       	breq	.-22     	; 0x6b4 <__divsf3_pse+0x10>
 6ca:	35 d0       	rcall	.+106    	; 0x736 <__divsf3_pse+0x92>
 6cc:	0e 2e       	mov	r0, r30
 6ce:	3a f0       	brmi	.+14     	; 0x6de <__divsf3_pse+0x3a>
 6d0:	e0 e8       	ldi	r30, 0x80	; 128
 6d2:	32 d0       	rcall	.+100    	; 0x738 <__divsf3_pse+0x94>
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	e6 95       	lsr	r30
 6da:	00 1c       	adc	r0, r0
 6dc:	ca f7       	brpl	.-14     	; 0x6d0 <__divsf3_pse+0x2c>
 6de:	2b d0       	rcall	.+86     	; 0x736 <__divsf3_pse+0x92>
 6e0:	fe 2f       	mov	r31, r30
 6e2:	29 d0       	rcall	.+82     	; 0x736 <__divsf3_pse+0x92>
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	bb 1f       	adc	r27, r27
 6ec:	26 17       	cp	r18, r22
 6ee:	37 07       	cpc	r19, r23
 6f0:	48 07       	cpc	r20, r24
 6f2:	ab 07       	cpc	r26, r27
 6f4:	b0 e8       	ldi	r27, 0x80	; 128
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__divsf3_pse+0x56>
 6f8:	bb 0b       	sbc	r27, r27
 6fa:	80 2d       	mov	r24, r0
 6fc:	bf 01       	movw	r22, r30
 6fe:	ff 27       	eor	r31, r31
 700:	93 58       	subi	r25, 0x83	; 131
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	3a f0       	brmi	.+14     	; 0x714 <__divsf3_pse+0x70>
 706:	9e 3f       	cpi	r25, 0xFE	; 254
 708:	51 05       	cpc	r21, r1
 70a:	78 f0       	brcs	.+30     	; 0x72a <__divsf3_pse+0x86>
 70c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 710:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	e4 f3       	brlt	.-8      	; 0x710 <__divsf3_pse+0x6c>
 718:	98 3e       	cpi	r25, 0xE8	; 232
 71a:	d4 f3       	brlt	.-12     	; 0x710 <__divsf3_pse+0x6c>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	9f 5f       	subi	r25, 0xFF	; 255
 728:	c9 f7       	brne	.-14     	; 0x71c <__divsf3_pse+0x78>
 72a:	88 0f       	add	r24, r24
 72c:	91 1d       	adc	r25, r1
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret
 736:	e1 e0       	ldi	r30, 0x01	; 1
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	bb 1f       	adc	r27, r27
 740:	62 17       	cp	r22, r18
 742:	73 07       	cpc	r23, r19
 744:	84 07       	cpc	r24, r20
 746:	ba 07       	cpc	r27, r26
 748:	20 f0       	brcs	.+8      	; 0x752 <__divsf3_pse+0xae>
 74a:	62 1b       	sub	r22, r18
 74c:	73 0b       	sbc	r23, r19
 74e:	84 0b       	sbc	r24, r20
 750:	ba 0b       	sbc	r27, r26
 752:	ee 1f       	adc	r30, r30
 754:	88 f7       	brcc	.-30     	; 0x738 <__divsf3_pse+0x94>
 756:	e0 95       	com	r30
 758:	08 95       	ret

0000075a <__fixunssfsi>:
 75a:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_splitA>
 75e:	88 f0       	brcs	.+34     	; 0x782 <__fixunssfsi+0x28>
 760:	9f 57       	subi	r25, 0x7F	; 127
 762:	98 f0       	brcs	.+38     	; 0x78a <__fixunssfsi+0x30>
 764:	b9 2f       	mov	r27, r25
 766:	99 27       	eor	r25, r25
 768:	b7 51       	subi	r27, 0x17	; 23
 76a:	b0 f0       	brcs	.+44     	; 0x798 <__fixunssfsi+0x3e>
 76c:	e1 f0       	breq	.+56     	; 0x7a6 <__fixunssfsi+0x4c>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	1a f0       	brmi	.+6      	; 0x77e <__fixunssfsi+0x24>
 778:	ba 95       	dec	r27
 77a:	c9 f7       	brne	.-14     	; 0x76e <__fixunssfsi+0x14>
 77c:	14 c0       	rjmp	.+40     	; 0x7a6 <__fixunssfsi+0x4c>
 77e:	b1 30       	cpi	r27, 0x01	; 1
 780:	91 f0       	breq	.+36     	; 0x7a6 <__fixunssfsi+0x4c>
 782:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_zero>
 786:	b1 e0       	ldi	r27, 0x01	; 1
 788:	08 95       	ret
 78a:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_zero>
 78e:	67 2f       	mov	r22, r23
 790:	78 2f       	mov	r23, r24
 792:	88 27       	eor	r24, r24
 794:	b8 5f       	subi	r27, 0xF8	; 248
 796:	39 f0       	breq	.+14     	; 0x7a6 <__fixunssfsi+0x4c>
 798:	b9 3f       	cpi	r27, 0xF9	; 249
 79a:	cc f3       	brlt	.-14     	; 0x78e <__fixunssfsi+0x34>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b3 95       	inc	r27
 7a4:	d9 f7       	brne	.-10     	; 0x79c <__fixunssfsi+0x42>
 7a6:	3e f4       	brtc	.+14     	; 0x7b6 <__fixunssfsi+0x5c>
 7a8:	90 95       	com	r25
 7aa:	80 95       	com	r24
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <__floatunsisf>:
 7b8:	e8 94       	clt
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <__floatsisf+0x12>

000007bc <__floatsisf>:
 7bc:	97 fb       	bst	r25, 7
 7be:	3e f4       	brtc	.+14     	; 0x7ce <__floatsisf+0x12>
 7c0:	90 95       	com	r25
 7c2:	80 95       	com	r24
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	99 23       	and	r25, r25
 7d0:	a9 f0       	breq	.+42     	; 0x7fc <__floatsisf+0x40>
 7d2:	f9 2f       	mov	r31, r25
 7d4:	96 e9       	ldi	r25, 0x96	; 150
 7d6:	bb 27       	eor	r27, r27
 7d8:	93 95       	inc	r25
 7da:	f6 95       	lsr	r31
 7dc:	87 95       	ror	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	b7 95       	ror	r27
 7e4:	f1 11       	cpse	r31, r1
 7e6:	f8 cf       	rjmp	.-16     	; 0x7d8 <__floatsisf+0x1c>
 7e8:	fa f4       	brpl	.+62     	; 0x828 <__floatsisf+0x6c>
 7ea:	bb 0f       	add	r27, r27
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <__floatsisf+0x36>
 7ee:	60 ff       	sbrs	r22, 0
 7f0:	1b c0       	rjmp	.+54     	; 0x828 <__floatsisf+0x6c>
 7f2:	6f 5f       	subi	r22, 0xFF	; 255
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	16 c0       	rjmp	.+44     	; 0x828 <__floatsisf+0x6c>
 7fc:	88 23       	and	r24, r24
 7fe:	11 f0       	breq	.+4      	; 0x804 <__floatsisf+0x48>
 800:	96 e9       	ldi	r25, 0x96	; 150
 802:	11 c0       	rjmp	.+34     	; 0x826 <__floatsisf+0x6a>
 804:	77 23       	and	r23, r23
 806:	21 f0       	breq	.+8      	; 0x810 <__floatsisf+0x54>
 808:	9e e8       	ldi	r25, 0x8E	; 142
 80a:	87 2f       	mov	r24, r23
 80c:	76 2f       	mov	r23, r22
 80e:	05 c0       	rjmp	.+10     	; 0x81a <__floatsisf+0x5e>
 810:	66 23       	and	r22, r22
 812:	71 f0       	breq	.+28     	; 0x830 <__floatsisf+0x74>
 814:	96 e8       	ldi	r25, 0x86	; 134
 816:	86 2f       	mov	r24, r22
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	2a f0       	brmi	.+10     	; 0x828 <__floatsisf+0x6c>
 81e:	9a 95       	dec	r25
 820:	66 0f       	add	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	da f7       	brpl	.-10     	; 0x81e <__floatsisf+0x62>
 828:	88 0f       	add	r24, r24
 82a:	96 95       	lsr	r25
 82c:	87 95       	ror	r24
 82e:	97 f9       	bld	r25, 7
 830:	08 95       	ret

00000832 <__fp_cmp>:
 832:	99 0f       	add	r25, r25
 834:	00 08       	sbc	r0, r0
 836:	55 0f       	add	r21, r21
 838:	aa 0b       	sbc	r26, r26
 83a:	e0 e8       	ldi	r30, 0x80	; 128
 83c:	fe ef       	ldi	r31, 0xFE	; 254
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	e8 07       	cpc	r30, r24
 844:	f9 07       	cpc	r31, r25
 846:	c0 f0       	brcs	.+48     	; 0x878 <__fp_cmp+0x46>
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	e4 07       	cpc	r30, r20
 84e:	f5 07       	cpc	r31, r21
 850:	98 f0       	brcs	.+38     	; 0x878 <__fp_cmp+0x46>
 852:	62 1b       	sub	r22, r18
 854:	73 0b       	sbc	r23, r19
 856:	84 0b       	sbc	r24, r20
 858:	95 0b       	sbc	r25, r21
 85a:	39 f4       	brne	.+14     	; 0x86a <__fp_cmp+0x38>
 85c:	0a 26       	eor	r0, r26
 85e:	61 f0       	breq	.+24     	; 0x878 <__fp_cmp+0x46>
 860:	23 2b       	or	r18, r19
 862:	24 2b       	or	r18, r20
 864:	25 2b       	or	r18, r21
 866:	21 f4       	brne	.+8      	; 0x870 <__fp_cmp+0x3e>
 868:	08 95       	ret
 86a:	0a 26       	eor	r0, r26
 86c:	09 f4       	brne	.+2      	; 0x870 <__fp_cmp+0x3e>
 86e:	a1 40       	sbci	r26, 0x01	; 1
 870:	a6 95       	lsr	r26
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	81 1d       	adc	r24, r1
 876:	81 1d       	adc	r24, r1
 878:	08 95       	ret

0000087a <__fp_inf>:
 87a:	97 f9       	bld	r25, 7
 87c:	9f 67       	ori	r25, 0x7F	; 127
 87e:	80 e8       	ldi	r24, 0x80	; 128
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	08 95       	ret

00000886 <__fp_nan>:
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	08 95       	ret

0000088c <__fp_pscA>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	09 06       	cpc	r0, r25
 898:	08 95       	ret

0000089a <__fp_pscB>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	05 06       	cpc	r0, r21
 8a6:	08 95       	ret

000008a8 <__fp_round>:
 8a8:	09 2e       	mov	r0, r25
 8aa:	03 94       	inc	r0
 8ac:	00 0c       	add	r0, r0
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0xc>
 8b0:	88 23       	and	r24, r24
 8b2:	52 f0       	brmi	.+20     	; 0x8c8 <__fp_round+0x20>
 8b4:	bb 0f       	add	r27, r27
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <__fp_round+0x20>
 8b8:	bf 2b       	or	r27, r31
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0x18>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fp_round+0x20>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	08 95       	ret

000008ca <__fp_split3>:
 8ca:	57 fd       	sbrc	r21, 7
 8cc:	90 58       	subi	r25, 0x80	; 128
 8ce:	44 0f       	add	r20, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	59 f0       	breq	.+22     	; 0x8ea <__fp_splitA+0x10>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <__fp_splitA+0x1a>
 8d8:	47 95       	ror	r20

000008da <__fp_splitA>:
 8da:	88 0f       	add	r24, r24
 8dc:	97 fb       	bst	r25, 7
 8de:	99 1f       	adc	r25, r25
 8e0:	61 f0       	breq	.+24     	; 0x8fa <__fp_splitA+0x20>
 8e2:	9f 3f       	cpi	r25, 0xFF	; 255
 8e4:	79 f0       	breq	.+30     	; 0x904 <__fp_splitA+0x2a>
 8e6:	87 95       	ror	r24
 8e8:	08 95       	ret
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	55 1f       	adc	r21, r21
 8f2:	f2 cf       	rjmp	.-28     	; 0x8d8 <__fp_split3+0xe>
 8f4:	46 95       	lsr	r20
 8f6:	f1 df       	rcall	.-30     	; 0x8da <__fp_splitA>
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__fp_splitA+0x30>
 8fa:	16 16       	cp	r1, r22
 8fc:	17 06       	cpc	r1, r23
 8fe:	18 06       	cpc	r1, r24
 900:	99 1f       	adc	r25, r25
 902:	f1 cf       	rjmp	.-30     	; 0x8e6 <__fp_splitA+0xc>
 904:	86 95       	lsr	r24
 906:	71 05       	cpc	r23, r1
 908:	61 05       	cpc	r22, r1
 90a:	08 94       	sec
 90c:	08 95       	ret

0000090e <__fp_zero>:
 90e:	e8 94       	clt

00000910 <__fp_szero>:
 910:	bb 27       	eor	r27, r27
 912:	66 27       	eor	r22, r22
 914:	77 27       	eor	r23, r23
 916:	cb 01       	movw	r24, r22
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <__gesf2>:
 91c:	0e 94 19 04 	call	0x832	; 0x832 <__fp_cmp>
 920:	08 f4       	brcc	.+2      	; 0x924 <__gesf2+0x8>
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	08 95       	ret

00000926 <__mulsf3>:
 926:	0e 94 a6 04 	call	0x94c	; 0x94c <__mulsf3x>
 92a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 92e:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 932:	38 f0       	brcs	.+14     	; 0x942 <__mulsf3+0x1c>
 934:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 938:	20 f0       	brcs	.+8      	; 0x942 <__mulsf3+0x1c>
 93a:	95 23       	and	r25, r21
 93c:	11 f0       	breq	.+4      	; 0x942 <__mulsf3+0x1c>
 93e:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 942:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 946:	11 24       	eor	r1, r1
 948:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>

0000094c <__mulsf3x>:
 94c:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_split3>
 950:	70 f3       	brcs	.-36     	; 0x92e <__mulsf3+0x8>

00000952 <__mulsf3_pse>:
 952:	95 9f       	mul	r25, r21
 954:	c1 f3       	breq	.-16     	; 0x946 <__mulsf3+0x20>
 956:	95 0f       	add	r25, r21
 958:	50 e0       	ldi	r21, 0x00	; 0
 95a:	55 1f       	adc	r21, r21
 95c:	62 9f       	mul	r22, r18
 95e:	f0 01       	movw	r30, r0
 960:	72 9f       	mul	r23, r18
 962:	bb 27       	eor	r27, r27
 964:	f0 0d       	add	r31, r0
 966:	b1 1d       	adc	r27, r1
 968:	63 9f       	mul	r22, r19
 96a:	aa 27       	eor	r26, r26
 96c:	f0 0d       	add	r31, r0
 96e:	b1 1d       	adc	r27, r1
 970:	aa 1f       	adc	r26, r26
 972:	64 9f       	mul	r22, r20
 974:	66 27       	eor	r22, r22
 976:	b0 0d       	add	r27, r0
 978:	a1 1d       	adc	r26, r1
 97a:	66 1f       	adc	r22, r22
 97c:	82 9f       	mul	r24, r18
 97e:	22 27       	eor	r18, r18
 980:	b0 0d       	add	r27, r0
 982:	a1 1d       	adc	r26, r1
 984:	62 1f       	adc	r22, r18
 986:	73 9f       	mul	r23, r19
 988:	b0 0d       	add	r27, r0
 98a:	a1 1d       	adc	r26, r1
 98c:	62 1f       	adc	r22, r18
 98e:	83 9f       	mul	r24, r19
 990:	a0 0d       	add	r26, r0
 992:	61 1d       	adc	r22, r1
 994:	22 1f       	adc	r18, r18
 996:	74 9f       	mul	r23, r20
 998:	33 27       	eor	r19, r19
 99a:	a0 0d       	add	r26, r0
 99c:	61 1d       	adc	r22, r1
 99e:	23 1f       	adc	r18, r19
 9a0:	84 9f       	mul	r24, r20
 9a2:	60 0d       	add	r22, r0
 9a4:	21 1d       	adc	r18, r1
 9a6:	82 2f       	mov	r24, r18
 9a8:	76 2f       	mov	r23, r22
 9aa:	6a 2f       	mov	r22, r26
 9ac:	11 24       	eor	r1, r1
 9ae:	9f 57       	subi	r25, 0x7F	; 127
 9b0:	50 40       	sbci	r21, 0x00	; 0
 9b2:	9a f0       	brmi	.+38     	; 0x9da <__mulsf3_pse+0x88>
 9b4:	f1 f0       	breq	.+60     	; 0x9f2 <__mulsf3_pse+0xa0>
 9b6:	88 23       	and	r24, r24
 9b8:	4a f0       	brmi	.+18     	; 0x9cc <__mulsf3_pse+0x7a>
 9ba:	ee 0f       	add	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	bb 1f       	adc	r27, r27
 9c0:	66 1f       	adc	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	91 50       	subi	r25, 0x01	; 1
 9c8:	50 40       	sbci	r21, 0x00	; 0
 9ca:	a9 f7       	brne	.-22     	; 0x9b6 <__mulsf3_pse+0x64>
 9cc:	9e 3f       	cpi	r25, 0xFE	; 254
 9ce:	51 05       	cpc	r21, r1
 9d0:	80 f0       	brcs	.+32     	; 0x9f2 <__mulsf3_pse+0xa0>
 9d2:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 9d6:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_szero>
 9da:	5f 3f       	cpi	r21, 0xFF	; 255
 9dc:	e4 f3       	brlt	.-8      	; 0x9d6 <__mulsf3_pse+0x84>
 9de:	98 3e       	cpi	r25, 0xE8	; 232
 9e0:	d4 f3       	brlt	.-12     	; 0x9d6 <__mulsf3_pse+0x84>
 9e2:	86 95       	lsr	r24
 9e4:	77 95       	ror	r23
 9e6:	67 95       	ror	r22
 9e8:	b7 95       	ror	r27
 9ea:	f7 95       	ror	r31
 9ec:	e7 95       	ror	r30
 9ee:	9f 5f       	subi	r25, 0xFF	; 255
 9f0:	c1 f7       	brne	.-16     	; 0x9e2 <__mulsf3_pse+0x90>
 9f2:	fe 2b       	or	r31, r30
 9f4:	88 0f       	add	r24, r24
 9f6:	91 1d       	adc	r25, r1
 9f8:	96 95       	lsr	r25
 9fa:	87 95       	ror	r24
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <_exit>:
 a00:	f8 94       	cli

00000a02 <__stop_program>:
 a02:	ff cf       	rjmp	.-2      	; 0xa02 <__stop_program>
