
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c02  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a41  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f1f  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4d  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  000042a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ac  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000104d  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 30       	cpi	r26, 0x00	; 0
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  cc:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <set_direction_motor1>:
	PORTB &= ~(1 << EN_PIN);
	set_direction(1);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
  d4:	88 23       	and	r24, r24
  d6:	21 f0       	breq	.+8      	; 0xe0 <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <set_direction_motor2>:
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
	set_direction_motor2(1);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
  e8:	88 23       	and	r24, r24
  ea:	21 f0       	breq	.+8      	; 0xf4 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret

000000fc <main>:

#include "motion_control.h"


int main(void) {
	move_distance(10,104.72,1);
  fc:	01 e0       	ldi	r16, 0x01	; 1
  fe:	24 ea       	ldi	r18, 0xA4	; 164
 100:	30 e7       	ldi	r19, 0x70	; 112
 102:	41 ed       	ldi	r20, 0xD1	; 209
 104:	52 e4       	ldi	r21, 0x42	; 66
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	91 e4       	ldi	r25, 0x41	; 65
 10e:	0e 94 9d 00 	call	0x13a	; 0x13a <move_distance>
	turn_angle(M_PI / 2.0f, 104.72f, 1);  // 90°, trapezoid
 112:	24 ea       	ldi	r18, 0xA4	; 164
 114:	30 e7       	ldi	r19, 0x70	; 112
 116:	41 ed       	ldi	r20, 0xD1	; 209
 118:	52 e4       	ldi	r21, 0x42	; 66
 11a:	6b ed       	ldi	r22, 0xDB	; 219
 11c:	7f e0       	ldi	r23, 0x0F	; 15
 11e:	89 ec       	ldi	r24, 0xC9	; 201
 120:	9f e3       	ldi	r25, 0x3F	; 63
 122:	0e 94 0f 01 	call	0x21e	; 0x21e <turn_angle>
	drive_differential(0.5,0);
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	a9 01       	movw	r20, r18
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	9f e3       	ldi	r25, 0x3F	; 63
 134:	0e 94 a8 01 	call	0x350	; 0x350 <drive_differential>
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x3c>

0000013a <move_distance>:
#include <math.h>

#define WHEEL_RADIUS 0.03f
#define STEP_ANGLE   (2.0f * M_PI / STEPS_PER_REV)

void move_distance(float distance_m, float omega_target, uint8_t use_trapezoid) {
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	49 01       	movw	r8, r18
 14e:	5a 01       	movw	r10, r20
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	float rotations = distance_m / wheel_circ;
 150:	2b ef       	ldi	r18, 0xFB	; 251
 152:	34 e0       	ldi	r19, 0x04	; 4
 154:	41 e4       	ldi	r20, 0x41	; 65
 156:	5e e3       	ldi	r21, 0x3E	; 62
 158:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
	uint32_t total_steps = (uint32_t)(rotations * STEPS_PER_REV);
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	48 e4       	ldi	r20, 0x48	; 72
 162:	54 e4       	ldi	r21, 0x44	; 68
 164:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 168:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>

	uint16_t accel_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	uint32_t cruise_steps = (total_steps > 2 * accel_steps) ? (total_steps - 2 * accel_steps) : 0;
 16c:	65 36       	cpi	r22, 0x65	; 101
 16e:	71 05       	cpc	r23, r1
 170:	81 05       	cpc	r24, r1
 172:	91 05       	cpc	r25, r1
 174:	40 f0       	brcs	.+16     	; 0x186 <move_distance+0x4c>
 176:	6b 01       	movw	r12, r22
 178:	7c 01       	movw	r14, r24
 17a:	24 e6       	ldi	r18, 0x64	; 100
 17c:	c2 1a       	sub	r12, r18
 17e:	d1 08       	sbc	r13, r1
 180:	e1 08       	sbc	r14, r1
 182:	f1 08       	sbc	r15, r1
 184:	03 c0       	rjmp	.+6      	; 0x18c <move_distance+0x52>
 186:	c1 2c       	mov	r12, r1
 188:	d1 2c       	mov	r13, r1
 18a:	76 01       	movw	r14, r12

	// Ramp Up
	if (use_trapezoid) {
 18c:	00 23       	and	r16, r16
 18e:	29 f0       	breq	.+10     	; 0x19a <move_distance+0x60>
		ramp_up_trapezoid(omega_target);
 190:	c5 01       	movw	r24, r10
 192:	b4 01       	movw	r22, r8
 194:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ramp_up_trapezoid>
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <move_distance+0x68>
		} else {
		ramp_up_scurve(omega_target);
 19a:	c5 01       	movw	r24, r10
 19c:	b4 01       	movw	r22, r8
 19e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ramp_up_scurve>
	}

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
 1a2:	c5 01       	movw	r24, r10
 1a4:	b4 01       	movw	r22, r8
 1a6:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	ba 01       	movw	r22, r20
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <move_distance+0x9c>
		while (!(TIFR1 & (1 << OCF1A))) {}
 1ba:	b1 9b       	sbis	0x16, 1	; 22
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <move_distance+0x80>
		TIFR1 |= (1 << OCF1A);
 1be:	86 b3       	in	r24, 0x16	; 22
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	86 bb       	out	0x16, r24	; 22
		while (!(TIFR3 & (1 << OCF3A))) {}
 1c4:	c1 9b       	sbis	0x18, 1	; 24
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <move_distance+0x8a>
		TIFR3 |= (1 << OCF3A);
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	88 bb       	out	0x18, r24	; 24

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	6f 4f       	sbci	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	4c 15       	cp	r20, r12
 1d8:	5d 05       	cpc	r21, r13
 1da:	6e 05       	cpc	r22, r14
 1dc:	7f 05       	cpc	r23, r15
 1de:	68 f3       	brcs	.-38     	; 0x1ba <move_distance+0x80>
		while (!(TIFR3 & (1 << OCF3A))) {}
		TIFR3 |= (1 << OCF3A);
	}

	// Ramp Down
	if (use_trapezoid) {
 1e0:	00 23       	and	r16, r16
 1e2:	29 f0       	breq	.+10     	; 0x1ee <move_distance+0xb4>
		ramp_down_trapezoid(omega_target);
 1e4:	c5 01       	movw	r24, r10
 1e6:	b4 01       	movw	r22, r8
 1e8:	0e 94 15 03 	call	0x62a	; 0x62a <ramp_down_trapezoid>
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <move_distance+0xbc>
		} else {
		ramp_down_scurve(omega_target);
 1ee:	c5 01       	movw	r24, r10
 1f0:	b4 01       	movw	r22, r8
 1f2:	0e 94 94 02 	call	0x528	; 0x528 <ramp_down_scurve>
	}

	// Stop motors
	set_angular_velocity_motor1(0);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	cb 01       	movw	r24, r22
 1fc:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	cb 01       	movw	r24, r22
 206:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
}
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
 21c:	08 95       	ret

0000021e <turn_angle>:

#define WHEELBASE 0.12f  // distance between left and right wheels (in meters)

void turn_angle(float angle_rad, float omega_target, uint8_t use_trapezoid) {
 21e:	4f 92       	push	r4
 220:	5f 92       	push	r5
 222:	6f 92       	push	r6
 224:	7f 92       	push	r7
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	2b 01       	movw	r4, r22
 23a:	3c 01       	movw	r6, r24
 23c:	49 01       	movw	r8, r18
 23e:	5a 01       	movw	r10, r20
	float arc = (WHEELBASE / 2.0f) * fabsf(angle_rad);  // distance each wheel travels
 240:	9f 77       	andi	r25, 0x7F	; 127
 242:	2f e8       	ldi	r18, 0x8F	; 143
 244:	32 ec       	ldi	r19, 0xC2	; 194
 246:	45 e7       	ldi	r20, 0x75	; 117
 248:	5d e3       	ldi	r21, 0x3D	; 61
 24a:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	float rotations = arc / wheel_circ;
 24e:	2b ef       	ldi	r18, 0xFB	; 251
 250:	34 e0       	ldi	r19, 0x04	; 4
 252:	41 e4       	ldi	r20, 0x41	; 65
 254:	5e e3       	ldi	r21, 0x3E	; 62
 256:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
	uint32_t total_steps = (uint32_t)(rotations * STEPS_PER_REV);
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	48 e4       	ldi	r20, 0x48	; 72
 260:	54 e4       	ldi	r21, 0x44	; 68
 262:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 266:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>

	uint16_t accel_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	uint32_t cruise_steps = (total_steps > 2 * accel_steps) ? (total_steps - 2 * accel_steps) : 0;
 26a:	65 36       	cpi	r22, 0x65	; 101
 26c:	71 05       	cpc	r23, r1
 26e:	81 05       	cpc	r24, r1
 270:	91 05       	cpc	r25, r1
 272:	40 f0       	brcs	.+16     	; 0x284 <turn_angle+0x66>
 274:	6b 01       	movw	r12, r22
 276:	7c 01       	movw	r14, r24
 278:	24 e6       	ldi	r18, 0x64	; 100
 27a:	c2 1a       	sub	r12, r18
 27c:	d1 08       	sbc	r13, r1
 27e:	e1 08       	sbc	r14, r1
 280:	f1 08       	sbc	r15, r1
 282:	03 c0       	rjmp	.+6      	; 0x28a <turn_angle+0x6c>
 284:	c1 2c       	mov	r12, r1
 286:	d1 2c       	mov	r13, r1
 288:	76 01       	movw	r14, r12

	// Set directions: left forward, right reverse OR vice versa
	if (angle_rad > 0) {
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	a9 01       	movw	r20, r18
 290:	c3 01       	movw	r24, r6
 292:	b2 01       	movw	r22, r4
 294:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__gesf2>
 298:	18 16       	cp	r1, r24
 29a:	3c f4       	brge	.+14     	; 0x2aa <turn_angle+0x8c>
		set_direction_motor1(1);         // Left wheel forward
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_direction_motor1>
		set_direction_motor2(0);  // Right wheel backward
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 74 00 	call	0xe8	; 0xe8 <set_direction_motor2>
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <turn_angle+0x98>
		} else {
		set_direction_motor1(0);         // Left wheel backward
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_direction_motor1>
		set_direction_motor2(1);  // Right wheel forward
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 74 00 	call	0xe8	; 0xe8 <set_direction_motor2>
	}

	// Ramp Up
	if (use_trapezoid) {
 2b6:	00 23       	and	r16, r16
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <turn_angle+0xa6>
		ramp_up_trapezoid(omega_target);
 2ba:	c5 01       	movw	r24, r10
 2bc:	b4 01       	movw	r22, r8
 2be:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ramp_up_trapezoid>
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <turn_angle+0xae>
		} else {
		ramp_up_scurve(omega_target);
 2c4:	c5 01       	movw	r24, r10
 2c6:	b4 01       	movw	r22, r8
 2c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ramp_up_scurve>
	}

	// Cruise at target speed
	set_angular_velocity_motor1(omega_target);
 2cc:	c5 01       	movw	r24, r10
 2ce:	b4 01       	movw	r22, r8
 2d0:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 2d4:	c5 01       	movw	r24, r10
 2d6:	b4 01       	movw	r22, r8
 2d8:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>

	for (uint32_t i = 0; i < cruise_steps; i++) {
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	ba 01       	movw	r22, r20
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <turn_angle+0xe2>
		while (!(TIFR1 & (1 << OCF1A))) {}
 2e4:	b1 9b       	sbis	0x16, 1	; 22
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <turn_angle+0xc6>
		TIFR1 |= (1 << OCF1A);
 2e8:	86 b3       	in	r24, 0x16	; 22
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	86 bb       	out	0x16, r24	; 22
		while (!(TIFR3 & (1 << OCF3A))) {}
 2ee:	c1 9b       	sbis	0x18, 1	; 24
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <turn_angle+0xd0>
		TIFR3 |= (1 << OCF3A);
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	88 bb       	out	0x18, r24	; 24

	// Cruise at target speed
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);

	for (uint32_t i = 0; i < cruise_steps; i++) {
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	6f 4f       	sbci	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	4c 15       	cp	r20, r12
 302:	5d 05       	cpc	r21, r13
 304:	6e 05       	cpc	r22, r14
 306:	7f 05       	cpc	r23, r15
 308:	68 f3       	brcs	.-38     	; 0x2e4 <turn_angle+0xc6>
		while (!(TIFR3 & (1 << OCF3A))) {}
		TIFR3 |= (1 << OCF3A);
	}

	// Ramp Down
	if (use_trapezoid) {
 30a:	00 23       	and	r16, r16
 30c:	29 f0       	breq	.+10     	; 0x318 <turn_angle+0xfa>
		ramp_down_trapezoid(omega_target);
 30e:	c5 01       	movw	r24, r10
 310:	b4 01       	movw	r22, r8
 312:	0e 94 15 03 	call	0x62a	; 0x62a <ramp_down_trapezoid>
 316:	04 c0       	rjmp	.+8      	; 0x320 <turn_angle+0x102>
		} else {
		ramp_down_scurve(omega_target);
 318:	c5 01       	movw	r24, r10
 31a:	b4 01       	movw	r22, r8
 31c:	0e 94 94 02 	call	0x528	; 0x528 <ramp_down_scurve>
	}

	// Stop
	set_angular_velocity_motor1(0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	cb 01       	movw	r24, r22
 326:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	cb 01       	movw	r24, r22
 330:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
}
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	8f 90       	pop	r8
 346:	7f 90       	pop	r7
 348:	6f 90       	pop	r6
 34a:	5f 90       	pop	r5
 34c:	4f 90       	pop	r4
 34e:	08 95       	ret

00000350 <drive_differential>:

#define WHEEL_RADIUS 0.03f  // in meters
#define WHEELBASE    0.12f  // distance between wheels (meters)

void drive_differential(float vel, float omega) {
 350:	4f 92       	push	r4
 352:	5f 92       	push	r5
 354:	6f 92       	push	r6
 356:	7f 92       	push	r7
 358:	8f 92       	push	r8
 35a:	9f 92       	push	r9
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	2b 01       	movw	r4, r22
 36a:	3c 01       	movw	r6, r24
 36c:	ca 01       	movw	r24, r20
 36e:	b9 01       	movw	r22, r18
	float w_left  = (vel - (omega * WHEELBASE / 2.0f)) / WHEEL_RADIUS;
 370:	2f e8       	ldi	r18, 0x8F	; 143
 372:	32 ec       	ldi	r19, 0xC2	; 194
 374:	45 ef       	ldi	r20, 0xF5	; 245
 376:	5d e3       	ldi	r21, 0x3D	; 61
 378:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	5f e3       	ldi	r21, 0x3F	; 63
 384:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 388:	6b 01       	movw	r12, r22
 38a:	7c 01       	movw	r14, r24
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	c3 01       	movw	r24, r6
 392:	b2 01       	movw	r22, r4
 394:	0e 94 c8 03 	call	0x790	; 0x790 <__subsf3>
 398:	2f e8       	ldi	r18, 0x8F	; 143
 39a:	32 ec       	ldi	r19, 0xC2	; 194
 39c:	45 ef       	ldi	r20, 0xF5	; 245
 39e:	5c e3       	ldi	r21, 0x3C	; 60
 3a0:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
 3a4:	4b 01       	movw	r8, r22
 3a6:	5c 01       	movw	r10, r24
	float w_right = (vel + (omega * WHEELBASE / 2.0f)) / WHEEL_RADIUS;
 3a8:	a3 01       	movw	r20, r6
 3aa:	92 01       	movw	r18, r4
 3ac:	c7 01       	movw	r24, r14
 3ae:	b6 01       	movw	r22, r12
 3b0:	0e 94 c9 03 	call	0x792	; 0x792 <__addsf3>
 3b4:	2f e8       	ldi	r18, 0x8F	; 143
 3b6:	32 ec       	ldi	r19, 0xC2	; 194
 3b8:	45 ef       	ldi	r20, 0xF5	; 245
 3ba:	5c e3       	ldi	r21, 0x3C	; 60
 3bc:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
 3c0:	6b 01       	movw	r12, r22
 3c2:	7c 01       	movw	r14, r24

	if (w_left >= 0) set_direction_motor1(1); else set_direction_motor1(0);
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	c5 01       	movw	r24, r10
 3cc:	b4 01       	movw	r22, r8
 3ce:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__gesf2>
 3d2:	88 23       	and	r24, r24
 3d4:	24 f0       	brlt	.+8      	; 0x3de <drive_differential+0x8e>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_direction_motor1>
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <drive_differential+0x94>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_direction_motor1>
	if (w_right >= 0) set_direction_motor2(1); else set_direction_motor2(0);
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	a9 01       	movw	r20, r18
 3ea:	c7 01       	movw	r24, r14
 3ec:	b6 01       	movw	r22, r12
 3ee:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__gesf2>
 3f2:	88 23       	and	r24, r24
 3f4:	24 f0       	brlt	.+8      	; 0x3fe <drive_differential+0xae>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 74 00 	call	0xe8	; 0xe8 <set_direction_motor2>
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 74 00 	call	0xe8	; 0xe8 <set_direction_motor2>

	set_angular_velocity_motor1(fabsf(w_left));
 404:	c5 01       	movw	r24, r10
 406:	b4 01       	movw	r22, r8
 408:	9f 77       	andi	r25, 0x7F	; 127
 40a:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(fabsf(w_right));
 40e:	c7 01       	movw	r24, r14
 410:	b6 01       	movw	r22, r12
 412:	9f 77       	andi	r25, 0x7F	; 127
 414:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
}
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	df 90       	pop	r13
 41e:	cf 90       	pop	r12
 420:	bf 90       	pop	r11
 422:	af 90       	pop	r10
 424:	9f 90       	pop	r9
 426:	8f 90       	pop	r8
 428:	7f 90       	pop	r7
 42a:	6f 90       	pop	r6
 42c:	5f 90       	pop	r5
 42e:	4f 90       	pop	r4
 430:	08 95       	ret

00000432 <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 432:	8f 92       	push	r8
 434:	9f 92       	push	r9
 436:	af 92       	push	r10
 438:	bf 92       	push	r11
 43a:	cf 92       	push	r12
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	6b 01       	movw	r12, r22
 444:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e4       	ldi	r20, 0x40	; 64
 44c:	50 e4       	ldi	r21, 0x40	; 64
 44e:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	c7 01       	movw	r24, r14
 458:	b6 01       	movw	r22, r12
 45a:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 45e:	4b 01       	movw	r8, r22
 460:	5c 01       	movw	r10, r24
 462:	a7 01       	movw	r20, r14
 464:	96 01       	movw	r18, r12
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	0e 94 c9 03 	call	0x792	; 0x792 <__addsf3>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	c7 01       	movw	r24, r14
 474:	b6 01       	movw	r22, r12
 476:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	c7 01       	movw	r24, r14
 480:	b6 01       	movw	r22, r12
 482:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	c5 01       	movw	r24, r10
 48c:	b4 01       	movw	r22, r8
 48e:	0e 94 c8 03 	call	0x790	; 0x790 <__subsf3>
}
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	bf 90       	pop	r11
 49c:	af 90       	pop	r10
 49e:	9f 90       	pop	r9
 4a0:	8f 90       	pop	r8
 4a2:	08 95       	ret

000004a4 <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 4a4:	8f 92       	push	r8
 4a6:	9f 92       	push	r9
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	4b 01       	movw	r8, r22
 4ba:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 4bc:	c1 e0       	ldi	r28, 0x01	; 1
 4be:	d0 e0       	ldi	r29, 0x00	; 0
 4c0:	25 c0       	rjmp	.+74     	; 0x50c <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 4c2:	be 01       	movw	r22, r28
 4c4:	0d 2e       	mov	r0, r29
 4c6:	00 0c       	add	r0, r0
 4c8:	88 0b       	sbc	r24, r24
 4ca:	99 0b       	sbc	r25, r25
 4cc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	48 e4       	ldi	r20, 0x48	; 72
 4d6:	52 e4       	ldi	r21, 0x42	; 66
 4d8:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 4dc:	0e 94 19 02 	call	0x432	; 0x432 <s_curve_profile>
 4e0:	a5 01       	movw	r20, r10
 4e2:	94 01       	movw	r18, r8
 4e4:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 4e8:	6b 01       	movw	r12, r22
 4ea:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 4ec:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	80 e7       	ldi	r24, 0x70	; 112
 4fc:	92 e0       	ldi	r25, 0x02	; 2
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <ramp_up_scurve+0x5a>
 506:	00 c0       	rjmp	.+0      	; 0x508 <ramp_up_scurve+0x64>
 508:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 50a:	21 96       	adiw	r28, 0x01	; 1
 50c:	c3 33       	cpi	r28, 0x33	; 51
 50e:	d1 05       	cpc	r29, r1
 510:	c4 f2       	brlt	.-80     	; 0x4c2 <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	9f 90       	pop	r9
 524:	8f 90       	pop	r8
 526:	08 95       	ret

00000528 <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 528:	8f 92       	push	r8
 52a:	9f 92       	push	r9
 52c:	af 92       	push	r10
 52e:	bf 92       	push	r11
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 540:	c1 e3       	ldi	r28, 0x31	; 49
 542:	d0 e0       	ldi	r29, 0x00	; 0
 544:	25 c0       	rjmp	.+74     	; 0x590 <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 546:	be 01       	movw	r22, r28
 548:	0d 2e       	mov	r0, r29
 54a:	00 0c       	add	r0, r0
 54c:	88 0b       	sbc	r24, r24
 54e:	99 0b       	sbc	r25, r25
 550:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	48 e4       	ldi	r20, 0x48	; 72
 55a:	52 e4       	ldi	r21, 0x42	; 66
 55c:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 560:	0e 94 19 02 	call	0x432	; 0x432 <s_curve_profile>
 564:	a5 01       	movw	r20, r10
 566:	94 01       	movw	r18, r8
 568:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 56c:	6b 01       	movw	r12, r22
 56e:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 570:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	80 e7       	ldi	r24, 0x70	; 112
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <ramp_down_scurve+0x5a>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <ramp_down_scurve+0x64>
 58c:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 58e:	21 97       	sbiw	r28, 0x01	; 1
 590:	dd 23       	and	r29, r29
 592:	cc f6       	brge	.-78     	; 0x546 <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	bf 90       	pop	r11
 5a2:	af 90       	pop	r10
 5a4:	9f 90       	pop	r9
 5a6:	8f 90       	pop	r8
 5a8:	08 95       	ret

000005aa <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 5aa:	8f 92       	push	r8
 5ac:	9f 92       	push	r9
 5ae:	af 92       	push	r10
 5b0:	bf 92       	push	r11
 5b2:	cf 92       	push	r12
 5b4:	df 92       	push	r13
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	4b 01       	movw	r8, r22
 5c0:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 5c2:	c1 e0       	ldi	r28, 0x01	; 1
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
 5c6:	23 c0       	rjmp	.+70     	; 0x60e <ramp_up_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 5c8:	be 01       	movw	r22, r28
 5ca:	0d 2e       	mov	r0, r29
 5cc:	00 0c       	add	r0, r0
 5ce:	88 0b       	sbc	r24, r24
 5d0:	99 0b       	sbc	r25, r25
 5d2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 5d6:	a5 01       	movw	r20, r10
 5d8:	94 01       	movw	r18, r8
 5da:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	48 e4       	ldi	r20, 0x48	; 72
 5e4:	52 e4       	ldi	r21, 0x42	; 66
 5e6:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
 5ea:	6b 01       	movw	r12, r22
 5ec:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 5ee:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 5f2:	c7 01       	movw	r24, r14
 5f4:	b6 01       	movw	r22, r12
 5f6:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	80 e7       	ldi	r24, 0x70	; 112
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <ramp_up_trapezoid+0x56>
 608:	00 c0       	rjmp	.+0      	; 0x60a <ramp_up_trapezoid+0x60>
 60a:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 60c:	21 96       	adiw	r28, 0x01	; 1
 60e:	c3 33       	cpi	r28, 0x33	; 51
 610:	d1 05       	cpc	r29, r1
 612:	d4 f2       	brlt	.-76     	; 0x5c8 <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	df 90       	pop	r13
 61e:	cf 90       	pop	r12
 620:	bf 90       	pop	r11
 622:	af 90       	pop	r10
 624:	9f 90       	pop	r9
 626:	8f 90       	pop	r8
 628:	08 95       	ret

0000062a <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 62a:	8f 92       	push	r8
 62c:	9f 92       	push	r9
 62e:	af 92       	push	r10
 630:	bf 92       	push	r11
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	4b 01       	movw	r8, r22
 640:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 642:	c1 e3       	ldi	r28, 0x31	; 49
 644:	d0 e0       	ldi	r29, 0x00	; 0
 646:	23 c0       	rjmp	.+70     	; 0x68e <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 648:	be 01       	movw	r22, r28
 64a:	0d 2e       	mov	r0, r29
 64c:	00 0c       	add	r0, r0
 64e:	88 0b       	sbc	r24, r24
 650:	99 0b       	sbc	r25, r25
 652:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 656:	a5 01       	movw	r20, r10
 658:	94 01       	movw	r18, r8
 65a:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	48 e4       	ldi	r20, 0x48	; 72
 664:	52 e4       	ldi	r21, 0x42	; 66
 666:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
 66a:	6b 01       	movw	r12, r22
 66c:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 66e:	0e 94 ba 03 	call	0x774	; 0x774 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 672:	c7 01       	movw	r24, r14
 674:	b6 01       	movw	r22, r12
 676:	0e 94 c1 03 	call	0x782	; 0x782 <set_angular_velocity_motor2>
 67a:	2f ef       	ldi	r18, 0xFF	; 255
 67c:	80 e7       	ldi	r24, 0x70	; 112
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	21 50       	subi	r18, 0x01	; 1
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <ramp_down_trapezoid+0x56>
 688:	00 c0       	rjmp	.+0      	; 0x68a <ramp_down_trapezoid+0x60>
 68a:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 68c:	21 97       	sbiw	r28, 0x01	; 1
 68e:	dd 23       	and	r29, r29
 690:	dc f6       	brge	.-74     	; 0x648 <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	9f 90       	pop	r9
 6a4:	8f 90       	pop	r8
 6a6:	08 95       	ret

000006a8 <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 6a8:	2b ee       	ldi	r18, 0xEB	; 235
 6aa:	39 ec       	ldi	r19, 0xC9	; 201
 6ac:	48 e1       	ldi	r20, 0x18	; 24
 6ae:	51 e4       	ldi	r21, 0x41	; 65
 6b0:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
}
 6b4:	08 95       	ret

000006b6 <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 6b6:	cf 92       	push	r12
 6b8:	df 92       	push	r13
 6ba:	ef 92       	push	r14
 6bc:	ff 92       	push	r15
 6be:	6b 01       	movw	r12, r22
 6c0:	7c 01       	movw	r14, r24
	if (rpm <= 0) return 65535;
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	a9 01       	movw	r20, r18
 6c8:	0e 94 35 04 	call	0x86a	; 0x86a <__cmpsf2>
 6cc:	18 16       	cp	r1, r24
 6ce:	ac f5       	brge	.+106    	; 0x73a <rpm_to_ocr+0x84>
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	48 e4       	ldi	r20, 0x48	; 72
 6d6:	54 e4       	ldi	r21, 0x44	; 68
 6d8:	c7 01       	movw	r24, r14
 6da:	b6 01       	movw	r22, r12
 6dc:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	40 e7       	ldi	r20, 0x70	; 112
 6e6:	52 e4       	ldi	r21, 0x42	; 66
 6e8:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	51 e4       	ldi	r21, 0x41	; 65
 6f4:	0e 94 92 05 	call	0xb24	; 0xb24 <__mulsf3>
 6f8:	9b 01       	movw	r18, r22
 6fa:	ac 01       	movw	r20, r24
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	74 e2       	ldi	r23, 0x24	; 36
 700:	84 e7       	ldi	r24, 0x74	; 116
 702:	9b e4       	ldi	r25, 0x4B	; 75
 704:	0e 94 3a 04 	call	0x874	; 0x874 <__divsf3>
 708:	6b 01       	movw	r12, r22
 70a:	7c 01       	movw	r14, r24
	if (ocr > 65535) ocr = 65535;
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	3f ef       	ldi	r19, 0xFF	; 255
 710:	4f e7       	ldi	r20, 0x7F	; 127
 712:	57 e4       	ldi	r21, 0x47	; 71
 714:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__gesf2>
 718:	18 16       	cp	r1, r24
 71a:	4c f4       	brge	.+18     	; 0x72e <rpm_to_ocr+0x78>
 71c:	0f 2e       	mov	r0, r31
 71e:	c1 2c       	mov	r12, r1
 720:	dd 24       	eor	r13, r13
 722:	da 94       	dec	r13
 724:	ff e7       	ldi	r31, 0x7F	; 127
 726:	ef 2e       	mov	r14, r31
 728:	f7 e4       	ldi	r31, 0x47	; 71
 72a:	ff 2e       	mov	r15, r31
 72c:	f0 2d       	mov	r31, r0
	return (uint16_t)ocr;
 72e:	c7 01       	movw	r24, r14
 730:	b6 01       	movw	r22, r12
 732:	0e 94 ac 04 	call	0x958	; 0x958 <__fixunssfsi>
 736:	cb 01       	movw	r24, r22
 738:	02 c0       	rjmp	.+4      	; 0x73e <rpm_to_ocr+0x88>
float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) return 65535;
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	9f ef       	ldi	r25, 0xFF	; 255
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
	if (ocr > 65535) ocr = 65535;
	return (uint16_t)ocr;
}
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	df 90       	pop	r13
 744:	cf 90       	pop	r12
 746:	08 95       	ret

00000748 <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	TCCR1A = (1 << COM1A0);
 748:	20 e4       	ldi	r18, 0x40	; 64
 74a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11);
 74e:	2a e0       	ldi	r18, 0x0A	; 10
 750:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = ocr_value;
 754:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 758:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 75c:	08 95       	ret

0000075e <setup_timer3>:
}

void setup_timer3(uint16_t ocr_value) {
	TCCR3A = (1 << COM3A0);
 75e:	20 e4       	ldi	r18, 0x40	; 64
 760:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31);
 764:	2a e0       	ldi	r18, 0x0A	; 10
 766:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = ocr_value;
 76a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 76e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 772:	08 95       	ret

00000774 <set_angular_velocity_motor1>:
}

void set_angular_velocity_motor1(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 774:	0e 94 54 03 	call	0x6a8	; 0x6a8 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 778:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <rpm_to_ocr>
	setup_timer1(ocr);
 77c:	0e 94 a4 03 	call	0x748	; 0x748 <setup_timer1>
 780:	08 95       	ret

00000782 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 782:	0e 94 54 03 	call	0x6a8	; 0x6a8 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 786:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <rpm_to_ocr>
	setup_timer3(ocr);
 78a:	0e 94 af 03 	call	0x75e	; 0x75e <setup_timer3>
 78e:	08 95       	ret

00000790 <__subsf3>:
 790:	50 58       	subi	r21, 0x80	; 128

00000792 <__addsf3>:
 792:	bb 27       	eor	r27, r27
 794:	aa 27       	eor	r26, r26
 796:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__addsf3x>
 79a:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_round>
 79e:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscA>
 7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__addsf3+0x20>
 7a4:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscB>
 7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__addsf3+0x20>
 7aa:	39 f4       	brne	.+14     	; 0x7ba <__addsf3+0x28>
 7ac:	9f 3f       	cpi	r25, 0xFF	; 255
 7ae:	19 f4       	brne	.+6      	; 0x7b6 <__addsf3+0x24>
 7b0:	26 f4       	brtc	.+8      	; 0x7ba <__addsf3+0x28>
 7b2:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__fp_nan>
 7b6:	0e f4       	brtc	.+2      	; 0x7ba <__addsf3+0x28>
 7b8:	e0 95       	com	r30
 7ba:	e7 fb       	bst	r30, 7
 7bc:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_inf>

000007c0 <__addsf3x>:
 7c0:	e9 2f       	mov	r30, r25
 7c2:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_split3>
 7c6:	58 f3       	brcs	.-42     	; 0x79e <__addsf3+0xc>
 7c8:	ba 17       	cp	r27, r26
 7ca:	62 07       	cpc	r22, r18
 7cc:	73 07       	cpc	r23, r19
 7ce:	84 07       	cpc	r24, r20
 7d0:	95 07       	cpc	r25, r21
 7d2:	20 f0       	brcs	.+8      	; 0x7dc <__addsf3x+0x1c>
 7d4:	79 f4       	brne	.+30     	; 0x7f4 <__addsf3x+0x34>
 7d6:	a6 f5       	brtc	.+104    	; 0x840 <__addsf3x+0x80>
 7d8:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_zero>
 7dc:	0e f4       	brtc	.+2      	; 0x7e0 <__addsf3x+0x20>
 7de:	e0 95       	com	r30
 7e0:	0b 2e       	mov	r0, r27
 7e2:	ba 2f       	mov	r27, r26
 7e4:	a0 2d       	mov	r26, r0
 7e6:	0b 01       	movw	r0, r22
 7e8:	b9 01       	movw	r22, r18
 7ea:	90 01       	movw	r18, r0
 7ec:	0c 01       	movw	r0, r24
 7ee:	ca 01       	movw	r24, r20
 7f0:	a0 01       	movw	r20, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	ff 27       	eor	r31, r31
 7f6:	59 1b       	sub	r21, r25
 7f8:	99 f0       	breq	.+38     	; 0x820 <__addsf3x+0x60>
 7fa:	59 3f       	cpi	r21, 0xF9	; 249
 7fc:	50 f4       	brcc	.+20     	; 0x812 <__addsf3x+0x52>
 7fe:	50 3e       	cpi	r21, 0xE0	; 224
 800:	68 f1       	brcs	.+90     	; 0x85c <__addsf3x+0x9c>
 802:	1a 16       	cp	r1, r26
 804:	f0 40       	sbci	r31, 0x00	; 0
 806:	a2 2f       	mov	r26, r18
 808:	23 2f       	mov	r18, r19
 80a:	34 2f       	mov	r19, r20
 80c:	44 27       	eor	r20, r20
 80e:	58 5f       	subi	r21, 0xF8	; 248
 810:	f3 cf       	rjmp	.-26     	; 0x7f8 <__addsf3x+0x38>
 812:	46 95       	lsr	r20
 814:	37 95       	ror	r19
 816:	27 95       	ror	r18
 818:	a7 95       	ror	r26
 81a:	f0 40       	sbci	r31, 0x00	; 0
 81c:	53 95       	inc	r21
 81e:	c9 f7       	brne	.-14     	; 0x812 <__addsf3x+0x52>
 820:	7e f4       	brtc	.+30     	; 0x840 <__addsf3x+0x80>
 822:	1f 16       	cp	r1, r31
 824:	ba 0b       	sbc	r27, r26
 826:	62 0b       	sbc	r22, r18
 828:	73 0b       	sbc	r23, r19
 82a:	84 0b       	sbc	r24, r20
 82c:	ba f0       	brmi	.+46     	; 0x85c <__addsf3x+0x9c>
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	a1 f0       	breq	.+40     	; 0x85a <__addsf3x+0x9a>
 832:	ff 0f       	add	r31, r31
 834:	bb 1f       	adc	r27, r27
 836:	66 1f       	adc	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	c2 f7       	brpl	.-16     	; 0x82e <__addsf3x+0x6e>
 83e:	0e c0       	rjmp	.+28     	; 0x85c <__addsf3x+0x9c>
 840:	ba 0f       	add	r27, r26
 842:	62 1f       	adc	r22, r18
 844:	73 1f       	adc	r23, r19
 846:	84 1f       	adc	r24, r20
 848:	48 f4       	brcc	.+18     	; 0x85c <__addsf3x+0x9c>
 84a:	87 95       	ror	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b7 95       	ror	r27
 852:	f7 95       	ror	r31
 854:	9e 3f       	cpi	r25, 0xFE	; 254
 856:	08 f0       	brcs	.+2      	; 0x85a <__addsf3x+0x9a>
 858:	b0 cf       	rjmp	.-160    	; 0x7ba <__addsf3+0x28>
 85a:	93 95       	inc	r25
 85c:	88 0f       	add	r24, r24
 85e:	08 f0       	brcs	.+2      	; 0x862 <__addsf3x+0xa2>
 860:	99 27       	eor	r25, r25
 862:	ee 0f       	add	r30, r30
 864:	97 95       	ror	r25
 866:	87 95       	ror	r24
 868:	08 95       	ret

0000086a <__cmpsf2>:
 86a:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_cmp>
 86e:	08 f4       	brcc	.+2      	; 0x872 <__cmpsf2+0x8>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret

00000874 <__divsf3>:
 874:	0e 94 4e 04 	call	0x89c	; 0x89c <__divsf3x>
 878:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_round>
 87c:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscB>
 880:	58 f0       	brcs	.+22     	; 0x898 <__divsf3+0x24>
 882:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscA>
 886:	40 f0       	brcs	.+16     	; 0x898 <__divsf3+0x24>
 888:	29 f4       	brne	.+10     	; 0x894 <__divsf3+0x20>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	29 f0       	breq	.+10     	; 0x898 <__divsf3+0x24>
 88e:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_inf>
 892:	51 11       	cpse	r21, r1
 894:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_szero>
 898:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__fp_nan>

0000089c <__divsf3x>:
 89c:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_split3>
 8a0:	68 f3       	brcs	.-38     	; 0x87c <__divsf3+0x8>

000008a2 <__divsf3_pse>:
 8a2:	99 23       	and	r25, r25
 8a4:	b1 f3       	breq	.-20     	; 0x892 <__divsf3+0x1e>
 8a6:	55 23       	and	r21, r21
 8a8:	91 f3       	breq	.-28     	; 0x88e <__divsf3+0x1a>
 8aa:	95 1b       	sub	r25, r21
 8ac:	55 0b       	sbc	r21, r21
 8ae:	bb 27       	eor	r27, r27
 8b0:	aa 27       	eor	r26, r26
 8b2:	62 17       	cp	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	38 f0       	brcs	.+14     	; 0x8c8 <__divsf3_pse+0x26>
 8ba:	9f 5f       	subi	r25, 0xFF	; 255
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	22 0f       	add	r18, r18
 8c0:	33 1f       	adc	r19, r19
 8c2:	44 1f       	adc	r20, r20
 8c4:	aa 1f       	adc	r26, r26
 8c6:	a9 f3       	breq	.-22     	; 0x8b2 <__divsf3_pse+0x10>
 8c8:	35 d0       	rcall	.+106    	; 0x934 <__divsf3_pse+0x92>
 8ca:	0e 2e       	mov	r0, r30
 8cc:	3a f0       	brmi	.+14     	; 0x8dc <__divsf3_pse+0x3a>
 8ce:	e0 e8       	ldi	r30, 0x80	; 128
 8d0:	32 d0       	rcall	.+100    	; 0x936 <__divsf3_pse+0x94>
 8d2:	91 50       	subi	r25, 0x01	; 1
 8d4:	50 40       	sbci	r21, 0x00	; 0
 8d6:	e6 95       	lsr	r30
 8d8:	00 1c       	adc	r0, r0
 8da:	ca f7       	brpl	.-14     	; 0x8ce <__divsf3_pse+0x2c>
 8dc:	2b d0       	rcall	.+86     	; 0x934 <__divsf3_pse+0x92>
 8de:	fe 2f       	mov	r31, r30
 8e0:	29 d0       	rcall	.+82     	; 0x934 <__divsf3_pse+0x92>
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	bb 1f       	adc	r27, r27
 8ea:	26 17       	cp	r18, r22
 8ec:	37 07       	cpc	r19, r23
 8ee:	48 07       	cpc	r20, r24
 8f0:	ab 07       	cpc	r26, r27
 8f2:	b0 e8       	ldi	r27, 0x80	; 128
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__divsf3_pse+0x56>
 8f6:	bb 0b       	sbc	r27, r27
 8f8:	80 2d       	mov	r24, r0
 8fa:	bf 01       	movw	r22, r30
 8fc:	ff 27       	eor	r31, r31
 8fe:	93 58       	subi	r25, 0x83	; 131
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	3a f0       	brmi	.+14     	; 0x912 <__divsf3_pse+0x70>
 904:	9e 3f       	cpi	r25, 0xFE	; 254
 906:	51 05       	cpc	r21, r1
 908:	78 f0       	brcs	.+30     	; 0x928 <__divsf3_pse+0x86>
 90a:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_inf>
 90e:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_szero>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	e4 f3       	brlt	.-8      	; 0x90e <__divsf3_pse+0x6c>
 916:	98 3e       	cpi	r25, 0xE8	; 232
 918:	d4 f3       	brlt	.-12     	; 0x90e <__divsf3_pse+0x6c>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b7 95       	ror	r27
 922:	f7 95       	ror	r31
 924:	9f 5f       	subi	r25, 0xFF	; 255
 926:	c9 f7       	brne	.-14     	; 0x91a <__divsf3_pse+0x78>
 928:	88 0f       	add	r24, r24
 92a:	91 1d       	adc	r25, r1
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret
 934:	e1 e0       	ldi	r30, 0x01	; 1
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	bb 1f       	adc	r27, r27
 93e:	62 17       	cp	r22, r18
 940:	73 07       	cpc	r23, r19
 942:	84 07       	cpc	r24, r20
 944:	ba 07       	cpc	r27, r26
 946:	20 f0       	brcs	.+8      	; 0x950 <__divsf3_pse+0xae>
 948:	62 1b       	sub	r22, r18
 94a:	73 0b       	sbc	r23, r19
 94c:	84 0b       	sbc	r24, r20
 94e:	ba 0b       	sbc	r27, r26
 950:	ee 1f       	adc	r30, r30
 952:	88 f7       	brcc	.-30     	; 0x936 <__divsf3_pse+0x94>
 954:	e0 95       	com	r30
 956:	08 95       	ret

00000958 <__fixunssfsi>:
 958:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_splitA>
 95c:	88 f0       	brcs	.+34     	; 0x980 <__fixunssfsi+0x28>
 95e:	9f 57       	subi	r25, 0x7F	; 127
 960:	98 f0       	brcs	.+38     	; 0x988 <__fixunssfsi+0x30>
 962:	b9 2f       	mov	r27, r25
 964:	99 27       	eor	r25, r25
 966:	b7 51       	subi	r27, 0x17	; 23
 968:	b0 f0       	brcs	.+44     	; 0x996 <__fixunssfsi+0x3e>
 96a:	e1 f0       	breq	.+56     	; 0x9a4 <__fixunssfsi+0x4c>
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	1a f0       	brmi	.+6      	; 0x97c <__fixunssfsi+0x24>
 976:	ba 95       	dec	r27
 978:	c9 f7       	brne	.-14     	; 0x96c <__fixunssfsi+0x14>
 97a:	14 c0       	rjmp	.+40     	; 0x9a4 <__fixunssfsi+0x4c>
 97c:	b1 30       	cpi	r27, 0x01	; 1
 97e:	91 f0       	breq	.+36     	; 0x9a4 <__fixunssfsi+0x4c>
 980:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_zero>
 984:	b1 e0       	ldi	r27, 0x01	; 1
 986:	08 95       	ret
 988:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_zero>
 98c:	67 2f       	mov	r22, r23
 98e:	78 2f       	mov	r23, r24
 990:	88 27       	eor	r24, r24
 992:	b8 5f       	subi	r27, 0xF8	; 248
 994:	39 f0       	breq	.+14     	; 0x9a4 <__fixunssfsi+0x4c>
 996:	b9 3f       	cpi	r27, 0xF9	; 249
 998:	cc f3       	brlt	.-14     	; 0x98c <__fixunssfsi+0x34>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b3 95       	inc	r27
 9a2:	d9 f7       	brne	.-10     	; 0x99a <__fixunssfsi+0x42>
 9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__fixunssfsi+0x5c>
 9a6:	90 95       	com	r25
 9a8:	80 95       	com	r24
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	08 95       	ret

000009b6 <__floatunsisf>:
 9b6:	e8 94       	clt
 9b8:	09 c0       	rjmp	.+18     	; 0x9cc <__floatsisf+0x12>

000009ba <__floatsisf>:
 9ba:	97 fb       	bst	r25, 7
 9bc:	3e f4       	brtc	.+14     	; 0x9cc <__floatsisf+0x12>
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	99 23       	and	r25, r25
 9ce:	a9 f0       	breq	.+42     	; 0x9fa <__floatsisf+0x40>
 9d0:	f9 2f       	mov	r31, r25
 9d2:	96 e9       	ldi	r25, 0x96	; 150
 9d4:	bb 27       	eor	r27, r27
 9d6:	93 95       	inc	r25
 9d8:	f6 95       	lsr	r31
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f1 11       	cpse	r31, r1
 9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <__floatsisf+0x1c>
 9e6:	fa f4       	brpl	.+62     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 9e8:	bb 0f       	add	r27, r27
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <__floatsisf+0x36>
 9ec:	60 ff       	sbrs	r22, 0
 9ee:	1b c0       	rjmp	.+54     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 9f0:	6f 5f       	subi	r22, 0xFF	; 255
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	16 c0       	rjmp	.+44     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 9fa:	88 23       	and	r24, r24
 9fc:	11 f0       	breq	.+4      	; 0xa02 <__DATA_REGION_LENGTH__+0x2>
 9fe:	96 e9       	ldi	r25, 0x96	; 150
 a00:	11 c0       	rjmp	.+34     	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
 a02:	77 23       	and	r23, r23
 a04:	21 f0       	breq	.+8      	; 0xa0e <__DATA_REGION_LENGTH__+0xe>
 a06:	9e e8       	ldi	r25, 0x8E	; 142
 a08:	87 2f       	mov	r24, r23
 a0a:	76 2f       	mov	r23, r22
 a0c:	05 c0       	rjmp	.+10     	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
 a0e:	66 23       	and	r22, r22
 a10:	71 f0       	breq	.+28     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
 a12:	96 e8       	ldi	r25, 0x86	; 134
 a14:	86 2f       	mov	r24, r22
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	2a f0       	brmi	.+10     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a1c:	9a 95       	dec	r25
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	da f7       	brpl	.-10     	; 0xa1c <__DATA_REGION_LENGTH__+0x1c>
 a26:	88 0f       	add	r24, r24
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret

00000a30 <__fp_cmp>:
 a30:	99 0f       	add	r25, r25
 a32:	00 08       	sbc	r0, r0
 a34:	55 0f       	add	r21, r21
 a36:	aa 0b       	sbc	r26, r26
 a38:	e0 e8       	ldi	r30, 0x80	; 128
 a3a:	fe ef       	ldi	r31, 0xFE	; 254
 a3c:	16 16       	cp	r1, r22
 a3e:	17 06       	cpc	r1, r23
 a40:	e8 07       	cpc	r30, r24
 a42:	f9 07       	cpc	r31, r25
 a44:	c0 f0       	brcs	.+48     	; 0xa76 <__fp_cmp+0x46>
 a46:	12 16       	cp	r1, r18
 a48:	13 06       	cpc	r1, r19
 a4a:	e4 07       	cpc	r30, r20
 a4c:	f5 07       	cpc	r31, r21
 a4e:	98 f0       	brcs	.+38     	; 0xa76 <__fp_cmp+0x46>
 a50:	62 1b       	sub	r22, r18
 a52:	73 0b       	sbc	r23, r19
 a54:	84 0b       	sbc	r24, r20
 a56:	95 0b       	sbc	r25, r21
 a58:	39 f4       	brne	.+14     	; 0xa68 <__fp_cmp+0x38>
 a5a:	0a 26       	eor	r0, r26
 a5c:	61 f0       	breq	.+24     	; 0xa76 <__fp_cmp+0x46>
 a5e:	23 2b       	or	r18, r19
 a60:	24 2b       	or	r18, r20
 a62:	25 2b       	or	r18, r21
 a64:	21 f4       	brne	.+8      	; 0xa6e <__fp_cmp+0x3e>
 a66:	08 95       	ret
 a68:	0a 26       	eor	r0, r26
 a6a:	09 f4       	brne	.+2      	; 0xa6e <__fp_cmp+0x3e>
 a6c:	a1 40       	sbci	r26, 0x01	; 1
 a6e:	a6 95       	lsr	r26
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	81 1d       	adc	r24, r1
 a74:	81 1d       	adc	r24, r1
 a76:	08 95       	ret

00000a78 <__fp_inf>:
 a78:	97 f9       	bld	r25, 7
 a7a:	9f 67       	ori	r25, 0x7F	; 127
 a7c:	80 e8       	ldi	r24, 0x80	; 128
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	08 95       	ret

00000a84 <__fp_nan>:
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	80 ec       	ldi	r24, 0xC0	; 192
 a88:	08 95       	ret

00000a8a <__fp_pscA>:
 a8a:	00 24       	eor	r0, r0
 a8c:	0a 94       	dec	r0
 a8e:	16 16       	cp	r1, r22
 a90:	17 06       	cpc	r1, r23
 a92:	18 06       	cpc	r1, r24
 a94:	09 06       	cpc	r0, r25
 a96:	08 95       	ret

00000a98 <__fp_pscB>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	12 16       	cp	r1, r18
 a9e:	13 06       	cpc	r1, r19
 aa0:	14 06       	cpc	r1, r20
 aa2:	05 06       	cpc	r0, r21
 aa4:	08 95       	ret

00000aa6 <__fp_round>:
 aa6:	09 2e       	mov	r0, r25
 aa8:	03 94       	inc	r0
 aaa:	00 0c       	add	r0, r0
 aac:	11 f4       	brne	.+4      	; 0xab2 <__fp_round+0xc>
 aae:	88 23       	and	r24, r24
 ab0:	52 f0       	brmi	.+20     	; 0xac6 <__fp_round+0x20>
 ab2:	bb 0f       	add	r27, r27
 ab4:	40 f4       	brcc	.+16     	; 0xac6 <__fp_round+0x20>
 ab6:	bf 2b       	or	r27, r31
 ab8:	11 f4       	brne	.+4      	; 0xabe <__fp_round+0x18>
 aba:	60 ff       	sbrs	r22, 0
 abc:	04 c0       	rjmp	.+8      	; 0xac6 <__fp_round+0x20>
 abe:	6f 5f       	subi	r22, 0xFF	; 255
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__fp_split3>:
 ac8:	57 fd       	sbrc	r21, 7
 aca:	90 58       	subi	r25, 0x80	; 128
 acc:	44 0f       	add	r20, r20
 ace:	55 1f       	adc	r21, r21
 ad0:	59 f0       	breq	.+22     	; 0xae8 <__fp_splitA+0x10>
 ad2:	5f 3f       	cpi	r21, 0xFF	; 255
 ad4:	71 f0       	breq	.+28     	; 0xaf2 <__fp_splitA+0x1a>
 ad6:	47 95       	ror	r20

00000ad8 <__fp_splitA>:
 ad8:	88 0f       	add	r24, r24
 ada:	97 fb       	bst	r25, 7
 adc:	99 1f       	adc	r25, r25
 ade:	61 f0       	breq	.+24     	; 0xaf8 <__fp_splitA+0x20>
 ae0:	9f 3f       	cpi	r25, 0xFF	; 255
 ae2:	79 f0       	breq	.+30     	; 0xb02 <__stack+0x3>
 ae4:	87 95       	ror	r24
 ae6:	08 95       	ret
 ae8:	12 16       	cp	r1, r18
 aea:	13 06       	cpc	r1, r19
 aec:	14 06       	cpc	r1, r20
 aee:	55 1f       	adc	r21, r21
 af0:	f2 cf       	rjmp	.-28     	; 0xad6 <__fp_split3+0xe>
 af2:	46 95       	lsr	r20
 af4:	f1 df       	rcall	.-30     	; 0xad8 <__fp_splitA>
 af6:	08 c0       	rjmp	.+16     	; 0xb08 <__stack+0x9>
 af8:	16 16       	cp	r1, r22
 afa:	17 06       	cpc	r1, r23
 afc:	18 06       	cpc	r1, r24
 afe:	99 1f       	adc	r25, r25
 b00:	f1 cf       	rjmp	.-30     	; 0xae4 <__fp_splitA+0xc>
 b02:	86 95       	lsr	r24
 b04:	71 05       	cpc	r23, r1
 b06:	61 05       	cpc	r22, r1
 b08:	08 94       	sec
 b0a:	08 95       	ret

00000b0c <__fp_zero>:
 b0c:	e8 94       	clt

00000b0e <__fp_szero>:
 b0e:	bb 27       	eor	r27, r27
 b10:	66 27       	eor	r22, r22
 b12:	77 27       	eor	r23, r23
 b14:	cb 01       	movw	r24, r22
 b16:	97 f9       	bld	r25, 7
 b18:	08 95       	ret

00000b1a <__gesf2>:
 b1a:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_cmp>
 b1e:	08 f4       	brcc	.+2      	; 0xb22 <__gesf2+0x8>
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	08 95       	ret

00000b24 <__mulsf3>:
 b24:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsf3x>
 b28:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_round>
 b2c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscA>
 b30:	38 f0       	brcs	.+14     	; 0xb40 <__mulsf3+0x1c>
 b32:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscB>
 b36:	20 f0       	brcs	.+8      	; 0xb40 <__mulsf3+0x1c>
 b38:	95 23       	and	r25, r21
 b3a:	11 f0       	breq	.+4      	; 0xb40 <__mulsf3+0x1c>
 b3c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_inf>
 b40:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__fp_nan>
 b44:	11 24       	eor	r1, r1
 b46:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_szero>

00000b4a <__mulsf3x>:
 b4a:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_split3>
 b4e:	70 f3       	brcs	.-36     	; 0xb2c <__mulsf3+0x8>

00000b50 <__mulsf3_pse>:
 b50:	95 9f       	mul	r25, r21
 b52:	c1 f3       	breq	.-16     	; 0xb44 <__mulsf3+0x20>
 b54:	95 0f       	add	r25, r21
 b56:	50 e0       	ldi	r21, 0x00	; 0
 b58:	55 1f       	adc	r21, r21
 b5a:	62 9f       	mul	r22, r18
 b5c:	f0 01       	movw	r30, r0
 b5e:	72 9f       	mul	r23, r18
 b60:	bb 27       	eor	r27, r27
 b62:	f0 0d       	add	r31, r0
 b64:	b1 1d       	adc	r27, r1
 b66:	63 9f       	mul	r22, r19
 b68:	aa 27       	eor	r26, r26
 b6a:	f0 0d       	add	r31, r0
 b6c:	b1 1d       	adc	r27, r1
 b6e:	aa 1f       	adc	r26, r26
 b70:	64 9f       	mul	r22, r20
 b72:	66 27       	eor	r22, r22
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	66 1f       	adc	r22, r22
 b7a:	82 9f       	mul	r24, r18
 b7c:	22 27       	eor	r18, r18
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	62 1f       	adc	r22, r18
 b84:	73 9f       	mul	r23, r19
 b86:	b0 0d       	add	r27, r0
 b88:	a1 1d       	adc	r26, r1
 b8a:	62 1f       	adc	r22, r18
 b8c:	83 9f       	mul	r24, r19
 b8e:	a0 0d       	add	r26, r0
 b90:	61 1d       	adc	r22, r1
 b92:	22 1f       	adc	r18, r18
 b94:	74 9f       	mul	r23, r20
 b96:	33 27       	eor	r19, r19
 b98:	a0 0d       	add	r26, r0
 b9a:	61 1d       	adc	r22, r1
 b9c:	23 1f       	adc	r18, r19
 b9e:	84 9f       	mul	r24, r20
 ba0:	60 0d       	add	r22, r0
 ba2:	21 1d       	adc	r18, r1
 ba4:	82 2f       	mov	r24, r18
 ba6:	76 2f       	mov	r23, r22
 ba8:	6a 2f       	mov	r22, r26
 baa:	11 24       	eor	r1, r1
 bac:	9f 57       	subi	r25, 0x7F	; 127
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	9a f0       	brmi	.+38     	; 0xbd8 <__mulsf3_pse+0x88>
 bb2:	f1 f0       	breq	.+60     	; 0xbf0 <__mulsf3_pse+0xa0>
 bb4:	88 23       	and	r24, r24
 bb6:	4a f0       	brmi	.+18     	; 0xbca <__mulsf3_pse+0x7a>
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	bb 1f       	adc	r27, r27
 bbe:	66 1f       	adc	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	91 50       	subi	r25, 0x01	; 1
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	a9 f7       	brne	.-22     	; 0xbb4 <__mulsf3_pse+0x64>
 bca:	9e 3f       	cpi	r25, 0xFE	; 254
 bcc:	51 05       	cpc	r21, r1
 bce:	80 f0       	brcs	.+32     	; 0xbf0 <__mulsf3_pse+0xa0>
 bd0:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_inf>
 bd4:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_szero>
 bd8:	5f 3f       	cpi	r21, 0xFF	; 255
 bda:	e4 f3       	brlt	.-8      	; 0xbd4 <__mulsf3_pse+0x84>
 bdc:	98 3e       	cpi	r25, 0xE8	; 232
 bde:	d4 f3       	brlt	.-12     	; 0xbd4 <__mulsf3_pse+0x84>
 be0:	86 95       	lsr	r24
 be2:	77 95       	ror	r23
 be4:	67 95       	ror	r22
 be6:	b7 95       	ror	r27
 be8:	f7 95       	ror	r31
 bea:	e7 95       	ror	r30
 bec:	9f 5f       	subi	r25, 0xFF	; 255
 bee:	c1 f7       	brne	.-16     	; 0xbe0 <__mulsf3_pse+0x90>
 bf0:	fe 2b       	or	r31, r30
 bf2:	88 0f       	add	r24, r24
 bf4:	91 1d       	adc	r25, r1
 bf6:	96 95       	lsr	r25
 bf8:	87 95       	ror	r24
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <_exit>:
 bfe:	f8 94       	cli

00000c00 <__stop_program>:
 c00:	ff cf       	rjmp	.-2      	; 0xc00 <__stop_program>
