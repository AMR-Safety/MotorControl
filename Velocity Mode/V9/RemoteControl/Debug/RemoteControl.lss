
RemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000097a  00000a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800108  00800108  00000a16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a06  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00003686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128a  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007bc  00000000  00000000  000057fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df8  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002384  00000000  00000000  00006db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 32       	cpi	r26, 0x24	; 36
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  e2:	0c 94 bb 04 	jmp	0x976	; 0x976 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <setup_pins_motor1>:
#include "direction.h"



void setup_pins_motor1(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	80 67       	ori	r24, 0x70	; 112
  ee:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	08 95       	ret

000000f8 <set_direction_motor1>:
	//set_direction_motor1(0);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	85 b9       	out	0x05, r24	; 5
 10a:	08 95       	ret

0000010c <setup_pins_motor2>:
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
 112:	84 b1       	in	r24, 0x04	; 4
 114:	82 60       	ori	r24, 0x02	; 2
 116:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	8b b9       	out	0x0b, r24	; 11
 124:	08 95       	ret

00000126 <set_direction_motor2>:
	//set_direction_motor2(0);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
 126:	88 23       	and	r24, r24
 128:	21 f0       	breq	.+8      	; 0x132 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret

0000013a <main>:
#include "motion_control.h"
#include "arrow_parser.h"

int main(void) {
    // Initialize motor hardware
    setup_pins_motor1();
 13a:	0e 94 75 00 	call	0xea	; 0xea <setup_pins_motor1>
    setup_pins_motor2();
 13e:	0e 94 86 00 	call	0x10c	; 0x10c <setup_pins_motor2>
    
    // Set initial directions (both forward)
    set_direction_motor1(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 7c 00 	call	0xf8	; 0xf8 <set_direction_motor1>
    set_direction_motor2(0);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 93 00 	call	0x126	; 0x126 <set_direction_motor2>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x14>

00000150 <emergency_stop>:
		set_angular_velocity_motor2(0.0f);
	}
}

void emergency_stop(void) {
	current_motion_state = MOTION_STOPPED;
 150:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <current_motion_state>
	motion_timeout_counter = 0;
 154:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <motion_timeout_counter+0x1>
 158:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <motion_timeout_counter>
	
	// Immediate stop regardless of smooth acceleration setting
	target_speed_motor1 = 0.0f;
 15c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <target_speed_motor1>
 160:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <target_speed_motor1+0x1>
 164:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <target_speed_motor1+0x2>
 168:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <target_speed_motor1+0x3>
	target_speed_motor2 = 0.0f;
 16c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <target_speed_motor2>
 170:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <target_speed_motor2+0x1>
 174:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <target_speed_motor2+0x2>
 178:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <target_speed_motor2+0x3>
	actual_speed_motor1 = 0.0f;
 17c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <actual_speed_motor1>
 180:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <actual_speed_motor1+0x1>
 184:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <actual_speed_motor1+0x2>
 188:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <actual_speed_motor1+0x3>
	actual_speed_motor2 = 0.0f;
 18c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 190:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 194:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end+0x2>
 198:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x3>
	
	set_angular_velocity_motor1(0.0f);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	cb 01       	movw	r24, r22
 1a2:	0e 94 a3 02 	call	0x546	; 0x546 <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0.0f);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	cb 01       	movw	r24, r22
 1ac:	0e 94 b2 02 	call	0x564	; 0x564 <set_angular_velocity_motor2>
 1b0:	08 95       	ret

000001b2 <__vector_21>:
static float target_speed_motor2 = 0.0f;
static float actual_speed_motor1 = 0.0f;
static float actual_speed_motor2 = 0.0f;

// Timer interrupt for safety timeout (using Timer0 instead of Timer2)
ISR(TIMER0_COMPA_vect) {
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if (motion_timeout_enabled && current_motion_state != MOTION_STOPPED) {
 1e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motion_timeout_enabled>
 1e8:	88 23       	and	r24, r24
 1ea:	d1 f0       	breq	.+52     	; 0x220 <__vector_21+0x6e>
 1ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <current_motion_state>
 1f0:	88 23       	and	r24, r24
 1f2:	b1 f0       	breq	.+44     	; 0x220 <__vector_21+0x6e>
		motion_timeout_counter++;
 1f4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <motion_timeout_counter>
 1f8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <motion_timeout_counter+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <motion_timeout_counter+0x1>
 202:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <motion_timeout_counter>
		if (motion_timeout_counter >= motion_timeout_limit) {
 206:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <motion_timeout_counter>
 20a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <motion_timeout_counter+0x1>
 20e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <motion_timeout_limit>
 212:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <motion_timeout_limit+0x1>
 216:	28 17       	cp	r18, r24
 218:	39 07       	cpc	r19, r25
 21a:	10 f0       	brcs	.+4      	; 0x220 <__vector_21+0x6e>
			emergency_stop();
 21c:	0e 94 a8 00 	call	0x150	; 0x150 <emergency_stop>
		}
	}
	
	// Handle smooth acceleration if enabled
	if (smooth_accel_enabled) {
 220:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <smooth_accel_enabled>
 224:	88 23       	and	r24, r24
 226:	09 f4       	brne	.+2      	; 0x22a <__vector_21+0x78>
 228:	e6 c0       	rjmp	.+460    	; 0x3f6 <__vector_21+0x244>
		// Gradually adjust actual speeds toward target speeds
		if (actual_speed_motor1 < target_speed_motor1) {
 22a:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <actual_speed_motor1>
 22e:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <actual_speed_motor1+0x1>
 232:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <actual_speed_motor1+0x2>
 236:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <actual_speed_motor1+0x3>
 23a:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <target_speed_motor1>
 23e:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <target_speed_motor1+0x1>
 242:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <target_speed_motor1+0x2>
 246:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <target_speed_motor1+0x3>
 24a:	a7 01       	movw	r20, r14
 24c:	96 01       	movw	r18, r12
 24e:	c5 01       	movw	r24, r10
 250:	b4 01       	movw	r22, r8
 252:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 256:	88 23       	and	r24, r24
 258:	2c f5       	brge	.+74     	; 0x2a4 <__vector_21+0xf2>
			actual_speed_motor1 += acceleration_rate;
 25a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 262:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 266:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 26a:	c5 01       	movw	r24, r10
 26c:	b4 01       	movw	r22, r8
 26e:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <actual_speed_motor1>
 27a:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <actual_speed_motor1+0x1>
 27e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <actual_speed_motor1+0x2>
 282:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <actual_speed_motor1+0x3>
			if (actual_speed_motor1 > target_speed_motor1) {
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 28e:	88 23       	and	r24, r24
 290:	ac f5       	brge	.+106    	; 0x2fc <__vector_21+0x14a>
				actual_speed_motor1 = target_speed_motor1;
 292:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <actual_speed_motor1>
 296:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <actual_speed_motor1+0x1>
 29a:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <actual_speed_motor1+0x2>
 29e:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <actual_speed_motor1+0x3>
 2a2:	2c c0       	rjmp	.+88     	; 0x2fc <__vector_21+0x14a>
			}
			} else if (actual_speed_motor1 > target_speed_motor1) {
 2a4:	a7 01       	movw	r20, r14
 2a6:	96 01       	movw	r18, r12
 2a8:	c5 01       	movw	r24, r10
 2aa:	b4 01       	movw	r22, r8
 2ac:	0e 94 49 04 	call	0x892	; 0x892 <__gesf2>
 2b0:	18 16       	cp	r1, r24
 2b2:	24 f5       	brge	.+72     	; 0x2fc <__vector_21+0x14a>
			actual_speed_motor1 -= acceleration_rate;
 2b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2bc:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2c4:	c5 01       	movw	r24, r10
 2c6:	b4 01       	movw	r22, r8
 2c8:	0e 94 c1 02 	call	0x582	; 0x582 <__subsf3>
 2cc:	9b 01       	movw	r18, r22
 2ce:	ac 01       	movw	r20, r24
 2d0:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <actual_speed_motor1>
 2d4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <actual_speed_motor1+0x1>
 2d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <actual_speed_motor1+0x2>
 2dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <actual_speed_motor1+0x3>
			if (actual_speed_motor1 < target_speed_motor1) {
 2e0:	c7 01       	movw	r24, r14
 2e2:	b6 01       	movw	r22, r12
 2e4:	0e 94 49 04 	call	0x892	; 0x892 <__gesf2>
 2e8:	18 16       	cp	r1, r24
 2ea:	44 f4       	brge	.+16     	; 0x2fc <__vector_21+0x14a>
				actual_speed_motor1 = target_speed_motor1;
 2ec:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <actual_speed_motor1>
 2f0:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <actual_speed_motor1+0x1>
 2f4:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <actual_speed_motor1+0x2>
 2f8:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <actual_speed_motor1+0x3>
			}
		}
		
		if (actual_speed_motor2 < target_speed_motor2) {
 2fc:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <__data_end>
 300:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <__data_end+0x1>
 304:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <__data_end+0x2>
 308:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <__data_end+0x3>
 30c:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <target_speed_motor2>
 310:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <target_speed_motor2+0x1>
 314:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <target_speed_motor2+0x2>
 318:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <target_speed_motor2+0x3>
 31c:	a7 01       	movw	r20, r14
 31e:	96 01       	movw	r18, r12
 320:	c5 01       	movw	r24, r10
 322:	b4 01       	movw	r22, r8
 324:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 328:	88 23       	and	r24, r24
 32a:	2c f5       	brge	.+74     	; 0x376 <__vector_21+0x1c4>
			actual_speed_motor2 += acceleration_rate;
 32c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 330:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 334:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 338:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 33c:	c5 01       	movw	r24, r10
 33e:	b4 01       	movw	r22, r8
 340:	0e 94 c2 02 	call	0x584	; 0x584 <__addsf3>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
 34c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
 350:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
 354:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x3>
			if (actual_speed_motor2 > target_speed_motor2) {
 358:	c7 01       	movw	r24, r14
 35a:	b6 01       	movw	r22, r12
 35c:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 360:	88 23       	and	r24, r24
 362:	ac f5       	brge	.+106    	; 0x3ce <__vector_21+0x21c>
				actual_speed_motor2 = target_speed_motor2;
 364:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <__data_end>
 368:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <__data_end+0x1>
 36c:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <__data_end+0x2>
 370:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <__data_end+0x3>
 374:	2c c0       	rjmp	.+88     	; 0x3ce <__vector_21+0x21c>
			}
			} else if (actual_speed_motor2 > target_speed_motor2) {
 376:	a7 01       	movw	r20, r14
 378:	96 01       	movw	r18, r12
 37a:	c5 01       	movw	r24, r10
 37c:	b4 01       	movw	r22, r8
 37e:	0e 94 49 04 	call	0x892	; 0x892 <__gesf2>
 382:	18 16       	cp	r1, r24
 384:	24 f5       	brge	.+72     	; 0x3ce <__vector_21+0x21c>
			actual_speed_motor2 -= acceleration_rate;
 386:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 38a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 392:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 396:	c5 01       	movw	r24, r10
 398:	b4 01       	movw	r22, r8
 39a:	0e 94 c1 02 	call	0x582	; 0x582 <__subsf3>
 39e:	9b 01       	movw	r18, r22
 3a0:	ac 01       	movw	r20, r24
 3a2:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
 3a6:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
 3aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
 3ae:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x3>
			if (actual_speed_motor2 < target_speed_motor2) {
 3b2:	c7 01       	movw	r24, r14
 3b4:	b6 01       	movw	r22, r12
 3b6:	0e 94 49 04 	call	0x892	; 0x892 <__gesf2>
 3ba:	18 16       	cp	r1, r24
 3bc:	44 f4       	brge	.+16     	; 0x3ce <__vector_21+0x21c>
				actual_speed_motor2 = target_speed_motor2;
 3be:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <__data_end>
 3c2:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <__data_end+0x1>
 3c6:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <__data_end+0x2>
 3ca:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <__data_end+0x3>
			}
		}
		
		// Apply the gradually changing speeds
		set_angular_velocity_motor1(actual_speed_motor1);
 3ce:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <actual_speed_motor1>
 3d2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <actual_speed_motor1+0x1>
 3d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <actual_speed_motor1+0x2>
 3da:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <actual_speed_motor1+0x3>
 3de:	0e 94 a3 02 	call	0x546	; 0x546 <set_angular_velocity_motor1>
		set_angular_velocity_motor2(actual_speed_motor2);
 3e2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 3e6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__data_end+0x1>
 3ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
 3ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x3>
 3f2:	0e 94 b2 02 	call	0x564	; 0x564 <set_angular_velocity_motor2>
	}
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 428:	2b ee       	ldi	r18, 0xEB	; 235
 42a:	39 ec       	ldi	r19, 0xC9	; 201
 42c:	48 e1       	ldi	r20, 0x18	; 24
 42e:	51 e4       	ldi	r21, 0x41	; 65
 430:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
}
 434:	08 95       	ret

00000436 <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	6b 01       	movw	r12, r22
 440:	7c 01       	movw	r14, r24
	if (rpm <= 0) {
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	a9 01       	movw	r20, r18
 448:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 44c:	18 16       	cp	r1, r24
 44e:	0c f0       	brlt	.+2      	; 0x452 <rpm_to_ocr+0x1c>
 450:	40 c0       	rjmp	.+128    	; 0x4d2 <rpm_to_ocr+0x9c>
		return 0;  // Return 0 to indicate motor should be stopped
	}
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	48 e4       	ldi	r20, 0x48	; 72
 458:	54 e4       	ldi	r21, 0x44	; 68
 45a:	c7 01       	movw	r24, r14
 45c:	b6 01       	movw	r22, r12
 45e:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e7       	ldi	r20, 0x70	; 112
 468:	52 e4       	ldi	r21, 0x42	; 66
 46a:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 46e:	6b 01       	movw	r12, r22
 470:	7c 01       	movw	r14, r24
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	a9 01       	movw	r20, r18
 478:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
 47c:	18 16       	cp	r1, r24
 47e:	64 f5       	brge	.+88     	; 0x4d8 <rpm_to_ocr+0xa2>
		return 0;
	}
	
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	51 e4       	ldi	r21, 0x41	; 65
 488:	c7 01       	movw	r24, r14
 48a:	b6 01       	movw	r22, r12
 48c:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	74 e2       	ldi	r23, 0x24	; 36
 498:	84 e7       	ldi	r24, 0x74	; 116
 49a:	9b e4       	ldi	r25, 0x4B	; 75
 49c:	0e 94 33 03 	call	0x666	; 0x666 <__divsf3>
 4a0:	6b 01       	movw	r12, r22
 4a2:	7c 01       	movw	r14, r24
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	3f ef       	ldi	r19, 0xFF	; 255
 4a8:	4f e7       	ldi	r20, 0x7F	; 127
 4aa:	57 e4       	ldi	r21, 0x47	; 71
 4ac:	0e 94 49 04 	call	0x892	; 0x892 <__gesf2>
 4b0:	18 16       	cp	r1, r24
 4b2:	4c f4       	brge	.+18     	; 0x4c6 <rpm_to_ocr+0x90>
 4b4:	0f 2e       	mov	r0, r31
 4b6:	c1 2c       	mov	r12, r1
 4b8:	dd 24       	eor	r13, r13
 4ba:	da 94       	dec	r13
 4bc:	ff e7       	ldi	r31, 0x7F	; 127
 4be:	ef 2e       	mov	r14, r31
 4c0:	f7 e4       	ldi	r31, 0x47	; 71
 4c2:	ff 2e       	mov	r15, r31
 4c4:	f0 2d       	mov	r31, r0
	
	return (uint16_t)ocr;
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 a5 03 	call	0x74a	; 0x74a <__fixunssfsi>
 4ce:	cb 01       	movw	r24, r22
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <rpm_to_ocr+0xa6>
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) {
		return 0;  // Return 0 to indicate motor should be stopped
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <rpm_to_ocr+0xa6>
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
		return 0;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
	
	return (uint16_t)ocr;
}
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	08 95       	ret

000004e6 <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	if (ocr_value == 0) {
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	59 f4       	brne	.+22     	; 0x500 <setup_timer1+0x1a>
		// Stop the motor by disabling output compare
		TCCR1A &= ~(1 << COM1A0);
 4ea:	e0 e8       	ldi	r30, 0x80	; 128
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	8f 7b       	andi	r24, 0xBF	; 191
 4f2:	80 83       	st	Z, r24
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Stop timer
 4f4:	e1 e8       	ldi	r30, 0x81	; 129
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	88 7f       	andi	r24, 0xF8	; 248
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR1A = (1 << COM1A0);  // Toggle OC1A on compare match
 500:	20 e4       	ldi	r18, 0x40	; 64
 502:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << WGM12) | (1 << CS11);  // CTC mode, prescaler 8
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		OCR1A = ocr_value;
 50c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 510:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 514:	08 95       	ret

00000516 <setup_timer3>:
	}
}

void setup_timer3(uint16_t ocr_value) {
	if (ocr_value == 0) {
 516:	00 97       	sbiw	r24, 0x00	; 0
 518:	59 f4       	brne	.+22     	; 0x530 <setup_timer3+0x1a>
		// Stop the motor by disabling output compare
		TCCR3A &= ~(1 << COM3A0);
 51a:	e0 e9       	ldi	r30, 0x90	; 144
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	8f 7b       	andi	r24, 0xBF	; 191
 522:	80 83       	st	Z, r24
		TCCR3B &= ~((1 << CS32) | (1 << CS31) | (1 << CS30)); // Stop timer
 524:	e1 e9       	ldi	r30, 0x91	; 145
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	88 7f       	andi	r24, 0xF8	; 248
 52c:	80 83       	st	Z, r24
 52e:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR3A = (1 << COM3A0);  // Toggle OC3A on compare match
 530:	20 e4       	ldi	r18, 0x40	; 64
 532:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
		TCCR3B = (1 << WGM32) | (1 << CS31);  // CTC mode, prescaler 8
 536:	2a e0       	ldi	r18, 0x0A	; 10
 538:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
		OCR3A = ocr_value;
 53c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 540:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 544:	08 95       	ret

00000546 <set_angular_velocity_motor1>:
	}
}

void set_angular_velocity_motor1(float omega) {
	target_velocity_motor1 = omega;  // Store target velocity
 546:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <target_velocity_motor1>
 54a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <target_velocity_motor1+0x1>
 54e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <target_velocity_motor1+0x2>
 552:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <target_velocity_motor1+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 556:	0e 94 14 02 	call	0x428	; 0x428 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 55a:	0e 94 1b 02 	call	0x436	; 0x436 <rpm_to_ocr>
	setup_timer1(ocr);
 55e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <setup_timer1>
 562:	08 95       	ret

00000564 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	target_velocity_motor2 = omega;  // Store target velocity
 564:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <target_velocity_motor2>
 568:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <target_velocity_motor2+0x1>
 56c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <target_velocity_motor2+0x2>
 570:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <target_velocity_motor2+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 574:	0e 94 14 02 	call	0x428	; 0x428 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 578:	0e 94 1b 02 	call	0x436	; 0x436 <rpm_to_ocr>
	setup_timer3(ocr);
 57c:	0e 94 8b 02 	call	0x516	; 0x516 <setup_timer3>
 580:	08 95       	ret

00000582 <__subsf3>:
 582:	50 58       	subi	r21, 0x80	; 128

00000584 <__addsf3>:
 584:	bb 27       	eor	r27, r27
 586:	aa 27       	eor	r26, r26
 588:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__addsf3x>
 58c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_round>
 590:	0e 94 01 04 	call	0x802	; 0x802 <__fp_pscA>
 594:	38 f0       	brcs	.+14     	; 0x5a4 <__addsf3+0x20>
 596:	0e 94 08 04 	call	0x810	; 0x810 <__fp_pscB>
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3+0x20>
 59c:	39 f4       	brne	.+14     	; 0x5ac <__addsf3+0x28>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	19 f4       	brne	.+6      	; 0x5a8 <__addsf3+0x24>
 5a2:	26 f4       	brtc	.+8      	; 0x5ac <__addsf3+0x28>
 5a4:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__fp_nan>
 5a8:	0e f4       	brtc	.+2      	; 0x5ac <__addsf3+0x28>
 5aa:	e0 95       	com	r30
 5ac:	e7 fb       	bst	r30, 7
 5ae:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_inf>

000005b2 <__addsf3x>:
 5b2:	e9 2f       	mov	r30, r25
 5b4:	0e 94 20 04 	call	0x840	; 0x840 <__fp_split3>
 5b8:	58 f3       	brcs	.-42     	; 0x590 <__addsf3+0xc>
 5ba:	ba 17       	cp	r27, r26
 5bc:	62 07       	cpc	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	95 07       	cpc	r25, r21
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__addsf3x+0x1c>
 5c6:	79 f4       	brne	.+30     	; 0x5e6 <__addsf3x+0x34>
 5c8:	a6 f5       	brtc	.+104    	; 0x632 <__addsf3x+0x80>
 5ca:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_zero>
 5ce:	0e f4       	brtc	.+2      	; 0x5d2 <__addsf3x+0x20>
 5d0:	e0 95       	com	r30
 5d2:	0b 2e       	mov	r0, r27
 5d4:	ba 2f       	mov	r27, r26
 5d6:	a0 2d       	mov	r26, r0
 5d8:	0b 01       	movw	r0, r22
 5da:	b9 01       	movw	r22, r18
 5dc:	90 01       	movw	r18, r0
 5de:	0c 01       	movw	r0, r24
 5e0:	ca 01       	movw	r24, r20
 5e2:	a0 01       	movw	r20, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	ff 27       	eor	r31, r31
 5e8:	59 1b       	sub	r21, r25
 5ea:	99 f0       	breq	.+38     	; 0x612 <__addsf3x+0x60>
 5ec:	59 3f       	cpi	r21, 0xF9	; 249
 5ee:	50 f4       	brcc	.+20     	; 0x604 <__addsf3x+0x52>
 5f0:	50 3e       	cpi	r21, 0xE0	; 224
 5f2:	68 f1       	brcs	.+90     	; 0x64e <__addsf3x+0x9c>
 5f4:	1a 16       	cp	r1, r26
 5f6:	f0 40       	sbci	r31, 0x00	; 0
 5f8:	a2 2f       	mov	r26, r18
 5fa:	23 2f       	mov	r18, r19
 5fc:	34 2f       	mov	r19, r20
 5fe:	44 27       	eor	r20, r20
 600:	58 5f       	subi	r21, 0xF8	; 248
 602:	f3 cf       	rjmp	.-26     	; 0x5ea <__addsf3x+0x38>
 604:	46 95       	lsr	r20
 606:	37 95       	ror	r19
 608:	27 95       	ror	r18
 60a:	a7 95       	ror	r26
 60c:	f0 40       	sbci	r31, 0x00	; 0
 60e:	53 95       	inc	r21
 610:	c9 f7       	brne	.-14     	; 0x604 <__addsf3x+0x52>
 612:	7e f4       	brtc	.+30     	; 0x632 <__addsf3x+0x80>
 614:	1f 16       	cp	r1, r31
 616:	ba 0b       	sbc	r27, r26
 618:	62 0b       	sbc	r22, r18
 61a:	73 0b       	sbc	r23, r19
 61c:	84 0b       	sbc	r24, r20
 61e:	ba f0       	brmi	.+46     	; 0x64e <__addsf3x+0x9c>
 620:	91 50       	subi	r25, 0x01	; 1
 622:	a1 f0       	breq	.+40     	; 0x64c <__addsf3x+0x9a>
 624:	ff 0f       	add	r31, r31
 626:	bb 1f       	adc	r27, r27
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	c2 f7       	brpl	.-16     	; 0x620 <__addsf3x+0x6e>
 630:	0e c0       	rjmp	.+28     	; 0x64e <__addsf3x+0x9c>
 632:	ba 0f       	add	r27, r26
 634:	62 1f       	adc	r22, r18
 636:	73 1f       	adc	r23, r19
 638:	84 1f       	adc	r24, r20
 63a:	48 f4       	brcc	.+18     	; 0x64e <__addsf3x+0x9c>
 63c:	87 95       	ror	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b7 95       	ror	r27
 644:	f7 95       	ror	r31
 646:	9e 3f       	cpi	r25, 0xFE	; 254
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x9a>
 64a:	b0 cf       	rjmp	.-160    	; 0x5ac <__addsf3+0x28>
 64c:	93 95       	inc	r25
 64e:	88 0f       	add	r24, r24
 650:	08 f0       	brcs	.+2      	; 0x654 <__addsf3x+0xa2>
 652:	99 27       	eor	r25, r25
 654:	ee 0f       	add	r30, r30
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	08 95       	ret

0000065c <__cmpsf2>:
 65c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_cmp>
 660:	08 f4       	brcc	.+2      	; 0x664 <__cmpsf2+0x8>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret

00000666 <__divsf3>:
 666:	0e 94 47 03 	call	0x68e	; 0x68e <__divsf3x>
 66a:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_round>
 66e:	0e 94 08 04 	call	0x810	; 0x810 <__fp_pscB>
 672:	58 f0       	brcs	.+22     	; 0x68a <__divsf3+0x24>
 674:	0e 94 01 04 	call	0x802	; 0x802 <__fp_pscA>
 678:	40 f0       	brcs	.+16     	; 0x68a <__divsf3+0x24>
 67a:	29 f4       	brne	.+10     	; 0x686 <__divsf3+0x20>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	29 f0       	breq	.+10     	; 0x68a <__divsf3+0x24>
 680:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_inf>
 684:	51 11       	cpse	r21, r1
 686:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_szero>
 68a:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__fp_nan>

0000068e <__divsf3x>:
 68e:	0e 94 20 04 	call	0x840	; 0x840 <__fp_split3>
 692:	68 f3       	brcs	.-38     	; 0x66e <__divsf3+0x8>

00000694 <__divsf3_pse>:
 694:	99 23       	and	r25, r25
 696:	b1 f3       	breq	.-20     	; 0x684 <__divsf3+0x1e>
 698:	55 23       	and	r21, r21
 69a:	91 f3       	breq	.-28     	; 0x680 <__divsf3+0x1a>
 69c:	95 1b       	sub	r25, r21
 69e:	55 0b       	sbc	r21, r21
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	62 17       	cp	r22, r18
 6a6:	73 07       	cpc	r23, r19
 6a8:	84 07       	cpc	r24, r20
 6aa:	38 f0       	brcs	.+14     	; 0x6ba <__divsf3_pse+0x26>
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	5f 4f       	sbci	r21, 0xFF	; 255
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	44 1f       	adc	r20, r20
 6b6:	aa 1f       	adc	r26, r26
 6b8:	a9 f3       	breq	.-22     	; 0x6a4 <__divsf3_pse+0x10>
 6ba:	35 d0       	rcall	.+106    	; 0x726 <__divsf3_pse+0x92>
 6bc:	0e 2e       	mov	r0, r30
 6be:	3a f0       	brmi	.+14     	; 0x6ce <__divsf3_pse+0x3a>
 6c0:	e0 e8       	ldi	r30, 0x80	; 128
 6c2:	32 d0       	rcall	.+100    	; 0x728 <__divsf3_pse+0x94>
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	e6 95       	lsr	r30
 6ca:	00 1c       	adc	r0, r0
 6cc:	ca f7       	brpl	.-14     	; 0x6c0 <__divsf3_pse+0x2c>
 6ce:	2b d0       	rcall	.+86     	; 0x726 <__divsf3_pse+0x92>
 6d0:	fe 2f       	mov	r31, r30
 6d2:	29 d0       	rcall	.+82     	; 0x726 <__divsf3_pse+0x92>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	26 17       	cp	r18, r22
 6de:	37 07       	cpc	r19, r23
 6e0:	48 07       	cpc	r20, r24
 6e2:	ab 07       	cpc	r26, r27
 6e4:	b0 e8       	ldi	r27, 0x80	; 128
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__divsf3_pse+0x56>
 6e8:	bb 0b       	sbc	r27, r27
 6ea:	80 2d       	mov	r24, r0
 6ec:	bf 01       	movw	r22, r30
 6ee:	ff 27       	eor	r31, r31
 6f0:	93 58       	subi	r25, 0x83	; 131
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	3a f0       	brmi	.+14     	; 0x704 <__divsf3_pse+0x70>
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	51 05       	cpc	r21, r1
 6fa:	78 f0       	brcs	.+30     	; 0x71a <__divsf3_pse+0x86>
 6fc:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_inf>
 700:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	e4 f3       	brlt	.-8      	; 0x700 <__divsf3_pse+0x6c>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	d4 f3       	brlt	.-12     	; 0x700 <__divsf3_pse+0x6c>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c9 f7       	brne	.-14     	; 0x70c <__divsf3_pse+0x78>
 71a:	88 0f       	add	r24, r24
 71c:	91 1d       	adc	r25, r1
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	62 17       	cp	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	ba 07       	cpc	r27, r26
 738:	20 f0       	brcs	.+8      	; 0x742 <__divsf3_pse+0xae>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	ba 0b       	sbc	r27, r26
 742:	ee 1f       	adc	r30, r30
 744:	88 f7       	brcc	.-30     	; 0x728 <__divsf3_pse+0x94>
 746:	e0 95       	com	r30
 748:	08 95       	ret

0000074a <__fixunssfsi>:
 74a:	0e 94 28 04 	call	0x850	; 0x850 <__fp_splitA>
 74e:	88 f0       	brcs	.+34     	; 0x772 <__fixunssfsi+0x28>
 750:	9f 57       	subi	r25, 0x7F	; 127
 752:	98 f0       	brcs	.+38     	; 0x77a <__fixunssfsi+0x30>
 754:	b9 2f       	mov	r27, r25
 756:	99 27       	eor	r25, r25
 758:	b7 51       	subi	r27, 0x17	; 23
 75a:	b0 f0       	brcs	.+44     	; 0x788 <__fixunssfsi+0x3e>
 75c:	e1 f0       	breq	.+56     	; 0x796 <__fixunssfsi+0x4c>
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	1a f0       	brmi	.+6      	; 0x76e <__fixunssfsi+0x24>
 768:	ba 95       	dec	r27
 76a:	c9 f7       	brne	.-14     	; 0x75e <__fixunssfsi+0x14>
 76c:	14 c0       	rjmp	.+40     	; 0x796 <__fixunssfsi+0x4c>
 76e:	b1 30       	cpi	r27, 0x01	; 1
 770:	91 f0       	breq	.+36     	; 0x796 <__fixunssfsi+0x4c>
 772:	0e 94 42 04 	call	0x884	; 0x884 <__fp_zero>
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	08 95       	ret
 77a:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_zero>
 77e:	67 2f       	mov	r22, r23
 780:	78 2f       	mov	r23, r24
 782:	88 27       	eor	r24, r24
 784:	b8 5f       	subi	r27, 0xF8	; 248
 786:	39 f0       	breq	.+14     	; 0x796 <__fixunssfsi+0x4c>
 788:	b9 3f       	cpi	r27, 0xF9	; 249
 78a:	cc f3       	brlt	.-14     	; 0x77e <__fixunssfsi+0x34>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b3 95       	inc	r27
 794:	d9 f7       	brne	.-10     	; 0x78c <__fixunssfsi+0x42>
 796:	3e f4       	brtc	.+14     	; 0x7a6 <__fixunssfsi+0x5c>
 798:	90 95       	com	r25
 79a:	80 95       	com	r24
 79c:	70 95       	com	r23
 79e:	61 95       	neg	r22
 7a0:	7f 4f       	sbci	r23, 0xFF	; 255
 7a2:	8f 4f       	sbci	r24, 0xFF	; 255
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__fp_cmp>:
 7a8:	99 0f       	add	r25, r25
 7aa:	00 08       	sbc	r0, r0
 7ac:	55 0f       	add	r21, r21
 7ae:	aa 0b       	sbc	r26, r26
 7b0:	e0 e8       	ldi	r30, 0x80	; 128
 7b2:	fe ef       	ldi	r31, 0xFE	; 254
 7b4:	16 16       	cp	r1, r22
 7b6:	17 06       	cpc	r1, r23
 7b8:	e8 07       	cpc	r30, r24
 7ba:	f9 07       	cpc	r31, r25
 7bc:	c0 f0       	brcs	.+48     	; 0x7ee <__fp_cmp+0x46>
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	e4 07       	cpc	r30, r20
 7c4:	f5 07       	cpc	r31, r21
 7c6:	98 f0       	brcs	.+38     	; 0x7ee <__fp_cmp+0x46>
 7c8:	62 1b       	sub	r22, r18
 7ca:	73 0b       	sbc	r23, r19
 7cc:	84 0b       	sbc	r24, r20
 7ce:	95 0b       	sbc	r25, r21
 7d0:	39 f4       	brne	.+14     	; 0x7e0 <__fp_cmp+0x38>
 7d2:	0a 26       	eor	r0, r26
 7d4:	61 f0       	breq	.+24     	; 0x7ee <__fp_cmp+0x46>
 7d6:	23 2b       	or	r18, r19
 7d8:	24 2b       	or	r18, r20
 7da:	25 2b       	or	r18, r21
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <__fp_cmp+0x3e>
 7de:	08 95       	ret
 7e0:	0a 26       	eor	r0, r26
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <__fp_cmp+0x3e>
 7e4:	a1 40       	sbci	r26, 0x01	; 1
 7e6:	a6 95       	lsr	r26
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	81 1d       	adc	r24, r1
 7ec:	81 1d       	adc	r24, r1
 7ee:	08 95       	ret

000007f0 <__fp_inf>:
 7f0:	97 f9       	bld	r25, 7
 7f2:	9f 67       	ori	r25, 0x7F	; 127
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	08 95       	ret

000007fc <__fp_nan>:
 7fc:	9f ef       	ldi	r25, 0xFF	; 255
 7fe:	80 ec       	ldi	r24, 0xC0	; 192
 800:	08 95       	ret

00000802 <__fp_pscA>:
 802:	00 24       	eor	r0, r0
 804:	0a 94       	dec	r0
 806:	16 16       	cp	r1, r22
 808:	17 06       	cpc	r1, r23
 80a:	18 06       	cpc	r1, r24
 80c:	09 06       	cpc	r0, r25
 80e:	08 95       	ret

00000810 <__fp_pscB>:
 810:	00 24       	eor	r0, r0
 812:	0a 94       	dec	r0
 814:	12 16       	cp	r1, r18
 816:	13 06       	cpc	r1, r19
 818:	14 06       	cpc	r1, r20
 81a:	05 06       	cpc	r0, r21
 81c:	08 95       	ret

0000081e <__fp_round>:
 81e:	09 2e       	mov	r0, r25
 820:	03 94       	inc	r0
 822:	00 0c       	add	r0, r0
 824:	11 f4       	brne	.+4      	; 0x82a <__fp_round+0xc>
 826:	88 23       	and	r24, r24
 828:	52 f0       	brmi	.+20     	; 0x83e <__fp_round+0x20>
 82a:	bb 0f       	add	r27, r27
 82c:	40 f4       	brcc	.+16     	; 0x83e <__fp_round+0x20>
 82e:	bf 2b       	or	r27, r31
 830:	11 f4       	brne	.+4      	; 0x836 <__fp_round+0x18>
 832:	60 ff       	sbrs	r22, 0
 834:	04 c0       	rjmp	.+8      	; 0x83e <__fp_round+0x20>
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	08 95       	ret

00000840 <__fp_split3>:
 840:	57 fd       	sbrc	r21, 7
 842:	90 58       	subi	r25, 0x80	; 128
 844:	44 0f       	add	r20, r20
 846:	55 1f       	adc	r21, r21
 848:	59 f0       	breq	.+22     	; 0x860 <__fp_splitA+0x10>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	71 f0       	breq	.+28     	; 0x86a <__fp_splitA+0x1a>
 84e:	47 95       	ror	r20

00000850 <__fp_splitA>:
 850:	88 0f       	add	r24, r24
 852:	97 fb       	bst	r25, 7
 854:	99 1f       	adc	r25, r25
 856:	61 f0       	breq	.+24     	; 0x870 <__fp_splitA+0x20>
 858:	9f 3f       	cpi	r25, 0xFF	; 255
 85a:	79 f0       	breq	.+30     	; 0x87a <__fp_splitA+0x2a>
 85c:	87 95       	ror	r24
 85e:	08 95       	ret
 860:	12 16       	cp	r1, r18
 862:	13 06       	cpc	r1, r19
 864:	14 06       	cpc	r1, r20
 866:	55 1f       	adc	r21, r21
 868:	f2 cf       	rjmp	.-28     	; 0x84e <__fp_split3+0xe>
 86a:	46 95       	lsr	r20
 86c:	f1 df       	rcall	.-30     	; 0x850 <__fp_splitA>
 86e:	08 c0       	rjmp	.+16     	; 0x880 <__fp_splitA+0x30>
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	99 1f       	adc	r25, r25
 878:	f1 cf       	rjmp	.-30     	; 0x85c <__fp_splitA+0xc>
 87a:	86 95       	lsr	r24
 87c:	71 05       	cpc	r23, r1
 87e:	61 05       	cpc	r22, r1
 880:	08 94       	sec
 882:	08 95       	ret

00000884 <__fp_zero>:
 884:	e8 94       	clt

00000886 <__fp_szero>:
 886:	bb 27       	eor	r27, r27
 888:	66 27       	eor	r22, r22
 88a:	77 27       	eor	r23, r23
 88c:	cb 01       	movw	r24, r22
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret

00000892 <__gesf2>:
 892:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_cmp>
 896:	08 f4       	brcc	.+2      	; 0x89a <__gesf2+0x8>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__mulsf3>:
 89c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__mulsf3x>
 8a0:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_round>
 8a4:	0e 94 01 04 	call	0x802	; 0x802 <__fp_pscA>
 8a8:	38 f0       	brcs	.+14     	; 0x8b8 <__mulsf3+0x1c>
 8aa:	0e 94 08 04 	call	0x810	; 0x810 <__fp_pscB>
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__mulsf3+0x1c>
 8b0:	95 23       	and	r25, r21
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <__mulsf3+0x1c>
 8b4:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_inf>
 8b8:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__fp_nan>
 8bc:	11 24       	eor	r1, r1
 8be:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_szero>

000008c2 <__mulsf3x>:
 8c2:	0e 94 20 04 	call	0x840	; 0x840 <__fp_split3>
 8c6:	70 f3       	brcs	.-36     	; 0x8a4 <__mulsf3+0x8>

000008c8 <__mulsf3_pse>:
 8c8:	95 9f       	mul	r25, r21
 8ca:	c1 f3       	breq	.-16     	; 0x8bc <__mulsf3+0x20>
 8cc:	95 0f       	add	r25, r21
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	55 1f       	adc	r21, r21
 8d2:	62 9f       	mul	r22, r18
 8d4:	f0 01       	movw	r30, r0
 8d6:	72 9f       	mul	r23, r18
 8d8:	bb 27       	eor	r27, r27
 8da:	f0 0d       	add	r31, r0
 8dc:	b1 1d       	adc	r27, r1
 8de:	63 9f       	mul	r22, r19
 8e0:	aa 27       	eor	r26, r26
 8e2:	f0 0d       	add	r31, r0
 8e4:	b1 1d       	adc	r27, r1
 8e6:	aa 1f       	adc	r26, r26
 8e8:	64 9f       	mul	r22, r20
 8ea:	66 27       	eor	r22, r22
 8ec:	b0 0d       	add	r27, r0
 8ee:	a1 1d       	adc	r26, r1
 8f0:	66 1f       	adc	r22, r22
 8f2:	82 9f       	mul	r24, r18
 8f4:	22 27       	eor	r18, r18
 8f6:	b0 0d       	add	r27, r0
 8f8:	a1 1d       	adc	r26, r1
 8fa:	62 1f       	adc	r22, r18
 8fc:	73 9f       	mul	r23, r19
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	62 1f       	adc	r22, r18
 904:	83 9f       	mul	r24, r19
 906:	a0 0d       	add	r26, r0
 908:	61 1d       	adc	r22, r1
 90a:	22 1f       	adc	r18, r18
 90c:	74 9f       	mul	r23, r20
 90e:	33 27       	eor	r19, r19
 910:	a0 0d       	add	r26, r0
 912:	61 1d       	adc	r22, r1
 914:	23 1f       	adc	r18, r19
 916:	84 9f       	mul	r24, r20
 918:	60 0d       	add	r22, r0
 91a:	21 1d       	adc	r18, r1
 91c:	82 2f       	mov	r24, r18
 91e:	76 2f       	mov	r23, r22
 920:	6a 2f       	mov	r22, r26
 922:	11 24       	eor	r1, r1
 924:	9f 57       	subi	r25, 0x7F	; 127
 926:	50 40       	sbci	r21, 0x00	; 0
 928:	9a f0       	brmi	.+38     	; 0x950 <__mulsf3_pse+0x88>
 92a:	f1 f0       	breq	.+60     	; 0x968 <__mulsf3_pse+0xa0>
 92c:	88 23       	and	r24, r24
 92e:	4a f0       	brmi	.+18     	; 0x942 <__mulsf3_pse+0x7a>
 930:	ee 0f       	add	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	bb 1f       	adc	r27, r27
 936:	66 1f       	adc	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	91 50       	subi	r25, 0x01	; 1
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	a9 f7       	brne	.-22     	; 0x92c <__mulsf3_pse+0x64>
 942:	9e 3f       	cpi	r25, 0xFE	; 254
 944:	51 05       	cpc	r21, r1
 946:	80 f0       	brcs	.+32     	; 0x968 <__mulsf3_pse+0xa0>
 948:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_inf>
 94c:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_szero>
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	e4 f3       	brlt	.-8      	; 0x94c <__mulsf3_pse+0x84>
 954:	98 3e       	cpi	r25, 0xE8	; 232
 956:	d4 f3       	brlt	.-12     	; 0x94c <__mulsf3_pse+0x84>
 958:	86 95       	lsr	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	b7 95       	ror	r27
 960:	f7 95       	ror	r31
 962:	e7 95       	ror	r30
 964:	9f 5f       	subi	r25, 0xFF	; 255
 966:	c1 f7       	brne	.-16     	; 0x958 <__mulsf3_pse+0x90>
 968:	fe 2b       	or	r31, r30
 96a:	88 0f       	add	r24, r24
 96c:	91 1d       	adc	r25, r1
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
