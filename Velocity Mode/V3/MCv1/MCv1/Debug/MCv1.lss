
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a00  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001641  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ee8  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cc  00000000  00000000  00003105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ec  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab9  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 90 00 	call	0x120	; 0x120 <main>
  bc:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <set_direction>:
	PORTB &= ~(1 << EN_PIN);
	set_direction(1);
}

void set_direction(uint8_t forward) {
	if (forward)
  c4:	88 23       	and	r24, r24
  c6:	21 f0       	breq	.+8      	; 0xd0 <set_direction+0xc>
	PORTB |= (1 << DIR_PIN);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <setup_pins>:
#include "direction.h"



void setup_pins(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	80 67       	ori	r24, 0x70	; 112
  dc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	85 b9       	out	0x05, r24	; 5
	set_direction(1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 62 00 	call	0xc4	; 0xc4 <set_direction>
  ea:	08 95       	ret

000000ec <set_direction_motor2>:
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
	set_direction_motor2(1);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	08 95       	ret

00000100 <setup_pins_motor2>:
	else
	PORTB &= ~(1 << DIR_PIN);
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	80 64       	ori	r24, 0x40	; 64
 104:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	8b b9       	out	0x0b, r24	; 11
	set_direction_motor2(1);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 76 00 	call	0xec	; 0xec <set_direction_motor2>
 11e:	08 95       	ret

00000120 <main>:
#include <util/delay.h>

#include "motion_control.h"

int main(void) {
	setup_pins();
 120:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup_pins>
	setup_pins_motor2();
 124:	0e 94 80 00 	call	0x100	; 0x100 <setup_pins_motor2>

	set_direction(DEFAULT_DIRECTION_M1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <set_direction>
	set_direction_motor2(DEFAULT_DIRECTION_M2);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 76 00 	call	0xec	; 0xec <set_direction_motor2>

	move_distance(2.0f, DEFAULT_OMEGA_M1, 0);  // Move 0.5 meters using trapezoid (Distance, Omega, Trap=1 , s_curve = 0)
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	24 ea       	ldi	r18, 0xA4	; 164
 138:	30 e7       	ldi	r19, 0x70	; 112
 13a:	41 ed       	ldi	r20, 0xD1	; 209
 13c:	52 e4       	ldi	r21, 0x42	; 66
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	0e 94 a6 00 	call	0x14c	; 0x14c <move_distance>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x2a>

0000014c <move_distance>:
#include <math.h>

#define WHEEL_RADIUS 0.03f
#define STEP_ANGLE   (2.0f * M_PI / STEPS_PER_REV)

void move_distance(float distance_m, float omega_target, uint8_t use_trapezoid) {
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	49 01       	movw	r8, r18
 160:	5a 01       	movw	r10, r20
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	float rotations = distance_m / wheel_circ;
 162:	2b ef       	ldi	r18, 0xFB	; 251
 164:	34 e0       	ldi	r19, 0x04	; 4
 166:	41 e4       	ldi	r20, 0x41	; 65
 168:	5e e3       	ldi	r21, 0x3E	; 62
 16a:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
	uint32_t total_steps = (uint32_t)(rotations * STEPS_PER_REV);
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	48 e4       	ldi	r20, 0x48	; 72
 174:	54 e4       	ldi	r21, 0x44	; 68
 176:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 17a:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>

	uint16_t accel_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	uint32_t cruise_steps = (total_steps > 2 * accel_steps) ? (total_steps - 2 * accel_steps) : 0;
 17e:	65 36       	cpi	r22, 0x65	; 101
 180:	71 05       	cpc	r23, r1
 182:	81 05       	cpc	r24, r1
 184:	91 05       	cpc	r25, r1
 186:	40 f0       	brcs	.+16     	; 0x198 <move_distance+0x4c>
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
 18c:	24 e6       	ldi	r18, 0x64	; 100
 18e:	c2 1a       	sub	r12, r18
 190:	d1 08       	sbc	r13, r1
 192:	e1 08       	sbc	r14, r1
 194:	f1 08       	sbc	r15, r1
 196:	03 c0       	rjmp	.+6      	; 0x19e <move_distance+0x52>
 198:	c1 2c       	mov	r12, r1
 19a:	d1 2c       	mov	r13, r1
 19c:	76 01       	movw	r14, r12

	// Ramp Up
	if (use_trapezoid) {
 19e:	00 23       	and	r16, r16
 1a0:	29 f0       	breq	.+10     	; 0x1ac <move_distance+0x60>
		ramp_up_trapezoid(omega_target);
 1a2:	c5 01       	movw	r24, r10
 1a4:	b4 01       	movw	r22, r8
 1a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ramp_up_trapezoid>
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <move_distance+0x68>
		} else {
		ramp_up_scurve(omega_target);
 1ac:	c5 01       	movw	r24, r10
 1ae:	b4 01       	movw	r22, r8
 1b0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ramp_up_scurve>
	}

	// Cruise at constant speed
	set_angular_velocity(omega_target);
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
	set_angular_velocity_motor2(omega_target);
 1bc:	c5 01       	movw	r24, r10
 1be:	b4 01       	movw	r22, r8
 1c0:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	ba 01       	movw	r22, r20
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <move_distance+0x9c>
		while (!(TIFR1 & (1 << OCF1A))) {}
 1cc:	b1 9b       	sbis	0x16, 1	; 22
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <move_distance+0x80>
		TIFR1 |= (1 << OCF1A);
 1d0:	86 b3       	in	r24, 0x16	; 22
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	86 bb       	out	0x16, r24	; 22
		while (!(TIFR3 & (1 << OCF3A))) {}
 1d6:	c1 9b       	sbis	0x18, 1	; 24
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <move_distance+0x8a>
		TIFR3 |= (1 << OCF3A);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	88 bb       	out	0x18, r24	; 24

	// Cruise at constant speed
	set_angular_velocity(omega_target);
	set_angular_velocity_motor2(omega_target);

	for (uint32_t i = 0; i < cruise_steps; i++) {
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	6f 4f       	sbci	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	4c 15       	cp	r20, r12
 1ea:	5d 05       	cpc	r21, r13
 1ec:	6e 05       	cpc	r22, r14
 1ee:	7f 05       	cpc	r23, r15
 1f0:	68 f3       	brcs	.-38     	; 0x1cc <move_distance+0x80>
		while (!(TIFR3 & (1 << OCF3A))) {}
		TIFR3 |= (1 << OCF3A);
	}

	// Ramp Down
	if (use_trapezoid) {
 1f2:	00 23       	and	r16, r16
 1f4:	29 f0       	breq	.+10     	; 0x200 <move_distance+0xb4>
		ramp_down_trapezoid(omega_target);
 1f6:	c5 01       	movw	r24, r10
 1f8:	b4 01       	movw	r22, r8
 1fa:	0e 94 14 02 	call	0x428	; 0x428 <ramp_down_trapezoid>
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <move_distance+0xbc>
		} else {
		ramp_down_scurve(omega_target);
 200:	c5 01       	movw	r24, r10
 202:	b4 01       	movw	r22, r8
 204:	0e 94 93 01 	call	0x326	; 0x326 <ramp_down_scurve>
	}

	// Stop motors
	set_angular_velocity(0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	cb 01       	movw	r24, r22
 20e:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
	set_angular_velocity_motor2(0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	cb 01       	movw	r24, r22
 218:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>
}
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	bf 90       	pop	r11
 228:	af 90       	pop	r10
 22a:	9f 90       	pop	r9
 22c:	8f 90       	pop	r8
 22e:	08 95       	ret

00000230 <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 230:	8f 92       	push	r8
 232:	9f 92       	push	r9
 234:	af 92       	push	r10
 236:	bf 92       	push	r11
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	6b 01       	movw	r12, r22
 242:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e4       	ldi	r20, 0x40	; 64
 24a:	50 e4       	ldi	r21, 0x40	; 64
 24c:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 250:	9b 01       	movw	r18, r22
 252:	ac 01       	movw	r20, r24
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 25c:	4b 01       	movw	r8, r22
 25e:	5c 01       	movw	r10, r24
 260:	a7 01       	movw	r20, r14
 262:	96 01       	movw	r18, r12
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	0e 94 c8 02 	call	0x590	; 0x590 <__addsf3>
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 278:	9b 01       	movw	r18, r22
 27a:	ac 01       	movw	r20, r24
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	c5 01       	movw	r24, r10
 28a:	b4 01       	movw	r22, r8
 28c:	0e 94 c7 02 	call	0x58e	; 0x58e <__subsf3>
}
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	08 95       	ret

000002a2 <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 2a2:	8f 92       	push	r8
 2a4:	9f 92       	push	r9
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	4b 01       	movw	r8, r22
 2b8:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 2ba:	c1 e0       	ldi	r28, 0x01	; 1
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	25 c0       	rjmp	.+74     	; 0x30a <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 2c0:	be 01       	movw	r22, r28
 2c2:	0d 2e       	mov	r0, r29
 2c4:	00 0c       	add	r0, r0
 2c6:	88 0b       	sbc	r24, r24
 2c8:	99 0b       	sbc	r25, r25
 2ca:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	48 e4       	ldi	r20, 0x48	; 72
 2d4:	52 e4       	ldi	r21, 0x42	; 66
 2d6:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 2da:	0e 94 18 01 	call	0x230	; 0x230 <s_curve_profile>
 2de:	a5 01       	movw	r20, r10
 2e0:	94 01       	movw	r18, r8
 2e2:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 2e6:	6b 01       	movw	r12, r22
 2e8:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 2ea:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	80 e7       	ldi	r24, 0x70	; 112
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <ramp_up_scurve+0x5a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <ramp_up_scurve+0x64>
 306:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	c3 33       	cpi	r28, 0x33	; 51
 30c:	d1 05       	cpc	r29, r1
 30e:	c4 f2       	brlt	.-80     	; 0x2c0 <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	9f 90       	pop	r9
 322:	8f 90       	pop	r8
 324:	08 95       	ret

00000326 <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 326:	8f 92       	push	r8
 328:	9f 92       	push	r9
 32a:	af 92       	push	r10
 32c:	bf 92       	push	r11
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	4b 01       	movw	r8, r22
 33c:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 33e:	c1 e3       	ldi	r28, 0x31	; 49
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	25 c0       	rjmp	.+74     	; 0x38e <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 344:	be 01       	movw	r22, r28
 346:	0d 2e       	mov	r0, r29
 348:	00 0c       	add	r0, r0
 34a:	88 0b       	sbc	r24, r24
 34c:	99 0b       	sbc	r25, r25
 34e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	48 e4       	ldi	r20, 0x48	; 72
 358:	52 e4       	ldi	r21, 0x42	; 66
 35a:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 35e:	0e 94 18 01 	call	0x230	; 0x230 <s_curve_profile>
 362:	a5 01       	movw	r20, r10
 364:	94 01       	movw	r18, r8
 366:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 36a:	6b 01       	movw	r12, r22
 36c:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 36e:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 372:	c7 01       	movw	r24, r14
 374:	b6 01       	movw	r22, r12
 376:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <ramp_down_scurve+0x5a>
 388:	00 c0       	rjmp	.+0      	; 0x38a <ramp_down_scurve+0x64>
 38a:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 38c:	21 97       	sbiw	r28, 0x01	; 1
 38e:	dd 23       	and	r29, r29
 390:	cc f6       	brge	.-78     	; 0x344 <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	8f 90       	pop	r8
 3a6:	08 95       	ret

000003a8 <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 3a8:	8f 92       	push	r8
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	4b 01       	movw	r8, r22
 3be:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 3c0:	c1 e0       	ldi	r28, 0x01	; 1
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
 3c4:	23 c0       	rjmp	.+70     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 3c6:	be 01       	movw	r22, r28
 3c8:	0d 2e       	mov	r0, r29
 3ca:	00 0c       	add	r0, r0
 3cc:	88 0b       	sbc	r24, r24
 3ce:	99 0b       	sbc	r25, r25
 3d0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 3d4:	a5 01       	movw	r20, r10
 3d6:	94 01       	movw	r18, r8
 3d8:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	48 e4       	ldi	r20, 0x48	; 72
 3e2:	52 e4       	ldi	r21, 0x42	; 66
 3e4:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 3ec:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	80 e7       	ldi	r24, 0x70	; 112
 3fc:	92 e0       	ldi	r25, 0x02	; 2
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <ramp_up_trapezoid+0x56>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 40a:	21 96       	adiw	r28, 0x01	; 1
 40c:	c3 33       	cpi	r28, 0x33	; 51
 40e:	d1 05       	cpc	r29, r1
 410:	d4 f2       	brlt	.-76     	; 0x3c6 <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	08 95       	ret

00000428 <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 428:	8f 92       	push	r8
 42a:	9f 92       	push	r9
 42c:	af 92       	push	r10
 42e:	bf 92       	push	r11
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	4b 01       	movw	r8, r22
 43e:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 440:	c1 e3       	ldi	r28, 0x31	; 49
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	23 c0       	rjmp	.+70     	; 0x48c <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 446:	be 01       	movw	r22, r28
 448:	0d 2e       	mov	r0, r29
 44a:	00 0c       	add	r0, r0
 44c:	88 0b       	sbc	r24, r24
 44e:	99 0b       	sbc	r25, r25
 450:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 454:	a5 01       	movw	r20, r10
 456:	94 01       	movw	r18, r8
 458:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	48 e4       	ldi	r20, 0x48	; 72
 462:	52 e4       	ldi	r21, 0x42	; 66
 464:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
 468:	6b 01       	movw	r12, r22
 46a:	7c 01       	movw	r14, r24
		set_angular_velocity(omega);
 46c:	0e 94 b9 02 	call	0x572	; 0x572 <set_angular_velocity>
		set_angular_velocity_motor2(omega);
 470:	c7 01       	movw	r24, r14
 472:	b6 01       	movw	r22, r12
 474:	0e 94 c0 02 	call	0x580	; 0x580 <set_angular_velocity_motor2>
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	80 e7       	ldi	r24, 0x70	; 112
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <ramp_down_trapezoid+0x56>
 486:	00 c0       	rjmp	.+0      	; 0x488 <ramp_down_trapezoid+0x60>
 488:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 48a:	21 97       	sbiw	r28, 0x01	; 1
 48c:	dd 23       	and	r29, r29
 48e:	dc f6       	brge	.-74     	; 0x446 <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	08 95       	ret

000004a6 <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 4a6:	2b ee       	ldi	r18, 0xEB	; 235
 4a8:	39 ec       	ldi	r19, 0xC9	; 201
 4aa:	48 e1       	ldi	r20, 0x18	; 24
 4ac:	51 e4       	ldi	r21, 0x41	; 65
 4ae:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
}
 4b2:	08 95       	ret

000004b4 <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	6b 01       	movw	r12, r22
 4be:	7c 01       	movw	r14, r24
	if (rpm <= 0) return 65535;
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	a9 01       	movw	r20, r18
 4c6:	0e 94 34 03 	call	0x668	; 0x668 <__cmpsf2>
 4ca:	18 16       	cp	r1, r24
 4cc:	ac f5       	brge	.+106    	; 0x538 <rpm_to_ocr+0x84>
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	48 e4       	ldi	r20, 0x48	; 72
 4d4:	54 e4       	ldi	r21, 0x44	; 68
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e7       	ldi	r20, 0x70	; 112
 4e4:	52 e4       	ldi	r21, 0x42	; 66
 4e6:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	51 e4       	ldi	r21, 0x41	; 65
 4f2:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 4f6:	9b 01       	movw	r18, r22
 4f8:	ac 01       	movw	r20, r24
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	74 e2       	ldi	r23, 0x24	; 36
 4fe:	84 e7       	ldi	r24, 0x74	; 116
 500:	9b e4       	ldi	r25, 0x4B	; 75
 502:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
 506:	6b 01       	movw	r12, r22
 508:	7c 01       	movw	r14, r24
	if (ocr > 65535) ocr = 65535;
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	3f ef       	ldi	r19, 0xFF	; 255
 50e:	4f e7       	ldi	r20, 0x7F	; 127
 510:	57 e4       	ldi	r21, 0x47	; 71
 512:	0e 94 8c 04 	call	0x918	; 0x918 <__gesf2>
 516:	18 16       	cp	r1, r24
 518:	4c f4       	brge	.+18     	; 0x52c <rpm_to_ocr+0x78>
 51a:	0f 2e       	mov	r0, r31
 51c:	c1 2c       	mov	r12, r1
 51e:	dd 24       	eor	r13, r13
 520:	da 94       	dec	r13
 522:	ff e7       	ldi	r31, 0x7F	; 127
 524:	ef 2e       	mov	r14, r31
 526:	f7 e4       	ldi	r31, 0x47	; 71
 528:	ff 2e       	mov	r15, r31
 52a:	f0 2d       	mov	r31, r0
	return (uint16_t)ocr;
 52c:	c7 01       	movw	r24, r14
 52e:	b6 01       	movw	r22, r12
 530:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 534:	cb 01       	movw	r24, r22
 536:	02 c0       	rjmp	.+4      	; 0x53c <rpm_to_ocr+0x88>
float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) return 65535;
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f ef       	ldi	r25, 0xFF	; 255
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
	if (ocr > 65535) ocr = 65535;
	return (uint16_t)ocr;
}
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	08 95       	ret

00000546 <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	TCCR1A = (1 << COM1A0);
 546:	20 e4       	ldi	r18, 0x40	; 64
 548:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11);
 54c:	2a e0       	ldi	r18, 0x0A	; 10
 54e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = ocr_value;
 552:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 556:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 55a:	08 95       	ret

0000055c <setup_timer3>:
}

void setup_timer3(uint16_t ocr_value) {
	TCCR3A = (1 << COM3A0);
 55c:	20 e4       	ldi	r18, 0x40	; 64
 55e:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31);
 562:	2a e0       	ldi	r18, 0x0A	; 10
 564:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = ocr_value;
 568:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 56c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 570:	08 95       	ret

00000572 <set_angular_velocity>:
}

void set_angular_velocity(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 572:	0e 94 53 02 	call	0x4a6	; 0x4a6 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 576:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <rpm_to_ocr>
	setup_timer1(ocr);
 57a:	0e 94 a3 02 	call	0x546	; 0x546 <setup_timer1>
 57e:	08 95       	ret

00000580 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 580:	0e 94 53 02 	call	0x4a6	; 0x4a6 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 584:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <rpm_to_ocr>
	setup_timer3(ocr);
 588:	0e 94 ae 02 	call	0x55c	; 0x55c <setup_timer3>
 58c:	08 95       	ret

0000058e <__subsf3>:
 58e:	50 58       	subi	r21, 0x80	; 128

00000590 <__addsf3>:
 590:	bb 27       	eor	r27, r27
 592:	aa 27       	eor	r26, r26
 594:	0e 94 df 02 	call	0x5be	; 0x5be <__addsf3x>
 598:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 59c:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 5a0:	38 f0       	brcs	.+14     	; 0x5b0 <__addsf3+0x20>
 5a2:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__addsf3+0x20>
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <__addsf3+0x28>
 5aa:	9f 3f       	cpi	r25, 0xFF	; 255
 5ac:	19 f4       	brne	.+6      	; 0x5b4 <__addsf3+0x24>
 5ae:	26 f4       	brtc	.+8      	; 0x5b8 <__addsf3+0x28>
 5b0:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>
 5b4:	0e f4       	brtc	.+2      	; 0x5b8 <__addsf3+0x28>
 5b6:	e0 95       	com	r30
 5b8:	e7 fb       	bst	r30, 7
 5ba:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>

000005be <__addsf3x>:
 5be:	e9 2f       	mov	r30, r25
 5c0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 5c4:	58 f3       	brcs	.-42     	; 0x59c <__addsf3+0xc>
 5c6:	ba 17       	cp	r27, r26
 5c8:	62 07       	cpc	r22, r18
 5ca:	73 07       	cpc	r23, r19
 5cc:	84 07       	cpc	r24, r20
 5ce:	95 07       	cpc	r25, r21
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__addsf3x+0x1c>
 5d2:	79 f4       	brne	.+30     	; 0x5f2 <__addsf3x+0x34>
 5d4:	a6 f5       	brtc	.+104    	; 0x63e <__addsf3x+0x80>
 5d6:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_zero>
 5da:	0e f4       	brtc	.+2      	; 0x5de <__addsf3x+0x20>
 5dc:	e0 95       	com	r30
 5de:	0b 2e       	mov	r0, r27
 5e0:	ba 2f       	mov	r27, r26
 5e2:	a0 2d       	mov	r26, r0
 5e4:	0b 01       	movw	r0, r22
 5e6:	b9 01       	movw	r22, r18
 5e8:	90 01       	movw	r18, r0
 5ea:	0c 01       	movw	r0, r24
 5ec:	ca 01       	movw	r24, r20
 5ee:	a0 01       	movw	r20, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	ff 27       	eor	r31, r31
 5f4:	59 1b       	sub	r21, r25
 5f6:	99 f0       	breq	.+38     	; 0x61e <__addsf3x+0x60>
 5f8:	59 3f       	cpi	r21, 0xF9	; 249
 5fa:	50 f4       	brcc	.+20     	; 0x610 <__addsf3x+0x52>
 5fc:	50 3e       	cpi	r21, 0xE0	; 224
 5fe:	68 f1       	brcs	.+90     	; 0x65a <__addsf3x+0x9c>
 600:	1a 16       	cp	r1, r26
 602:	f0 40       	sbci	r31, 0x00	; 0
 604:	a2 2f       	mov	r26, r18
 606:	23 2f       	mov	r18, r19
 608:	34 2f       	mov	r19, r20
 60a:	44 27       	eor	r20, r20
 60c:	58 5f       	subi	r21, 0xF8	; 248
 60e:	f3 cf       	rjmp	.-26     	; 0x5f6 <__addsf3x+0x38>
 610:	46 95       	lsr	r20
 612:	37 95       	ror	r19
 614:	27 95       	ror	r18
 616:	a7 95       	ror	r26
 618:	f0 40       	sbci	r31, 0x00	; 0
 61a:	53 95       	inc	r21
 61c:	c9 f7       	brne	.-14     	; 0x610 <__addsf3x+0x52>
 61e:	7e f4       	brtc	.+30     	; 0x63e <__addsf3x+0x80>
 620:	1f 16       	cp	r1, r31
 622:	ba 0b       	sbc	r27, r26
 624:	62 0b       	sbc	r22, r18
 626:	73 0b       	sbc	r23, r19
 628:	84 0b       	sbc	r24, r20
 62a:	ba f0       	brmi	.+46     	; 0x65a <__addsf3x+0x9c>
 62c:	91 50       	subi	r25, 0x01	; 1
 62e:	a1 f0       	breq	.+40     	; 0x658 <__addsf3x+0x9a>
 630:	ff 0f       	add	r31, r31
 632:	bb 1f       	adc	r27, r27
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	c2 f7       	brpl	.-16     	; 0x62c <__addsf3x+0x6e>
 63c:	0e c0       	rjmp	.+28     	; 0x65a <__addsf3x+0x9c>
 63e:	ba 0f       	add	r27, r26
 640:	62 1f       	adc	r22, r18
 642:	73 1f       	adc	r23, r19
 644:	84 1f       	adc	r24, r20
 646:	48 f4       	brcc	.+18     	; 0x65a <__addsf3x+0x9c>
 648:	87 95       	ror	r24
 64a:	77 95       	ror	r23
 64c:	67 95       	ror	r22
 64e:	b7 95       	ror	r27
 650:	f7 95       	ror	r31
 652:	9e 3f       	cpi	r25, 0xFE	; 254
 654:	08 f0       	brcs	.+2      	; 0x658 <__addsf3x+0x9a>
 656:	b0 cf       	rjmp	.-160    	; 0x5b8 <__addsf3+0x28>
 658:	93 95       	inc	r25
 65a:	88 0f       	add	r24, r24
 65c:	08 f0       	brcs	.+2      	; 0x660 <__addsf3x+0xa2>
 65e:	99 27       	eor	r25, r25
 660:	ee 0f       	add	r30, r30
 662:	97 95       	ror	r25
 664:	87 95       	ror	r24
 666:	08 95       	ret

00000668 <__cmpsf2>:
 668:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_cmp>
 66c:	08 f4       	brcc	.+2      	; 0x670 <__cmpsf2+0x8>
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret

00000672 <__divsf3>:
 672:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3x>
 676:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 67a:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 67e:	58 f0       	brcs	.+22     	; 0x696 <__divsf3+0x24>
 680:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 684:	40 f0       	brcs	.+16     	; 0x696 <__divsf3+0x24>
 686:	29 f4       	brne	.+10     	; 0x692 <__divsf3+0x20>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	29 f0       	breq	.+10     	; 0x696 <__divsf3+0x24>
 68c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 690:	51 11       	cpse	r21, r1
 692:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 696:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>

0000069a <__divsf3x>:
 69a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 69e:	68 f3       	brcs	.-38     	; 0x67a <__divsf3+0x8>

000006a0 <__divsf3_pse>:
 6a0:	99 23       	and	r25, r25
 6a2:	b1 f3       	breq	.-20     	; 0x690 <__divsf3+0x1e>
 6a4:	55 23       	and	r21, r21
 6a6:	91 f3       	breq	.-28     	; 0x68c <__divsf3+0x1a>
 6a8:	95 1b       	sub	r25, r21
 6aa:	55 0b       	sbc	r21, r21
 6ac:	bb 27       	eor	r27, r27
 6ae:	aa 27       	eor	r26, r26
 6b0:	62 17       	cp	r22, r18
 6b2:	73 07       	cpc	r23, r19
 6b4:	84 07       	cpc	r24, r20
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <__divsf3_pse+0x26>
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	44 1f       	adc	r20, r20
 6c2:	aa 1f       	adc	r26, r26
 6c4:	a9 f3       	breq	.-22     	; 0x6b0 <__divsf3_pse+0x10>
 6c6:	35 d0       	rcall	.+106    	; 0x732 <__divsf3_pse+0x92>
 6c8:	0e 2e       	mov	r0, r30
 6ca:	3a f0       	brmi	.+14     	; 0x6da <__divsf3_pse+0x3a>
 6cc:	e0 e8       	ldi	r30, 0x80	; 128
 6ce:	32 d0       	rcall	.+100    	; 0x734 <__divsf3_pse+0x94>
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	50 40       	sbci	r21, 0x00	; 0
 6d4:	e6 95       	lsr	r30
 6d6:	00 1c       	adc	r0, r0
 6d8:	ca f7       	brpl	.-14     	; 0x6cc <__divsf3_pse+0x2c>
 6da:	2b d0       	rcall	.+86     	; 0x732 <__divsf3_pse+0x92>
 6dc:	fe 2f       	mov	r31, r30
 6de:	29 d0       	rcall	.+82     	; 0x732 <__divsf3_pse+0x92>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	bb 1f       	adc	r27, r27
 6e8:	26 17       	cp	r18, r22
 6ea:	37 07       	cpc	r19, r23
 6ec:	48 07       	cpc	r20, r24
 6ee:	ab 07       	cpc	r26, r27
 6f0:	b0 e8       	ldi	r27, 0x80	; 128
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__divsf3_pse+0x56>
 6f4:	bb 0b       	sbc	r27, r27
 6f6:	80 2d       	mov	r24, r0
 6f8:	bf 01       	movw	r22, r30
 6fa:	ff 27       	eor	r31, r31
 6fc:	93 58       	subi	r25, 0x83	; 131
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	3a f0       	brmi	.+14     	; 0x710 <__divsf3_pse+0x70>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	78 f0       	brcs	.+30     	; 0x726 <__divsf3_pse+0x86>
 708:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 70c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	e4 f3       	brlt	.-8      	; 0x70c <__divsf3_pse+0x6c>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	d4 f3       	brlt	.-12     	; 0x70c <__divsf3_pse+0x6c>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	9f 5f       	subi	r25, 0xFF	; 255
 724:	c9 f7       	brne	.-14     	; 0x718 <__divsf3_pse+0x78>
 726:	88 0f       	add	r24, r24
 728:	91 1d       	adc	r25, r1
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret
 732:	e1 e0       	ldi	r30, 0x01	; 1
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	bb 1f       	adc	r27, r27
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	ba 07       	cpc	r27, r26
 744:	20 f0       	brcs	.+8      	; 0x74e <__divsf3_pse+0xae>
 746:	62 1b       	sub	r22, r18
 748:	73 0b       	sbc	r23, r19
 74a:	84 0b       	sbc	r24, r20
 74c:	ba 0b       	sbc	r27, r26
 74e:	ee 1f       	adc	r30, r30
 750:	88 f7       	brcc	.-30     	; 0x734 <__divsf3_pse+0x94>
 752:	e0 95       	com	r30
 754:	08 95       	ret

00000756 <__fixunssfsi>:
 756:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_splitA>
 75a:	88 f0       	brcs	.+34     	; 0x77e <__fixunssfsi+0x28>
 75c:	9f 57       	subi	r25, 0x7F	; 127
 75e:	98 f0       	brcs	.+38     	; 0x786 <__fixunssfsi+0x30>
 760:	b9 2f       	mov	r27, r25
 762:	99 27       	eor	r25, r25
 764:	b7 51       	subi	r27, 0x17	; 23
 766:	b0 f0       	brcs	.+44     	; 0x794 <__fixunssfsi+0x3e>
 768:	e1 f0       	breq	.+56     	; 0x7a2 <__fixunssfsi+0x4c>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a f0       	brmi	.+6      	; 0x77a <__fixunssfsi+0x24>
 774:	ba 95       	dec	r27
 776:	c9 f7       	brne	.-14     	; 0x76a <__fixunssfsi+0x14>
 778:	14 c0       	rjmp	.+40     	; 0x7a2 <__fixunssfsi+0x4c>
 77a:	b1 30       	cpi	r27, 0x01	; 1
 77c:	91 f0       	breq	.+36     	; 0x7a2 <__fixunssfsi+0x4c>
 77e:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_zero>
 782:	b1 e0       	ldi	r27, 0x01	; 1
 784:	08 95       	ret
 786:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_zero>
 78a:	67 2f       	mov	r22, r23
 78c:	78 2f       	mov	r23, r24
 78e:	88 27       	eor	r24, r24
 790:	b8 5f       	subi	r27, 0xF8	; 248
 792:	39 f0       	breq	.+14     	; 0x7a2 <__fixunssfsi+0x4c>
 794:	b9 3f       	cpi	r27, 0xF9	; 249
 796:	cc f3       	brlt	.-14     	; 0x78a <__fixunssfsi+0x34>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b3 95       	inc	r27
 7a0:	d9 f7       	brne	.-10     	; 0x798 <__fixunssfsi+0x42>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__fixunssfsi+0x5c>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__floatunsisf>:
 7b4:	e8 94       	clt
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <__floatsisf+0x12>

000007b8 <__floatsisf>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__floatsisf+0x12>
 7bc:	90 95       	com	r25
 7be:	80 95       	com	r24
 7c0:	70 95       	com	r23
 7c2:	61 95       	neg	r22
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	99 23       	and	r25, r25
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <__floatsisf+0x40>
 7ce:	f9 2f       	mov	r31, r25
 7d0:	96 e9       	ldi	r25, 0x96	; 150
 7d2:	bb 27       	eor	r27, r27
 7d4:	93 95       	inc	r25
 7d6:	f6 95       	lsr	r31
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	f1 11       	cpse	r31, r1
 7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <__floatsisf+0x1c>
 7e4:	fa f4       	brpl	.+62     	; 0x824 <__floatsisf+0x6c>
 7e6:	bb 0f       	add	r27, r27
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__floatsisf+0x36>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	1b c0       	rjmp	.+54     	; 0x824 <__floatsisf+0x6c>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__floatsisf+0x6c>
 7f8:	88 23       	and	r24, r24
 7fa:	11 f0       	breq	.+4      	; 0x800 <__floatsisf+0x48>
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__floatsisf+0x6a>
 800:	77 23       	and	r23, r23
 802:	21 f0       	breq	.+8      	; 0x80c <__floatsisf+0x54>
 804:	9e e8       	ldi	r25, 0x8E	; 142
 806:	87 2f       	mov	r24, r23
 808:	76 2f       	mov	r23, r22
 80a:	05 c0       	rjmp	.+10     	; 0x816 <__floatsisf+0x5e>
 80c:	66 23       	and	r22, r22
 80e:	71 f0       	breq	.+28     	; 0x82c <__floatsisf+0x74>
 810:	96 e8       	ldi	r25, 0x86	; 134
 812:	86 2f       	mov	r24, r22
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	2a f0       	brmi	.+10     	; 0x824 <__floatsisf+0x6c>
 81a:	9a 95       	dec	r25
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	da f7       	brpl	.-10     	; 0x81a <__floatsisf+0x62>
 824:	88 0f       	add	r24, r24
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__fp_cmp>:
 82e:	99 0f       	add	r25, r25
 830:	00 08       	sbc	r0, r0
 832:	55 0f       	add	r21, r21
 834:	aa 0b       	sbc	r26, r26
 836:	e0 e8       	ldi	r30, 0x80	; 128
 838:	fe ef       	ldi	r31, 0xFE	; 254
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	e8 07       	cpc	r30, r24
 840:	f9 07       	cpc	r31, r25
 842:	c0 f0       	brcs	.+48     	; 0x874 <__fp_cmp+0x46>
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	e4 07       	cpc	r30, r20
 84a:	f5 07       	cpc	r31, r21
 84c:	98 f0       	brcs	.+38     	; 0x874 <__fp_cmp+0x46>
 84e:	62 1b       	sub	r22, r18
 850:	73 0b       	sbc	r23, r19
 852:	84 0b       	sbc	r24, r20
 854:	95 0b       	sbc	r25, r21
 856:	39 f4       	brne	.+14     	; 0x866 <__fp_cmp+0x38>
 858:	0a 26       	eor	r0, r26
 85a:	61 f0       	breq	.+24     	; 0x874 <__fp_cmp+0x46>
 85c:	23 2b       	or	r18, r19
 85e:	24 2b       	or	r18, r20
 860:	25 2b       	or	r18, r21
 862:	21 f4       	brne	.+8      	; 0x86c <__fp_cmp+0x3e>
 864:	08 95       	ret
 866:	0a 26       	eor	r0, r26
 868:	09 f4       	brne	.+2      	; 0x86c <__fp_cmp+0x3e>
 86a:	a1 40       	sbci	r26, 0x01	; 1
 86c:	a6 95       	lsr	r26
 86e:	8f ef       	ldi	r24, 0xFF	; 255
 870:	81 1d       	adc	r24, r1
 872:	81 1d       	adc	r24, r1
 874:	08 95       	ret

00000876 <__fp_inf>:
 876:	97 f9       	bld	r25, 7
 878:	9f 67       	ori	r25, 0x7F	; 127
 87a:	80 e8       	ldi	r24, 0x80	; 128
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	08 95       	ret

00000882 <__fp_nan>:
 882:	9f ef       	ldi	r25, 0xFF	; 255
 884:	80 ec       	ldi	r24, 0xC0	; 192
 886:	08 95       	ret

00000888 <__fp_pscA>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	09 06       	cpc	r0, r25
 894:	08 95       	ret

00000896 <__fp_pscB>:
 896:	00 24       	eor	r0, r0
 898:	0a 94       	dec	r0
 89a:	12 16       	cp	r1, r18
 89c:	13 06       	cpc	r1, r19
 89e:	14 06       	cpc	r1, r20
 8a0:	05 06       	cpc	r0, r21
 8a2:	08 95       	ret

000008a4 <__fp_round>:
 8a4:	09 2e       	mov	r0, r25
 8a6:	03 94       	inc	r0
 8a8:	00 0c       	add	r0, r0
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <__fp_round+0xc>
 8ac:	88 23       	and	r24, r24
 8ae:	52 f0       	brmi	.+20     	; 0x8c4 <__fp_round+0x20>
 8b0:	bb 0f       	add	r27, r27
 8b2:	40 f4       	brcc	.+16     	; 0x8c4 <__fp_round+0x20>
 8b4:	bf 2b       	or	r27, r31
 8b6:	11 f4       	brne	.+4      	; 0x8bc <__fp_round+0x18>
 8b8:	60 ff       	sbrs	r22, 0
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__fp_round+0x20>
 8bc:	6f 5f       	subi	r22, 0xFF	; 255
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	08 95       	ret

000008c6 <__fp_split3>:
 8c6:	57 fd       	sbrc	r21, 7
 8c8:	90 58       	subi	r25, 0x80	; 128
 8ca:	44 0f       	add	r20, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	59 f0       	breq	.+22     	; 0x8e6 <__fp_splitA+0x10>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <__fp_splitA+0x1a>
 8d4:	47 95       	ror	r20

000008d6 <__fp_splitA>:
 8d6:	88 0f       	add	r24, r24
 8d8:	97 fb       	bst	r25, 7
 8da:	99 1f       	adc	r25, r25
 8dc:	61 f0       	breq	.+24     	; 0x8f6 <__fp_splitA+0x20>
 8de:	9f 3f       	cpi	r25, 0xFF	; 255
 8e0:	79 f0       	breq	.+30     	; 0x900 <__fp_splitA+0x2a>
 8e2:	87 95       	ror	r24
 8e4:	08 95       	ret
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	14 06       	cpc	r1, r20
 8ec:	55 1f       	adc	r21, r21
 8ee:	f2 cf       	rjmp	.-28     	; 0x8d4 <__fp_split3+0xe>
 8f0:	46 95       	lsr	r20
 8f2:	f1 df       	rcall	.-30     	; 0x8d6 <__fp_splitA>
 8f4:	08 c0       	rjmp	.+16     	; 0x906 <__fp_splitA+0x30>
 8f6:	16 16       	cp	r1, r22
 8f8:	17 06       	cpc	r1, r23
 8fa:	18 06       	cpc	r1, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <__fp_splitA+0xc>
 900:	86 95       	lsr	r24
 902:	71 05       	cpc	r23, r1
 904:	61 05       	cpc	r22, r1
 906:	08 94       	sec
 908:	08 95       	ret

0000090a <__fp_zero>:
 90a:	e8 94       	clt

0000090c <__fp_szero>:
 90c:	bb 27       	eor	r27, r27
 90e:	66 27       	eor	r22, r22
 910:	77 27       	eor	r23, r23
 912:	cb 01       	movw	r24, r22
 914:	97 f9       	bld	r25, 7
 916:	08 95       	ret

00000918 <__gesf2>:
 918:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_cmp>
 91c:	08 f4       	brcc	.+2      	; 0x920 <__gesf2+0x8>
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	08 95       	ret

00000922 <__mulsf3>:
 922:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3x>
 926:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 92a:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 92e:	38 f0       	brcs	.+14     	; 0x93e <__mulsf3+0x1c>
 930:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 934:	20 f0       	brcs	.+8      	; 0x93e <__mulsf3+0x1c>
 936:	95 23       	and	r25, r21
 938:	11 f0       	breq	.+4      	; 0x93e <__mulsf3+0x1c>
 93a:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 93e:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>
 942:	11 24       	eor	r1, r1
 944:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>

00000948 <__mulsf3x>:
 948:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 94c:	70 f3       	brcs	.-36     	; 0x92a <__mulsf3+0x8>

0000094e <__mulsf3_pse>:
 94e:	95 9f       	mul	r25, r21
 950:	c1 f3       	breq	.-16     	; 0x942 <__mulsf3+0x20>
 952:	95 0f       	add	r25, r21
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	55 1f       	adc	r21, r21
 958:	62 9f       	mul	r22, r18
 95a:	f0 01       	movw	r30, r0
 95c:	72 9f       	mul	r23, r18
 95e:	bb 27       	eor	r27, r27
 960:	f0 0d       	add	r31, r0
 962:	b1 1d       	adc	r27, r1
 964:	63 9f       	mul	r22, r19
 966:	aa 27       	eor	r26, r26
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	aa 1f       	adc	r26, r26
 96e:	64 9f       	mul	r22, r20
 970:	66 27       	eor	r22, r22
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	66 1f       	adc	r22, r22
 978:	82 9f       	mul	r24, r18
 97a:	22 27       	eor	r18, r18
 97c:	b0 0d       	add	r27, r0
 97e:	a1 1d       	adc	r26, r1
 980:	62 1f       	adc	r22, r18
 982:	73 9f       	mul	r23, r19
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	83 9f       	mul	r24, r19
 98c:	a0 0d       	add	r26, r0
 98e:	61 1d       	adc	r22, r1
 990:	22 1f       	adc	r18, r18
 992:	74 9f       	mul	r23, r20
 994:	33 27       	eor	r19, r19
 996:	a0 0d       	add	r26, r0
 998:	61 1d       	adc	r22, r1
 99a:	23 1f       	adc	r18, r19
 99c:	84 9f       	mul	r24, r20
 99e:	60 0d       	add	r22, r0
 9a0:	21 1d       	adc	r18, r1
 9a2:	82 2f       	mov	r24, r18
 9a4:	76 2f       	mov	r23, r22
 9a6:	6a 2f       	mov	r22, r26
 9a8:	11 24       	eor	r1, r1
 9aa:	9f 57       	subi	r25, 0x7F	; 127
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	9a f0       	brmi	.+38     	; 0x9d6 <__mulsf3_pse+0x88>
 9b0:	f1 f0       	breq	.+60     	; 0x9ee <__mulsf3_pse+0xa0>
 9b2:	88 23       	and	r24, r24
 9b4:	4a f0       	brmi	.+18     	; 0x9c8 <__mulsf3_pse+0x7a>
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	bb 1f       	adc	r27, r27
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	91 50       	subi	r25, 0x01	; 1
 9c4:	50 40       	sbci	r21, 0x00	; 0
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__mulsf3_pse+0x64>
 9c8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ca:	51 05       	cpc	r21, r1
 9cc:	80 f0       	brcs	.+32     	; 0x9ee <__mulsf3_pse+0xa0>
 9ce:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 9d2:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	e4 f3       	brlt	.-8      	; 0x9d2 <__mulsf3_pse+0x84>
 9da:	98 3e       	cpi	r25, 0xE8	; 232
 9dc:	d4 f3       	brlt	.-12     	; 0x9d2 <__mulsf3_pse+0x84>
 9de:	86 95       	lsr	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f7 95       	ror	r31
 9e8:	e7 95       	ror	r30
 9ea:	9f 5f       	subi	r25, 0xFF	; 255
 9ec:	c1 f7       	brne	.-16     	; 0x9de <__mulsf3_pse+0x90>
 9ee:	fe 2b       	or	r31, r30
 9f0:	88 0f       	add	r24, r24
 9f2:	91 1d       	adc	r25, r1
 9f4:	96 95       	lsr	r25
 9f6:	87 95       	ror	r24
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
