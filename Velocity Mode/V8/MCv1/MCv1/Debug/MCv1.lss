
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000edc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000f50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002080  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001068  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec8  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  000050c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000948  00000000  00000000  000055d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001984  00000000  00000000  00005f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 31       	cpi	r26, 0x10	; 16
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 92 00 	call	0x124	; 0x124 <main>
  cc:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <setup_pins_motor1>:
#include "direction.h"



void setup_pins_motor1(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 67       	ori	r24, 0x70	; 112
  d8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <set_direction_motor1>:
	//set_direction_motor1(0);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
  e2:	88 23       	and	r24, r24
  e4:	21 f0       	breq	.+8      	; 0xee <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <setup_pins_motor2>:
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <set_direction_motor2>:
	//set_direction_motor2(0);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
 110:	88 23       	and	r24, r24
 112:	21 f0       	breq	.+8      	; 0x11c <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	82 60       	ori	r24, 0x02	; 2
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <main>:

#include "motion_control.h"


int main(void) {
	setup_pins_motor1();
 124:	0e 94 6a 00 	call	0xd4	; 0xd4 <setup_pins_motor1>
	setup_pins_motor2();
 128:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_pins_motor2>
	set_direction_motor1(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 71 00 	call	0xe2	; 0xe2 <set_direction_motor1>
	set_direction_motor2(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 88 00 	call	0x110	; 0x110 <set_direction_motor2>
	//move_distance(0.3,50,1);
	//move_distance(1.83,100,1);
	turn_angle(-M_PI/2,50,1);
 138:	01 e0       	ldi	r16, 0x01	; 1
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	48 e4       	ldi	r20, 0x48	; 72
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	6b ed       	ldi	r22, 0xDB	; 219
 144:	7f e0       	ldi	r23, 0x0F	; 15
 146:	89 ec       	ldi	r24, 0xC9	; 201
 148:	9f eb       	ldi	r25, 0xBF	; 191
 14a:	0e 94 ca 01 	call	0x394	; 0x394 <turn_angle>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x2a>

00000150 <calculate_accel_distance>:
	}
	
	// Stop motors
	set_angular_velocity_motor1(0);
	set_angular_velocity_motor2(0);
}
 150:	4f 92       	push	r4
 152:	5f 92       	push	r5
 154:	6f 92       	push	r6
 156:	7f 92       	push	r7
 158:	8f 92       	push	r8
 15a:	9f 92       	push	r9
 15c:	af 92       	push	r10
 15e:	bf 92       	push	r11
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <calculate_accel_distance+0x22>
 172:	00 d0       	rcall	.+0      	; 0x174 <calculate_accel_distance+0x24>
 174:	00 d0       	rcall	.+0      	; 0x176 <calculate_accel_distance+0x26>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	69 83       	std	Y+1, r22	; 0x01
 17c:	7a 83       	std	Y+2, r23	; 0x02
 17e:	8b 83       	std	Y+3, r24	; 0x03
 180:	9c 83       	std	Y+4, r25	; 0x04
 182:	8a 01       	movw	r16, r20
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	3e 83       	std	Y+6, r19	; 0x06
 18a:	2d 83       	std	Y+5, r18	; 0x05
 18c:	81 2c       	mov	r8, r1
 18e:	91 2c       	mov	r9, r1
 190:	54 01       	movw	r10, r8
 192:	5e c0       	rjmp	.+188    	; 0x250 <calculate_accel_distance+0x100>
 194:	2d 81       	ldd	r18, Y+5	; 0x05
 196:	3e 81       	ldd	r19, Y+6	; 0x06
 198:	b9 01       	movw	r22, r18
 19a:	33 0f       	add	r19, r19
 19c:	88 0b       	sbc	r24, r24
 19e:	99 0b       	sbc	r25, r25
 1a0:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	3a 81       	ldd	r19, Y+2	; 0x02
 1a8:	4b 81       	ldd	r20, Y+3	; 0x03
 1aa:	5c 81       	ldd	r21, Y+4	; 0x04
 1ac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 1b0:	2b 01       	movw	r4, r22
 1b2:	3c 01       	movw	r6, r24
 1b4:	b8 01       	movw	r22, r16
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 48 06 	call	0xc90	; 0xc90 <__floatunsisf>
 1be:	6b 01       	movw	r12, r22
 1c0:	7c 01       	movw	r14, r24
 1c2:	9b 01       	movw	r18, r22
 1c4:	ac 01       	movw	r20, r24
 1c6:	c3 01       	movw	r24, r6
 1c8:	b2 01       	movw	r22, r4
 1ca:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 1ce:	2b 01       	movw	r4, r22
 1d0:	3c 01       	movw	r6, r24
 1d2:	6d 81       	ldd	r22, Y+5	; 0x05
 1d4:	7e 81       	ldd	r23, Y+6	; 0x06
 1d6:	61 50       	subi	r22, 0x01	; 1
 1d8:	71 09       	sbc	r23, r1
 1da:	07 2e       	mov	r0, r23
 1dc:	00 0c       	add	r0, r0
 1de:	88 0b       	sbc	r24, r24
 1e0:	99 0b       	sbc	r25, r25
 1e2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 1e6:	29 81       	ldd	r18, Y+1	; 0x01
 1e8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ea:	4b 81       	ldd	r20, Y+3	; 0x03
 1ec:	5c 81       	ldd	r21, Y+4	; 0x04
 1ee:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 1f2:	a7 01       	movw	r20, r14
 1f4:	96 01       	movw	r18, r12
 1f6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 1fa:	9b 01       	movw	r18, r22
 1fc:	ac 01       	movw	r20, r24
 1fe:	c3 01       	movw	r24, r6
 200:	b2 01       	movw	r22, r4
 202:	0e 94 36 05 	call	0xa6c	; 0xa6c <__addsf3>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	5f e3       	ldi	r21, 0x3F	; 63
 20e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e2       	ldi	r20, 0x20	; 32
 218:	51 e4       	ldi	r21, 0x41	; 65
 21a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 21e:	25 e2       	ldi	r18, 0x25	; 37
 220:	36 e0       	ldi	r19, 0x06	; 6
 222:	41 e8       	ldi	r20, 0x81	; 129
 224:	5d e3       	ldi	r21, 0x3D	; 61
 226:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 22a:	2d ec       	ldi	r18, 0xCD	; 205
 22c:	3c ec       	ldi	r19, 0xCC	; 204
 22e:	4c e4       	ldi	r20, 0x4C	; 76
 230:	5d e3       	ldi	r21, 0x3D	; 61
 232:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	c5 01       	movw	r24, r10
 23c:	b4 01       	movw	r22, r8
 23e:	0e 94 36 05 	call	0xa6c	; 0xa6c <__addsf3>
 242:	4b 01       	movw	r8, r22
 244:	5c 01       	movw	r10, r24
 246:	8d 81       	ldd	r24, Y+5	; 0x05
 248:	9e 81       	ldd	r25, Y+6	; 0x06
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	9e 83       	std	Y+6, r25	; 0x06
 24e:	8d 83       	std	Y+5, r24	; 0x05
 250:	2d 81       	ldd	r18, Y+5	; 0x05
 252:	3e 81       	ldd	r19, Y+6	; 0x06
 254:	02 17       	cp	r16, r18
 256:	13 07       	cpc	r17, r19
 258:	08 f0       	brcs	.+2      	; 0x25c <calculate_accel_distance+0x10c>
 25a:	9c cf       	rjmp	.-200    	; 0x194 <calculate_accel_distance+0x44>
 25c:	c5 01       	movw	r24, r10
 25e:	b4 01       	movw	r22, r8
 260:	26 96       	adiw	r28, 0x06	; 6
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	9f 90       	pop	r9
 282:	8f 90       	pop	r8
 284:	7f 90       	pop	r7
 286:	6f 90       	pop	r6
 288:	5f 90       	pop	r5
 28a:	4f 90       	pop	r4
 28c:	08 95       	ret

0000028e <turn_constant_speed>:
	// Stop motors
	set_angular_velocity_motor1(0);
	set_angular_velocity_motor2(0);
}

void turn_constant_speed(uint32_t target_steps, float omega) {
 28e:	8f 92       	push	r8
 290:	9f 92       	push	r9
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
 2a2:	49 01       	movw	r8, r18
 2a4:	5a 01       	movw	r10, r20
	motor1_steps = 0;
 2a6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor1_steps>
 2aa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <motor1_steps+0x1>
 2ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <motor1_steps+0x2>
 2b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <motor1_steps+0x3>
	motor2_steps = 0;
 2b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	set_angular_velocity_motor1(omega);
 2c6:	ca 01       	movw	r24, r20
 2c8:	b9 01       	movw	r22, r18
 2ca:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega);
 2ce:	c5 01       	movw	r24, r10
 2d0:	b4 01       	movw	r22, r8
 2d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
	
	while (motor1_steps < target_steps && motor2_steps < target_steps) {
 2d6:	30 c0       	rjmp	.+96     	; 0x338 <turn_constant_speed+0xaa>
		if (TIFR1 & (1 << OCF1A)) {
 2d8:	b1 9b       	sbis	0x16, 1	; 22
 2da:	16 c0       	rjmp	.+44     	; 0x308 <turn_constant_speed+0x7a>
			TIFR1 |= (1 << OCF1A);
 2dc:	86 b3       	in	r24, 0x16	; 22
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	86 bb       	out	0x16, r24	; 22
			motor1_steps++;
 2e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 2e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 2ea:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 2ee:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor1_steps>
 2fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <motor1_steps+0x1>
 300:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <motor1_steps+0x2>
 304:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <motor1_steps+0x3>
		}
		if (TIFR3 & (1 << OCF3A)) {
 308:	c1 9b       	sbis	0x18, 1	; 24
 30a:	16 c0       	rjmp	.+44     	; 0x338 <turn_constant_speed+0xaa>
			TIFR3 |= (1 << OCF3A);
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	88 bb       	out	0x18, r24	; 24
			motor2_steps++;
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 316:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 31e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	a1 1d       	adc	r26, r1
 326:	b1 1d       	adc	r27, r1
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 32c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 330:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 334:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	motor2_steps = 0;
	
	set_angular_velocity_motor1(omega);
	set_angular_velocity_motor2(omega);
	
	while (motor1_steps < target_steps && motor2_steps < target_steps) {
 338:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 33c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 340:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 344:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 348:	8c 15       	cp	r24, r12
 34a:	9d 05       	cpc	r25, r13
 34c:	ae 05       	cpc	r26, r14
 34e:	bf 05       	cpc	r27, r15
 350:	70 f4       	brcc	.+28     	; 0x36e <turn_constant_speed+0xe0>
 352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 356:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 35e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 362:	8c 15       	cp	r24, r12
 364:	9d 05       	cpc	r25, r13
 366:	ae 05       	cpc	r26, r14
 368:	bf 05       	cpc	r27, r15
 36a:	08 f4       	brcc	.+2      	; 0x36e <turn_constant_speed+0xe0>
 36c:	b5 cf       	rjmp	.-150    	; 0x2d8 <turn_constant_speed+0x4a>
			TIFR3 |= (1 << OCF3A);
			motor2_steps++;
		}
	}
	
	set_angular_velocity_motor1(0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	cb 01       	movw	r24, r22
 374:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	cb 01       	movw	r24, r22
 37e:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
}
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	bf 90       	pop	r11
 38c:	af 90       	pop	r10
 38e:	9f 90       	pop	r9
 390:	8f 90       	pop	r8
 392:	08 95       	ret

00000394 <turn_angle>:
	return total_distance;
}

// Turn Angle

void turn_angle(float angle_rad, float omega_target, uint8_t use_trapezoid) {
 394:	4f 92       	push	r4
 396:	5f 92       	push	r5
 398:	6f 92       	push	r6
 39a:	7f 92       	push	r7
 39c:	8f 92       	push	r8
 39e:	9f 92       	push	r9
 3a0:	af 92       	push	r10
 3a2:	bf 92       	push	r11
 3a4:	cf 92       	push	r12
 3a6:	df 92       	push	r13
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	0f 93       	push	r16
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	2c 97       	sbiw	r28, 0x0c	; 12
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	6b 01       	movw	r12, r22
 3c4:	7c 01       	movw	r14, r24
 3c6:	49 01       	movw	r8, r18
 3c8:	5a 01       	movw	r10, r20
	if (fabsf(angle_rad) <= 0.001f) {  // ~0.06 degrees threshold
 3ca:	2b 01       	movw	r4, r22
 3cc:	3c 01       	movw	r6, r24
 3ce:	e8 94       	clt
 3d0:	77 f8       	bld	r7, 7
 3d2:	2f e6       	ldi	r18, 0x6F	; 111
 3d4:	32 e1       	ldi	r19, 0x12	; 18
 3d6:	43 e8       	ldi	r20, 0x83	; 131
 3d8:	5a e3       	ldi	r21, 0x3A	; 58
 3da:	c3 01       	movw	r24, r6
 3dc:	b2 01       	movw	r22, r4
 3de:	0e 94 a2 05 	call	0xb44	; 0xb44 <__cmpsf2>
 3e2:	18 16       	cp	r1, r24
 3e4:	0c f0       	brlt	.+2      	; 0x3e8 <turn_angle+0x54>
 3e6:	43 c1       	rjmp	.+646    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
		return;
	}
	
	// Calculate arc distance each wheel travels
	float arc = (WHEELBASE / 2.0f) * fabsf(angle_rad);
 3e8:	2f e8       	ldi	r18, 0x8F	; 143
 3ea:	32 ec       	ldi	r19, 0xC2	; 194
 3ec:	45 e7       	ldi	r20, 0x75	; 117
 3ee:	5e e3       	ldi	r21, 0x3E	; 62
 3f0:	c3 01       	movw	r24, r6
 3f2:	b2 01       	movw	r22, r4
 3f4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 3f8:	69 83       	std	Y+1, r22	; 0x01
 3fa:	7a 83       	std	Y+2, r23	; 0x02
 3fc:	8b 83       	std	Y+3, r24	; 0x03
 3fe:	9c 83       	std	Y+4, r25	; 0x04
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	const float GEAR_RATIO = 10.0f;
	
	// Convert to steps (including gear ratio)
	float wheel_rotations = arc / wheel_circ;
 400:	22 ea       	ldi	r18, 0xA2	; 162
 402:	3b ea       	ldi	r19, 0xAB	; 171
 404:	4a ec       	ldi	r20, 0xCA	; 202
 406:	5e e3       	ldi	r21, 0x3E	; 62
 408:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
	float motor_rotations = wheel_rotations * GEAR_RATIO;
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e2       	ldi	r20, 0x20	; 32
 412:	51 e4       	ldi	r21, 0x41	; 65
 414:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
	uint32_t total_steps = (uint32_t)(motor_rotations * STEPS_PER_REV);
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	48 e4       	ldi	r20, 0x48	; 72
 41e:	54 e4       	ldi	r21, 0x44	; 68
 420:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 424:	0e 94 19 06 	call	0xc32	; 0xc32 <__fixunssfsi>
 428:	2b 01       	movw	r4, r22
 42a:	3c 01       	movw	r6, r24
	
	// Calculate ramp distances
	uint16_t profile_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	float accel_distance = calculate_accel_distance(omega_target, profile_steps);
 42c:	42 e3       	ldi	r20, 0x32	; 50
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	c5 01       	movw	r24, r10
 432:	b4 01       	movw	r22, r8
 434:	0e 94 a8 00 	call	0x150	; 0x150 <calculate_accel_distance>
 438:	6d 83       	std	Y+5, r22	; 0x05
 43a:	7e 83       	std	Y+6, r23	; 0x06
 43c:	8f 83       	std	Y+7, r24	; 0x07
 43e:	98 87       	std	Y+8, r25	; 0x08
	float decel_distance = accel_distance;
	float total_ramp_distance = accel_distance + decel_distance;
 440:	9b 01       	movw	r18, r22
 442:	ac 01       	movw	r20, r24
 444:	0e 94 36 05 	call	0xa6c	; 0xa6c <__addsf3>
 448:	69 87       	std	Y+9, r22	; 0x09
 44a:	7a 87       	std	Y+10, r23	; 0x0a
 44c:	8b 87       	std	Y+11, r24	; 0x0b
 44e:	9c 87       	std	Y+12, r25	; 0x0c
	
	// Set directions based on turn direction
	if (angle_rad > 0) {  // Positive = turn left
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	a9 01       	movw	r20, r18
 456:	c7 01       	movw	r24, r14
 458:	b6 01       	movw	r22, r12
 45a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__gesf2>
 45e:	18 16       	cp	r1, r24
 460:	3c f4       	brge	.+14     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		set_direction_motor1(0);  // Left wheel forward
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 71 00 	call	0xe2	; 0xe2 <set_direction_motor1>
		set_direction_motor2(1);  // Right wheel backward
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 88 00 	call	0x110	; 0x110 <set_direction_motor2>
 46e:	06 c0       	rjmp	.+12     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		} else {  // Negative = turn right
		set_direction_motor1(1);  // Left wheel backward
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 71 00 	call	0xe2	; 0xe2 <set_direction_motor1>
		set_direction_motor2(0);  // Right wheel forward
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 88 00 	call	0x110	; 0x110 <set_direction_motor2>
	}
	
	// Handle small angles (similar to small distances)
	if (arc < total_ramp_distance * 0.5f) {
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	5f e3       	ldi	r21, 0x3F	; 63
 484:	69 85       	ldd	r22, Y+9	; 0x09
 486:	7a 85       	ldd	r23, Y+10	; 0x0a
 488:	8b 85       	ldd	r24, Y+11	; 0x0b
 48a:	9c 85       	ldd	r25, Y+12	; 0x0c
 48c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	69 81       	ldd	r22, Y+1	; 0x01
 496:	7a 81       	ldd	r23, Y+2	; 0x02
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	9c 81       	ldd	r25, Y+4	; 0x04
 49c:	0e 94 a2 05 	call	0xb44	; 0xb44 <__cmpsf2>
 4a0:	88 23       	and	r24, r24
 4a2:	7c f4       	brge	.+30     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		// Very small angle - use constant speed
		turn_constant_speed(total_steps, omega_target * 0.3f);
 4a4:	2a e9       	ldi	r18, 0x9A	; 154
 4a6:	39 e9       	ldi	r19, 0x99	; 153
 4a8:	49 e9       	ldi	r20, 0x99	; 153
 4aa:	5e e3       	ldi	r21, 0x3E	; 62
 4ac:	c5 01       	movw	r24, r10
 4ae:	b4 01       	movw	r22, r8
 4b0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 4b4:	9b 01       	movw	r18, r22
 4b6:	ac 01       	movw	r20, r24
 4b8:	c3 01       	movw	r24, r6
 4ba:	b2 01       	movw	r22, r4
 4bc:	0e 94 47 01 	call	0x28e	; 0x28e <turn_constant_speed>
		return;
 4c0:	d6 c0       	rjmp	.+428    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
	}
	
	if (arc < total_ramp_distance) {
 4c2:	29 85       	ldd	r18, Y+9	; 0x09
 4c4:	3a 85       	ldd	r19, Y+10	; 0x0a
 4c6:	4b 85       	ldd	r20, Y+11	; 0x0b
 4c8:	5c 85       	ldd	r21, Y+12	; 0x0c
 4ca:	69 81       	ldd	r22, Y+1	; 0x01
 4cc:	7a 81       	ldd	r23, Y+2	; 0x02
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	9c 81       	ldd	r25, Y+4	; 0x04
 4d2:	0e 94 a2 05 	call	0xb44	; 0xb44 <__cmpsf2>
 4d6:	88 23       	and	r24, r24
 4d8:	14 f5       	brge	.+68     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
		// Small angle - use scaled trapezoid
		float scale_factor = arc / total_ramp_distance;
 4da:	29 85       	ldd	r18, Y+9	; 0x09
 4dc:	3a 85       	ldd	r19, Y+10	; 0x0a
 4de:	4b 85       	ldd	r20, Y+11	; 0x0b
 4e0:	5c 85       	ldd	r21, Y+12	; 0x0c
 4e2:	69 81       	ldd	r22, Y+1	; 0x01
 4e4:	7a 81       	ldd	r23, Y+2	; 0x02
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	9c 81       	ldd	r25, Y+4	; 0x04
 4ea:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
		float scaled_omega = omega_target * scale_factor;
 4f2:	c5 01       	movw	r24, r10
 4f4:	b4 01       	movw	r22, r8
 4f6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 4fa:	6b 01       	movw	r12, r22
 4fc:	7c 01       	movw	r14, r24
		
		if (use_trapezoid) {
 4fe:	00 23       	and	r16, r16
 500:	39 f0       	breq	.+14     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
			ramp_up_trapezoid(scaled_omega);
 502:	0e 94 09 04 	call	0x812	; 0x812 <ramp_up_trapezoid>
			ramp_down_trapezoid(scaled_omega);
 506:	c7 01       	movw	r24, r14
 508:	b6 01       	movw	r22, r12
 50a:	0e 94 49 04 	call	0x892	; 0x892 <ramp_down_trapezoid>
 50e:	af c0       	rjmp	.+350    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
			} else {
			ramp_up_scurve(scaled_omega);
 510:	0e 94 86 03 	call	0x70c	; 0x70c <ramp_up_scurve>
			ramp_down_scurve(scaled_omega);
 514:	c7 01       	movw	r24, r14
 516:	b6 01       	movw	r22, r12
 518:	0e 94 c8 03 	call	0x790	; 0x790 <ramp_down_scurve>
 51c:	a8 c0       	rjmp	.+336    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
		return;
	}
	
	// Normal turn for larger angles
	// Calculate ramp steps inline
	float ramp_wheel_rotations = accel_distance / wheel_circ;
 51e:	22 ea       	ldi	r18, 0xA2	; 162
 520:	3b ea       	ldi	r19, 0xAB	; 171
 522:	4a ec       	ldi	r20, 0xCA	; 202
 524:	5e e3       	ldi	r21, 0x3E	; 62
 526:	6d 81       	ldd	r22, Y+5	; 0x05
 528:	7e 81       	ldd	r23, Y+6	; 0x06
 52a:	8f 81       	ldd	r24, Y+7	; 0x07
 52c:	98 85       	ldd	r25, Y+8	; 0x08
 52e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
	float ramp_motor_rotations = ramp_wheel_rotations * GEAR_RATIO;
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e2       	ldi	r20, 0x20	; 32
 538:	51 e4       	ldi	r21, 0x41	; 65
 53a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
	uint32_t ramp_steps = (uint32_t)(ramp_motor_rotations * STEPS_PER_REV);
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	48 e4       	ldi	r20, 0x48	; 72
 544:	54 e4       	ldi	r21, 0x44	; 68
 546:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 54a:	0e 94 19 06 	call	0xc32	; 0xc32 <__fixunssfsi>
	
	uint32_t cruise_steps = total_steps - (2 * ramp_steps);
 54e:	dc 01       	movw	r26, r24
 550:	cb 01       	movw	r24, r22
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	aa 1f       	adc	r26, r26
 558:	bb 1f       	adc	r27, r27
 55a:	73 01       	movw	r14, r6
 55c:	62 01       	movw	r12, r4
 55e:	c8 1a       	sub	r12, r24
 560:	d9 0a       	sbc	r13, r25
 562:	ea 0a       	sbc	r14, r26
 564:	fb 0a       	sbc	r15, r27
	
	// Reset step counters
	motor1_steps = 0;
 566:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor1_steps>
 56a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <motor1_steps+0x1>
 56e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <motor1_steps+0x2>
 572:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <motor1_steps+0x3>
	motor2_steps = 0;
 576:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 57a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 57e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 582:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	// Ramp Up
	if (use_trapezoid) {
 586:	00 23       	and	r16, r16
 588:	29 f0       	breq	.+10     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
		ramp_up_trapezoid(omega_target);
 58a:	c5 01       	movw	r24, r10
 58c:	b4 01       	movw	r22, r8
 58e:	0e 94 09 04 	call	0x812	; 0x812 <ramp_up_trapezoid>
 592:	04 c0       	rjmp	.+8      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
		} else {
		ramp_up_scurve(omega_target);
 594:	c5 01       	movw	r24, r10
 596:	b4 01       	movw	r22, r8
 598:	0e 94 86 03 	call	0x70c	; 0x70c <ramp_up_scurve>
	}
	
	// Cruise phase with proper step counting
	set_angular_velocity_motor1(omega_target);
 59c:	c5 01       	movw	r24, r10
 59e:	b4 01       	movw	r22, r8
 5a0:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 5a4:	c5 01       	movw	r24, r10
 5a6:	b4 01       	movw	r22, r8
 5a8:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
	
	while (motor1_steps < cruise_steps && motor2_steps < cruise_steps) {
 5ac:	30 c0       	rjmp	.+96     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
		if (TIFR1 & (1 << OCF1A)) {
 5ae:	b1 9b       	sbis	0x16, 1	; 22
 5b0:	16 c0       	rjmp	.+44     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
			TIFR1 |= (1 << OCF1A);
 5b2:	86 b3       	in	r24, 0x16	; 22
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	86 bb       	out	0x16, r24	; 22
			motor1_steps++;
 5b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 5bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 5c0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 5c4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	a1 1d       	adc	r26, r1
 5cc:	b1 1d       	adc	r27, r1
 5ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor1_steps>
 5d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <motor1_steps+0x1>
 5d6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <motor1_steps+0x2>
 5da:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <motor1_steps+0x3>
		}
		if (TIFR3 & (1 << OCF3A)) {
 5de:	c1 9b       	sbis	0x18, 1	; 24
 5e0:	16 c0       	rjmp	.+44     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
			TIFR3 |= (1 << OCF3A);
 5e2:	88 b3       	in	r24, 0x18	; 24
 5e4:	82 60       	ori	r24, 0x02	; 2
 5e6:	88 bb       	out	0x18, r24	; 24
			motor2_steps++;
 5e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	a1 1d       	adc	r26, r1
 5fc:	b1 1d       	adc	r27, r1
 5fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 602:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 606:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 60a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	// Cruise phase with proper step counting
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);
	
	while (motor1_steps < cruise_steps && motor2_steps < cruise_steps) {
 60e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 612:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 616:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 61a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 61e:	8c 15       	cp	r24, r12
 620:	9d 05       	cpc	r25, r13
 622:	ae 05       	cpc	r26, r14
 624:	bf 05       	cpc	r27, r15
 626:	70 f4       	brcc	.+28     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 628:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 62c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 630:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 634:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 638:	8c 15       	cp	r24, r12
 63a:	9d 05       	cpc	r25, r13
 63c:	ae 05       	cpc	r26, r14
 63e:	bf 05       	cpc	r27, r15
 640:	08 f4       	brcc	.+2      	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 642:	b5 cf       	rjmp	.-150    	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
			motor2_steps++;
		}
	}
	
	// Ramp Down
	if (use_trapezoid) {
 644:	00 23       	and	r16, r16
 646:	29 f0       	breq	.+10     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
		ramp_down_trapezoid(omega_target);
 648:	c5 01       	movw	r24, r10
 64a:	b4 01       	movw	r22, r8
 64c:	0e 94 49 04 	call	0x892	; 0x892 <ramp_down_trapezoid>
 650:	04 c0       	rjmp	.+8      	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
		} else {
		ramp_down_scurve(omega_target);
 652:	c5 01       	movw	r24, r10
 654:	b4 01       	movw	r22, r8
 656:	0e 94 c8 03 	call	0x790	; 0x790 <ramp_down_scurve>
	}
	
	// Stop motors
	set_angular_velocity_motor1(0);
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	cb 01       	movw	r24, r22
 660:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	cb 01       	movw	r24, r22
 66a:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
}
 66e:	2c 96       	adiw	r28, 0x0c	; 12
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	ef 90       	pop	r14
 684:	df 90       	pop	r13
 686:	cf 90       	pop	r12
 688:	bf 90       	pop	r11
 68a:	af 90       	pop	r10
 68c:	9f 90       	pop	r9
 68e:	8f 90       	pop	r8
 690:	7f 90       	pop	r7
 692:	6f 90       	pop	r6
 694:	5f 90       	pop	r5
 696:	4f 90       	pop	r4
 698:	08 95       	ret

0000069a <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 69a:	8f 92       	push	r8
 69c:	9f 92       	push	r9
 69e:	af 92       	push	r10
 6a0:	bf 92       	push	r11
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	6b 01       	movw	r12, r22
 6ac:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	40 e4       	ldi	r20, 0x40	; 64
 6b4:	50 e4       	ldi	r21, 0x40	; 64
 6b6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 6ba:	9b 01       	movw	r18, r22
 6bc:	ac 01       	movw	r20, r24
 6be:	c7 01       	movw	r24, r14
 6c0:	b6 01       	movw	r22, r12
 6c2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 6c6:	4b 01       	movw	r8, r22
 6c8:	5c 01       	movw	r10, r24
 6ca:	a7 01       	movw	r20, r14
 6cc:	96 01       	movw	r18, r12
 6ce:	c7 01       	movw	r24, r14
 6d0:	b6 01       	movw	r22, r12
 6d2:	0e 94 36 05 	call	0xa6c	; 0xa6c <__addsf3>
 6d6:	9b 01       	movw	r18, r22
 6d8:	ac 01       	movw	r20, r24
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 6e2:	9b 01       	movw	r18, r22
 6e4:	ac 01       	movw	r20, r24
 6e6:	c7 01       	movw	r24, r14
 6e8:	b6 01       	movw	r22, r12
 6ea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	c5 01       	movw	r24, r10
 6f4:	b4 01       	movw	r22, r8
 6f6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__subsf3>
}
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	cf 90       	pop	r12
 702:	bf 90       	pop	r11
 704:	af 90       	pop	r10
 706:	9f 90       	pop	r9
 708:	8f 90       	pop	r8
 70a:	08 95       	ret

0000070c <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 70c:	8f 92       	push	r8
 70e:	9f 92       	push	r9
 710:	af 92       	push	r10
 712:	bf 92       	push	r11
 714:	cf 92       	push	r12
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	4b 01       	movw	r8, r22
 722:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 724:	c1 e0       	ldi	r28, 0x01	; 1
 726:	d0 e0       	ldi	r29, 0x00	; 0
 728:	25 c0       	rjmp	.+74     	; 0x774 <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 72a:	be 01       	movw	r22, r28
 72c:	0d 2e       	mov	r0, r29
 72e:	00 0c       	add	r0, r0
 730:	88 0b       	sbc	r24, r24
 732:	99 0b       	sbc	r25, r25
 734:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	48 e4       	ldi	r20, 0x48	; 72
 73e:	52 e4       	ldi	r21, 0x42	; 66
 740:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 744:	0e 94 4d 03 	call	0x69a	; 0x69a <s_curve_profile>
 748:	a5 01       	movw	r20, r10
 74a:	94 01       	movw	r18, r8
 74c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 750:	6b 01       	movw	r12, r22
 752:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 754:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 758:	c7 01       	movw	r24, r14
 75a:	b6 01       	movw	r22, r12
 75c:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 760:	2f ef       	ldi	r18, 0xFF	; 255
 762:	80 e7       	ldi	r24, 0x70	; 112
 764:	92 e0       	ldi	r25, 0x02	; 2
 766:	21 50       	subi	r18, 0x01	; 1
 768:	80 40       	sbci	r24, 0x00	; 0
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <ramp_up_scurve+0x5a>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <ramp_up_scurve+0x64>
 770:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 772:	21 96       	adiw	r28, 0x01	; 1
 774:	c3 33       	cpi	r28, 0x33	; 51
 776:	d1 05       	cpc	r29, r1
 778:	c4 f2       	brlt	.-80     	; 0x72a <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	df 90       	pop	r13
 784:	cf 90       	pop	r12
 786:	bf 90       	pop	r11
 788:	af 90       	pop	r10
 78a:	9f 90       	pop	r9
 78c:	8f 90       	pop	r8
 78e:	08 95       	ret

00000790 <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 790:	8f 92       	push	r8
 792:	9f 92       	push	r9
 794:	af 92       	push	r10
 796:	bf 92       	push	r11
 798:	cf 92       	push	r12
 79a:	df 92       	push	r13
 79c:	ef 92       	push	r14
 79e:	ff 92       	push	r15
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	4b 01       	movw	r8, r22
 7a6:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 7a8:	c1 e3       	ldi	r28, 0x31	; 49
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
 7ac:	25 c0       	rjmp	.+74     	; 0x7f8 <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 7ae:	be 01       	movw	r22, r28
 7b0:	0d 2e       	mov	r0, r29
 7b2:	00 0c       	add	r0, r0
 7b4:	88 0b       	sbc	r24, r24
 7b6:	99 0b       	sbc	r25, r25
 7b8:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	48 e4       	ldi	r20, 0x48	; 72
 7c2:	52 e4       	ldi	r21, 0x42	; 66
 7c4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 7c8:	0e 94 4d 03 	call	0x69a	; 0x69a <s_curve_profile>
 7cc:	a5 01       	movw	r20, r10
 7ce:	94 01       	movw	r18, r8
 7d0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 7d4:	6b 01       	movw	r12, r22
 7d6:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 7d8:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 7dc:	c7 01       	movw	r24, r14
 7de:	b6 01       	movw	r22, r12
 7e0:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
 7e4:	2f ef       	ldi	r18, 0xFF	; 255
 7e6:	80 e7       	ldi	r24, 0x70	; 112
 7e8:	92 e0       	ldi	r25, 0x02	; 2
 7ea:	21 50       	subi	r18, 0x01	; 1
 7ec:	80 40       	sbci	r24, 0x00	; 0
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <ramp_down_scurve+0x5a>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <ramp_down_scurve+0x64>
 7f4:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 7f6:	21 97       	sbiw	r28, 0x01	; 1
 7f8:	dd 23       	and	r29, r29
 7fa:	cc f6       	brge	.-78     	; 0x7ae <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	ff 90       	pop	r15
 802:	ef 90       	pop	r14
 804:	df 90       	pop	r13
 806:	cf 90       	pop	r12
 808:	bf 90       	pop	r11
 80a:	af 90       	pop	r10
 80c:	9f 90       	pop	r9
 80e:	8f 90       	pop	r8
 810:	08 95       	ret

00000812 <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 812:	8f 92       	push	r8
 814:	9f 92       	push	r9
 816:	af 92       	push	r10
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	4b 01       	movw	r8, r22
 828:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 82a:	c1 e0       	ldi	r28, 0x01	; 1
 82c:	d0 e0       	ldi	r29, 0x00	; 0
 82e:	23 c0       	rjmp	.+70     	; 0x876 <ramp_up_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 830:	be 01       	movw	r22, r28
 832:	0d 2e       	mov	r0, r29
 834:	00 0c       	add	r0, r0
 836:	88 0b       	sbc	r24, r24
 838:	99 0b       	sbc	r25, r25
 83a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 83e:	a5 01       	movw	r20, r10
 840:	94 01       	movw	r18, r8
 842:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 846:	20 e0       	ldi	r18, 0x00	; 0
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	48 e4       	ldi	r20, 0x48	; 72
 84c:	52 e4       	ldi	r21, 0x42	; 66
 84e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 852:	6b 01       	movw	r12, r22
 854:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 856:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 85a:	c7 01       	movw	r24, r14
 85c:	b6 01       	movw	r22, r12
 85e:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
 862:	2f ef       	ldi	r18, 0xFF	; 255
 864:	80 e7       	ldi	r24, 0x70	; 112
 866:	92 e0       	ldi	r25, 0x02	; 2
 868:	21 50       	subi	r18, 0x01	; 1
 86a:	80 40       	sbci	r24, 0x00	; 0
 86c:	90 40       	sbci	r25, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <ramp_up_trapezoid+0x56>
 870:	00 c0       	rjmp	.+0      	; 0x872 <ramp_up_trapezoid+0x60>
 872:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 874:	21 96       	adiw	r28, 0x01	; 1
 876:	c3 33       	cpi	r28, 0x33	; 51
 878:	d1 05       	cpc	r29, r1
 87a:	d4 f2       	brlt	.-76     	; 0x830 <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	9f 90       	pop	r9
 88e:	8f 90       	pop	r8
 890:	08 95       	ret

00000892 <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 892:	8f 92       	push	r8
 894:	9f 92       	push	r9
 896:	af 92       	push	r10
 898:	bf 92       	push	r11
 89a:	cf 92       	push	r12
 89c:	df 92       	push	r13
 89e:	ef 92       	push	r14
 8a0:	ff 92       	push	r15
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	4b 01       	movw	r8, r22
 8a8:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 8aa:	c1 e3       	ldi	r28, 0x31	; 49
 8ac:	d0 e0       	ldi	r29, 0x00	; 0
 8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 8b0:	be 01       	movw	r22, r28
 8b2:	0d 2e       	mov	r0, r29
 8b4:	00 0c       	add	r0, r0
 8b6:	88 0b       	sbc	r24, r24
 8b8:	99 0b       	sbc	r25, r25
 8ba:	0e 94 4a 06 	call	0xc94	; 0xc94 <__floatsisf>
 8be:	a5 01       	movw	r20, r10
 8c0:	94 01       	movw	r18, r8
 8c2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	48 e4       	ldi	r20, 0x48	; 72
 8cc:	52 e4       	ldi	r21, 0x42	; 66
 8ce:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 8d2:	6b 01       	movw	r12, r22
 8d4:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 8d6:	0e 94 17 05 	call	0xa2e	; 0xa2e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 8da:	c7 01       	movw	r24, r14
 8dc:	b6 01       	movw	r22, r12
 8de:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_angular_velocity_motor2>
 8e2:	2f ef       	ldi	r18, 0xFF	; 255
 8e4:	80 e7       	ldi	r24, 0x70	; 112
 8e6:	92 e0       	ldi	r25, 0x02	; 2
 8e8:	21 50       	subi	r18, 0x01	; 1
 8ea:	80 40       	sbci	r24, 0x00	; 0
 8ec:	90 40       	sbci	r25, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <ramp_down_trapezoid+0x56>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <ramp_down_trapezoid+0x60>
 8f2:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 8f4:	21 97       	sbiw	r28, 0x01	; 1
 8f6:	dd 23       	and	r29, r29
 8f8:	dc f6       	brge	.-74     	; 0x8b0 <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	ff 90       	pop	r15
 900:	ef 90       	pop	r14
 902:	df 90       	pop	r13
 904:	cf 90       	pop	r12
 906:	bf 90       	pop	r11
 908:	af 90       	pop	r10
 90a:	9f 90       	pop	r9
 90c:	8f 90       	pop	r8
 90e:	08 95       	ret

00000910 <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 910:	2b ee       	ldi	r18, 0xEB	; 235
 912:	39 ec       	ldi	r19, 0xC9	; 201
 914:	48 e1       	ldi	r20, 0x18	; 24
 916:	51 e4       	ldi	r21, 0x41	; 65
 918:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
}
 91c:	08 95       	ret

0000091e <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 91e:	cf 92       	push	r12
 920:	df 92       	push	r13
 922:	ef 92       	push	r14
 924:	ff 92       	push	r15
 926:	6b 01       	movw	r12, r22
 928:	7c 01       	movw	r14, r24
	if (rpm <= 0) {
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	a9 01       	movw	r20, r18
 930:	0e 94 a2 05 	call	0xb44	; 0xb44 <__cmpsf2>
 934:	18 16       	cp	r1, r24
 936:	0c f0       	brlt	.+2      	; 0x93a <rpm_to_ocr+0x1c>
 938:	40 c0       	rjmp	.+128    	; 0x9ba <rpm_to_ocr+0x9c>
		return 0;  // Return 0 to indicate motor should be stopped
	}
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	48 e4       	ldi	r20, 0x48	; 72
 940:	54 e4       	ldi	r21, 0x44	; 68
 942:	c7 01       	movw	r24, r14
 944:	b6 01       	movw	r22, r12
 946:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	40 e7       	ldi	r20, 0x70	; 112
 950:	52 e4       	ldi	r21, 0x42	; 66
 952:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 956:	6b 01       	movw	r12, r22
 958:	7c 01       	movw	r14, r24
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	a9 01       	movw	r20, r18
 960:	0e 94 a2 05 	call	0xb44	; 0xb44 <__cmpsf2>
 964:	18 16       	cp	r1, r24
 966:	64 f5       	brge	.+88     	; 0x9c0 <rpm_to_ocr+0xa2>
		return 0;
	}
	
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	51 e4       	ldi	r21, 0x41	; 65
 970:	c7 01       	movw	r24, r14
 972:	b6 01       	movw	r22, r12
 974:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__mulsf3>
 978:	9b 01       	movw	r18, r22
 97a:	ac 01       	movw	r20, r24
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	74 e2       	ldi	r23, 0x24	; 36
 980:	84 e7       	ldi	r24, 0x74	; 116
 982:	9b e4       	ldi	r25, 0x4B	; 75
 984:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__divsf3>
 988:	6b 01       	movw	r12, r22
 98a:	7c 01       	movw	r14, r24
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	3f ef       	ldi	r19, 0xFF	; 255
 990:	4f e7       	ldi	r20, 0x7F	; 127
 992:	57 e4       	ldi	r21, 0x47	; 71
 994:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__gesf2>
 998:	18 16       	cp	r1, r24
 99a:	4c f4       	brge	.+18     	; 0x9ae <rpm_to_ocr+0x90>
 99c:	0f 2e       	mov	r0, r31
 99e:	c1 2c       	mov	r12, r1
 9a0:	dd 24       	eor	r13, r13
 9a2:	da 94       	dec	r13
 9a4:	ff e7       	ldi	r31, 0x7F	; 127
 9a6:	ef 2e       	mov	r14, r31
 9a8:	f7 e4       	ldi	r31, 0x47	; 71
 9aa:	ff 2e       	mov	r15, r31
 9ac:	f0 2d       	mov	r31, r0
	
	return (uint16_t)ocr;
 9ae:	c7 01       	movw	r24, r14
 9b0:	b6 01       	movw	r22, r12
 9b2:	0e 94 19 06 	call	0xc32	; 0xc32 <__fixunssfsi>
 9b6:	cb 01       	movw	r24, r22
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <rpm_to_ocr+0xa6>
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) {
		return 0;  // Return 0 to indicate motor should be stopped
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <rpm_to_ocr+0xa6>
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
		return 0;
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
	
	return (uint16_t)ocr;
}
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	08 95       	ret

000009ce <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	if (ocr_value == 0) {
 9ce:	00 97       	sbiw	r24, 0x00	; 0
 9d0:	59 f4       	brne	.+22     	; 0x9e8 <setup_timer1+0x1a>
		// Stop the motor by disabling output compare
		TCCR1A &= ~(1 << COM1A0);
 9d2:	e0 e8       	ldi	r30, 0x80	; 128
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	8f 7b       	andi	r24, 0xBF	; 191
 9da:	80 83       	st	Z, r24
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Stop timer
 9dc:	e1 e8       	ldi	r30, 0x81	; 129
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	88 7f       	andi	r24, 0xF8	; 248
 9e4:	80 83       	st	Z, r24
 9e6:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR1A = (1 << COM1A0);  // Toggle OC1A on compare match
 9e8:	20 e4       	ldi	r18, 0x40	; 64
 9ea:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << WGM12) | (1 << CS11);  // CTC mode, prescaler 8
 9ee:	2a e0       	ldi	r18, 0x0A	; 10
 9f0:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		OCR1A = ocr_value;
 9f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 9f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 9fc:	08 95       	ret

000009fe <setup_timer3>:
	}
}

void setup_timer3(uint16_t ocr_value) {
	if (ocr_value == 0) {
 9fe:	00 97       	sbiw	r24, 0x00	; 0
 a00:	59 f4       	brne	.+22     	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
		// Stop the motor by disabling output compare
		TCCR3A &= ~(1 << COM3A0);
 a02:	e0 e9       	ldi	r30, 0x90	; 144
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8f 7b       	andi	r24, 0xBF	; 191
 a0a:	80 83       	st	Z, r24
		TCCR3B &= ~((1 << CS32) | (1 << CS31) | (1 << CS30)); // Stop timer
 a0c:	e1 e9       	ldi	r30, 0x91	; 145
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	88 7f       	andi	r24, 0xF8	; 248
 a14:	80 83       	st	Z, r24
 a16:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR3A = (1 << COM3A0);  // Toggle OC3A on compare match
 a18:	20 e4       	ldi	r18, 0x40	; 64
 a1a:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
		TCCR3B = (1 << WGM32) | (1 << CS31);  // CTC mode, prescaler 8
 a1e:	2a e0       	ldi	r18, 0x0A	; 10
 a20:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
		OCR3A = ocr_value;
 a24:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 a28:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 a2c:	08 95       	ret

00000a2e <set_angular_velocity_motor1>:
	}
}

void set_angular_velocity_motor1(float omega) {
	target_velocity_motor1 = omega;  // Store target velocity
 a2e:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <target_velocity_motor1>
 a32:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <target_velocity_motor1+0x1>
 a36:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <target_velocity_motor1+0x2>
 a3a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <target_velocity_motor1+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 a3e:	0e 94 88 04 	call	0x910	; 0x910 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 a42:	0e 94 8f 04 	call	0x91e	; 0x91e <rpm_to_ocr>
	setup_timer1(ocr);
 a46:	0e 94 e7 04 	call	0x9ce	; 0x9ce <setup_timer1>
 a4a:	08 95       	ret

00000a4c <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	target_velocity_motor2 = omega;  // Store target velocity
 a4c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <target_velocity_motor2>
 a50:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <target_velocity_motor2+0x1>
 a54:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <target_velocity_motor2+0x2>
 a58:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <target_velocity_motor2+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 a5c:	0e 94 88 04 	call	0x910	; 0x910 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 a60:	0e 94 8f 04 	call	0x91e	; 0x91e <rpm_to_ocr>
	setup_timer3(ocr);
 a64:	0e 94 ff 04 	call	0x9fe	; 0x9fe <setup_timer3>
 a68:	08 95       	ret

00000a6a <__subsf3>:
 a6a:	50 58       	subi	r21, 0x80	; 128

00000a6c <__addsf3>:
 a6c:	bb 27       	eor	r27, r27
 a6e:	aa 27       	eor	r26, r26
 a70:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__addsf3x>
 a74:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
 a78:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
 a7c:	38 f0       	brcs	.+14     	; 0xa8c <__addsf3+0x20>
 a7e:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
 a82:	20 f0       	brcs	.+8      	; 0xa8c <__addsf3+0x20>
 a84:	39 f4       	brne	.+14     	; 0xa94 <__addsf3+0x28>
 a86:	9f 3f       	cpi	r25, 0xFF	; 255
 a88:	19 f4       	brne	.+6      	; 0xa90 <__addsf3+0x24>
 a8a:	26 f4       	brtc	.+8      	; 0xa94 <__addsf3+0x28>
 a8c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>
 a90:	0e f4       	brtc	.+2      	; 0xa94 <__addsf3+0x28>
 a92:	e0 95       	com	r30
 a94:	e7 fb       	bst	r30, 7
 a96:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>

00000a9a <__addsf3x>:
 a9a:	e9 2f       	mov	r30, r25
 a9c:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
 aa0:	58 f3       	brcs	.-42     	; 0xa78 <__addsf3+0xc>
 aa2:	ba 17       	cp	r27, r26
 aa4:	62 07       	cpc	r22, r18
 aa6:	73 07       	cpc	r23, r19
 aa8:	84 07       	cpc	r24, r20
 aaa:	95 07       	cpc	r25, r21
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__addsf3x+0x1c>
 aae:	79 f4       	brne	.+30     	; 0xace <__addsf3x+0x34>
 ab0:	a6 f5       	brtc	.+104    	; 0xb1a <__stack+0x1b>
 ab2:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_zero>
 ab6:	0e f4       	brtc	.+2      	; 0xaba <__addsf3x+0x20>
 ab8:	e0 95       	com	r30
 aba:	0b 2e       	mov	r0, r27
 abc:	ba 2f       	mov	r27, r26
 abe:	a0 2d       	mov	r26, r0
 ac0:	0b 01       	movw	r0, r22
 ac2:	b9 01       	movw	r22, r18
 ac4:	90 01       	movw	r18, r0
 ac6:	0c 01       	movw	r0, r24
 ac8:	ca 01       	movw	r24, r20
 aca:	a0 01       	movw	r20, r0
 acc:	11 24       	eor	r1, r1
 ace:	ff 27       	eor	r31, r31
 ad0:	59 1b       	sub	r21, r25
 ad2:	99 f0       	breq	.+38     	; 0xafa <__addsf3x+0x60>
 ad4:	59 3f       	cpi	r21, 0xF9	; 249
 ad6:	50 f4       	brcc	.+20     	; 0xaec <__addsf3x+0x52>
 ad8:	50 3e       	cpi	r21, 0xE0	; 224
 ada:	68 f1       	brcs	.+90     	; 0xb36 <__stack+0x37>
 adc:	1a 16       	cp	r1, r26
 ade:	f0 40       	sbci	r31, 0x00	; 0
 ae0:	a2 2f       	mov	r26, r18
 ae2:	23 2f       	mov	r18, r19
 ae4:	34 2f       	mov	r19, r20
 ae6:	44 27       	eor	r20, r20
 ae8:	58 5f       	subi	r21, 0xF8	; 248
 aea:	f3 cf       	rjmp	.-26     	; 0xad2 <__addsf3x+0x38>
 aec:	46 95       	lsr	r20
 aee:	37 95       	ror	r19
 af0:	27 95       	ror	r18
 af2:	a7 95       	ror	r26
 af4:	f0 40       	sbci	r31, 0x00	; 0
 af6:	53 95       	inc	r21
 af8:	c9 f7       	brne	.-14     	; 0xaec <__addsf3x+0x52>
 afa:	7e f4       	brtc	.+30     	; 0xb1a <__stack+0x1b>
 afc:	1f 16       	cp	r1, r31
 afe:	ba 0b       	sbc	r27, r26
 b00:	62 0b       	sbc	r22, r18
 b02:	73 0b       	sbc	r23, r19
 b04:	84 0b       	sbc	r24, r20
 b06:	ba f0       	brmi	.+46     	; 0xb36 <__stack+0x37>
 b08:	91 50       	subi	r25, 0x01	; 1
 b0a:	a1 f0       	breq	.+40     	; 0xb34 <__stack+0x35>
 b0c:	ff 0f       	add	r31, r31
 b0e:	bb 1f       	adc	r27, r27
 b10:	66 1f       	adc	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	c2 f7       	brpl	.-16     	; 0xb08 <__stack+0x9>
 b18:	0e c0       	rjmp	.+28     	; 0xb36 <__stack+0x37>
 b1a:	ba 0f       	add	r27, r26
 b1c:	62 1f       	adc	r22, r18
 b1e:	73 1f       	adc	r23, r19
 b20:	84 1f       	adc	r24, r20
 b22:	48 f4       	brcc	.+18     	; 0xb36 <__stack+0x37>
 b24:	87 95       	ror	r24
 b26:	77 95       	ror	r23
 b28:	67 95       	ror	r22
 b2a:	b7 95       	ror	r27
 b2c:	f7 95       	ror	r31
 b2e:	9e 3f       	cpi	r25, 0xFE	; 254
 b30:	08 f0       	brcs	.+2      	; 0xb34 <__stack+0x35>
 b32:	b0 cf       	rjmp	.-160    	; 0xa94 <__addsf3+0x28>
 b34:	93 95       	inc	r25
 b36:	88 0f       	add	r24, r24
 b38:	08 f0       	brcs	.+2      	; 0xb3c <__stack+0x3d>
 b3a:	99 27       	eor	r25, r25
 b3c:	ee 0f       	add	r30, r30
 b3e:	97 95       	ror	r25
 b40:	87 95       	ror	r24
 b42:	08 95       	ret

00000b44 <__cmpsf2>:
 b44:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_cmp>
 b48:	08 f4       	brcc	.+2      	; 0xb4c <__cmpsf2+0x8>
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	08 95       	ret

00000b4e <__divsf3>:
 b4e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__divsf3x>
 b52:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
 b56:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
 b5a:	58 f0       	brcs	.+22     	; 0xb72 <__divsf3+0x24>
 b5c:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
 b60:	40 f0       	brcs	.+16     	; 0xb72 <__divsf3+0x24>
 b62:	29 f4       	brne	.+10     	; 0xb6e <__divsf3+0x20>
 b64:	5f 3f       	cpi	r21, 0xFF	; 255
 b66:	29 f0       	breq	.+10     	; 0xb72 <__divsf3+0x24>
 b68:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
 b6c:	51 11       	cpse	r21, r1
 b6e:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
 b72:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>

00000b76 <__divsf3x>:
 b76:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
 b7a:	68 f3       	brcs	.-38     	; 0xb56 <__divsf3+0x8>

00000b7c <__divsf3_pse>:
 b7c:	99 23       	and	r25, r25
 b7e:	b1 f3       	breq	.-20     	; 0xb6c <__divsf3+0x1e>
 b80:	55 23       	and	r21, r21
 b82:	91 f3       	breq	.-28     	; 0xb68 <__divsf3+0x1a>
 b84:	95 1b       	sub	r25, r21
 b86:	55 0b       	sbc	r21, r21
 b88:	bb 27       	eor	r27, r27
 b8a:	aa 27       	eor	r26, r26
 b8c:	62 17       	cp	r22, r18
 b8e:	73 07       	cpc	r23, r19
 b90:	84 07       	cpc	r24, r20
 b92:	38 f0       	brcs	.+14     	; 0xba2 <__divsf3_pse+0x26>
 b94:	9f 5f       	subi	r25, 0xFF	; 255
 b96:	5f 4f       	sbci	r21, 0xFF	; 255
 b98:	22 0f       	add	r18, r18
 b9a:	33 1f       	adc	r19, r19
 b9c:	44 1f       	adc	r20, r20
 b9e:	aa 1f       	adc	r26, r26
 ba0:	a9 f3       	breq	.-22     	; 0xb8c <__divsf3_pse+0x10>
 ba2:	35 d0       	rcall	.+106    	; 0xc0e <__divsf3_pse+0x92>
 ba4:	0e 2e       	mov	r0, r30
 ba6:	3a f0       	brmi	.+14     	; 0xbb6 <__divsf3_pse+0x3a>
 ba8:	e0 e8       	ldi	r30, 0x80	; 128
 baa:	32 d0       	rcall	.+100    	; 0xc10 <__divsf3_pse+0x94>
 bac:	91 50       	subi	r25, 0x01	; 1
 bae:	50 40       	sbci	r21, 0x00	; 0
 bb0:	e6 95       	lsr	r30
 bb2:	00 1c       	adc	r0, r0
 bb4:	ca f7       	brpl	.-14     	; 0xba8 <__divsf3_pse+0x2c>
 bb6:	2b d0       	rcall	.+86     	; 0xc0e <__divsf3_pse+0x92>
 bb8:	fe 2f       	mov	r31, r30
 bba:	29 d0       	rcall	.+82     	; 0xc0e <__divsf3_pse+0x92>
 bbc:	66 0f       	add	r22, r22
 bbe:	77 1f       	adc	r23, r23
 bc0:	88 1f       	adc	r24, r24
 bc2:	bb 1f       	adc	r27, r27
 bc4:	26 17       	cp	r18, r22
 bc6:	37 07       	cpc	r19, r23
 bc8:	48 07       	cpc	r20, r24
 bca:	ab 07       	cpc	r26, r27
 bcc:	b0 e8       	ldi	r27, 0x80	; 128
 bce:	09 f0       	breq	.+2      	; 0xbd2 <__divsf3_pse+0x56>
 bd0:	bb 0b       	sbc	r27, r27
 bd2:	80 2d       	mov	r24, r0
 bd4:	bf 01       	movw	r22, r30
 bd6:	ff 27       	eor	r31, r31
 bd8:	93 58       	subi	r25, 0x83	; 131
 bda:	5f 4f       	sbci	r21, 0xFF	; 255
 bdc:	3a f0       	brmi	.+14     	; 0xbec <__divsf3_pse+0x70>
 bde:	9e 3f       	cpi	r25, 0xFE	; 254
 be0:	51 05       	cpc	r21, r1
 be2:	78 f0       	brcs	.+30     	; 0xc02 <__divsf3_pse+0x86>
 be4:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
 be8:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
 bec:	5f 3f       	cpi	r21, 0xFF	; 255
 bee:	e4 f3       	brlt	.-8      	; 0xbe8 <__divsf3_pse+0x6c>
 bf0:	98 3e       	cpi	r25, 0xE8	; 232
 bf2:	d4 f3       	brlt	.-12     	; 0xbe8 <__divsf3_pse+0x6c>
 bf4:	86 95       	lsr	r24
 bf6:	77 95       	ror	r23
 bf8:	67 95       	ror	r22
 bfa:	b7 95       	ror	r27
 bfc:	f7 95       	ror	r31
 bfe:	9f 5f       	subi	r25, 0xFF	; 255
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__divsf3_pse+0x78>
 c02:	88 0f       	add	r24, r24
 c04:	91 1d       	adc	r25, r1
 c06:	96 95       	lsr	r25
 c08:	87 95       	ror	r24
 c0a:	97 f9       	bld	r25, 7
 c0c:	08 95       	ret
 c0e:	e1 e0       	ldi	r30, 0x01	; 1
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	bb 1f       	adc	r27, r27
 c18:	62 17       	cp	r22, r18
 c1a:	73 07       	cpc	r23, r19
 c1c:	84 07       	cpc	r24, r20
 c1e:	ba 07       	cpc	r27, r26
 c20:	20 f0       	brcs	.+8      	; 0xc2a <__divsf3_pse+0xae>
 c22:	62 1b       	sub	r22, r18
 c24:	73 0b       	sbc	r23, r19
 c26:	84 0b       	sbc	r24, r20
 c28:	ba 0b       	sbc	r27, r26
 c2a:	ee 1f       	adc	r30, r30
 c2c:	88 f7       	brcc	.-30     	; 0xc10 <__divsf3_pse+0x94>
 c2e:	e0 95       	com	r30
 c30:	08 95       	ret

00000c32 <__fixunssfsi>:
 c32:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_splitA>
 c36:	88 f0       	brcs	.+34     	; 0xc5a <__fixunssfsi+0x28>
 c38:	9f 57       	subi	r25, 0x7F	; 127
 c3a:	98 f0       	brcs	.+38     	; 0xc62 <__fixunssfsi+0x30>
 c3c:	b9 2f       	mov	r27, r25
 c3e:	99 27       	eor	r25, r25
 c40:	b7 51       	subi	r27, 0x17	; 23
 c42:	b0 f0       	brcs	.+44     	; 0xc70 <__fixunssfsi+0x3e>
 c44:	e1 f0       	breq	.+56     	; 0xc7e <__fixunssfsi+0x4c>
 c46:	66 0f       	add	r22, r22
 c48:	77 1f       	adc	r23, r23
 c4a:	88 1f       	adc	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	1a f0       	brmi	.+6      	; 0xc56 <__fixunssfsi+0x24>
 c50:	ba 95       	dec	r27
 c52:	c9 f7       	brne	.-14     	; 0xc46 <__fixunssfsi+0x14>
 c54:	14 c0       	rjmp	.+40     	; 0xc7e <__fixunssfsi+0x4c>
 c56:	b1 30       	cpi	r27, 0x01	; 1
 c58:	91 f0       	breq	.+36     	; 0xc7e <__fixunssfsi+0x4c>
 c5a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_zero>
 c5e:	b1 e0       	ldi	r27, 0x01	; 1
 c60:	08 95       	ret
 c62:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_zero>
 c66:	67 2f       	mov	r22, r23
 c68:	78 2f       	mov	r23, r24
 c6a:	88 27       	eor	r24, r24
 c6c:	b8 5f       	subi	r27, 0xF8	; 248
 c6e:	39 f0       	breq	.+14     	; 0xc7e <__fixunssfsi+0x4c>
 c70:	b9 3f       	cpi	r27, 0xF9	; 249
 c72:	cc f3       	brlt	.-14     	; 0xc66 <__fixunssfsi+0x34>
 c74:	86 95       	lsr	r24
 c76:	77 95       	ror	r23
 c78:	67 95       	ror	r22
 c7a:	b3 95       	inc	r27
 c7c:	d9 f7       	brne	.-10     	; 0xc74 <__fixunssfsi+0x42>
 c7e:	3e f4       	brtc	.+14     	; 0xc8e <__fixunssfsi+0x5c>
 c80:	90 95       	com	r25
 c82:	80 95       	com	r24
 c84:	70 95       	com	r23
 c86:	61 95       	neg	r22
 c88:	7f 4f       	sbci	r23, 0xFF	; 255
 c8a:	8f 4f       	sbci	r24, 0xFF	; 255
 c8c:	9f 4f       	sbci	r25, 0xFF	; 255
 c8e:	08 95       	ret

00000c90 <__floatunsisf>:
 c90:	e8 94       	clt
 c92:	09 c0       	rjmp	.+18     	; 0xca6 <__floatsisf+0x12>

00000c94 <__floatsisf>:
 c94:	97 fb       	bst	r25, 7
 c96:	3e f4       	brtc	.+14     	; 0xca6 <__floatsisf+0x12>
 c98:	90 95       	com	r25
 c9a:	80 95       	com	r24
 c9c:	70 95       	com	r23
 c9e:	61 95       	neg	r22
 ca0:	7f 4f       	sbci	r23, 0xFF	; 255
 ca2:	8f 4f       	sbci	r24, 0xFF	; 255
 ca4:	9f 4f       	sbci	r25, 0xFF	; 255
 ca6:	99 23       	and	r25, r25
 ca8:	a9 f0       	breq	.+42     	; 0xcd4 <__floatsisf+0x40>
 caa:	f9 2f       	mov	r31, r25
 cac:	96 e9       	ldi	r25, 0x96	; 150
 cae:	bb 27       	eor	r27, r27
 cb0:	93 95       	inc	r25
 cb2:	f6 95       	lsr	r31
 cb4:	87 95       	ror	r24
 cb6:	77 95       	ror	r23
 cb8:	67 95       	ror	r22
 cba:	b7 95       	ror	r27
 cbc:	f1 11       	cpse	r31, r1
 cbe:	f8 cf       	rjmp	.-16     	; 0xcb0 <__floatsisf+0x1c>
 cc0:	fa f4       	brpl	.+62     	; 0xd00 <__floatsisf+0x6c>
 cc2:	bb 0f       	add	r27, r27
 cc4:	11 f4       	brne	.+4      	; 0xcca <__floatsisf+0x36>
 cc6:	60 ff       	sbrs	r22, 0
 cc8:	1b c0       	rjmp	.+54     	; 0xd00 <__floatsisf+0x6c>
 cca:	6f 5f       	subi	r22, 0xFF	; 255
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	16 c0       	rjmp	.+44     	; 0xd00 <__floatsisf+0x6c>
 cd4:	88 23       	and	r24, r24
 cd6:	11 f0       	breq	.+4      	; 0xcdc <__floatsisf+0x48>
 cd8:	96 e9       	ldi	r25, 0x96	; 150
 cda:	11 c0       	rjmp	.+34     	; 0xcfe <__floatsisf+0x6a>
 cdc:	77 23       	and	r23, r23
 cde:	21 f0       	breq	.+8      	; 0xce8 <__floatsisf+0x54>
 ce0:	9e e8       	ldi	r25, 0x8E	; 142
 ce2:	87 2f       	mov	r24, r23
 ce4:	76 2f       	mov	r23, r22
 ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <__floatsisf+0x5e>
 ce8:	66 23       	and	r22, r22
 cea:	71 f0       	breq	.+28     	; 0xd08 <__floatsisf+0x74>
 cec:	96 e8       	ldi	r25, 0x86	; 134
 cee:	86 2f       	mov	r24, r22
 cf0:	70 e0       	ldi	r23, 0x00	; 0
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	2a f0       	brmi	.+10     	; 0xd00 <__floatsisf+0x6c>
 cf6:	9a 95       	dec	r25
 cf8:	66 0f       	add	r22, r22
 cfa:	77 1f       	adc	r23, r23
 cfc:	88 1f       	adc	r24, r24
 cfe:	da f7       	brpl	.-10     	; 0xcf6 <__floatsisf+0x62>
 d00:	88 0f       	add	r24, r24
 d02:	96 95       	lsr	r25
 d04:	87 95       	ror	r24
 d06:	97 f9       	bld	r25, 7
 d08:	08 95       	ret

00000d0a <__fp_cmp>:
 d0a:	99 0f       	add	r25, r25
 d0c:	00 08       	sbc	r0, r0
 d0e:	55 0f       	add	r21, r21
 d10:	aa 0b       	sbc	r26, r26
 d12:	e0 e8       	ldi	r30, 0x80	; 128
 d14:	fe ef       	ldi	r31, 0xFE	; 254
 d16:	16 16       	cp	r1, r22
 d18:	17 06       	cpc	r1, r23
 d1a:	e8 07       	cpc	r30, r24
 d1c:	f9 07       	cpc	r31, r25
 d1e:	c0 f0       	brcs	.+48     	; 0xd50 <__fp_cmp+0x46>
 d20:	12 16       	cp	r1, r18
 d22:	13 06       	cpc	r1, r19
 d24:	e4 07       	cpc	r30, r20
 d26:	f5 07       	cpc	r31, r21
 d28:	98 f0       	brcs	.+38     	; 0xd50 <__fp_cmp+0x46>
 d2a:	62 1b       	sub	r22, r18
 d2c:	73 0b       	sbc	r23, r19
 d2e:	84 0b       	sbc	r24, r20
 d30:	95 0b       	sbc	r25, r21
 d32:	39 f4       	brne	.+14     	; 0xd42 <__fp_cmp+0x38>
 d34:	0a 26       	eor	r0, r26
 d36:	61 f0       	breq	.+24     	; 0xd50 <__fp_cmp+0x46>
 d38:	23 2b       	or	r18, r19
 d3a:	24 2b       	or	r18, r20
 d3c:	25 2b       	or	r18, r21
 d3e:	21 f4       	brne	.+8      	; 0xd48 <__fp_cmp+0x3e>
 d40:	08 95       	ret
 d42:	0a 26       	eor	r0, r26
 d44:	09 f4       	brne	.+2      	; 0xd48 <__fp_cmp+0x3e>
 d46:	a1 40       	sbci	r26, 0x01	; 1
 d48:	a6 95       	lsr	r26
 d4a:	8f ef       	ldi	r24, 0xFF	; 255
 d4c:	81 1d       	adc	r24, r1
 d4e:	81 1d       	adc	r24, r1
 d50:	08 95       	ret

00000d52 <__fp_inf>:
 d52:	97 f9       	bld	r25, 7
 d54:	9f 67       	ori	r25, 0x7F	; 127
 d56:	80 e8       	ldi	r24, 0x80	; 128
 d58:	70 e0       	ldi	r23, 0x00	; 0
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	08 95       	ret

00000d5e <__fp_nan>:
 d5e:	9f ef       	ldi	r25, 0xFF	; 255
 d60:	80 ec       	ldi	r24, 0xC0	; 192
 d62:	08 95       	ret

00000d64 <__fp_pscA>:
 d64:	00 24       	eor	r0, r0
 d66:	0a 94       	dec	r0
 d68:	16 16       	cp	r1, r22
 d6a:	17 06       	cpc	r1, r23
 d6c:	18 06       	cpc	r1, r24
 d6e:	09 06       	cpc	r0, r25
 d70:	08 95       	ret

00000d72 <__fp_pscB>:
 d72:	00 24       	eor	r0, r0
 d74:	0a 94       	dec	r0
 d76:	12 16       	cp	r1, r18
 d78:	13 06       	cpc	r1, r19
 d7a:	14 06       	cpc	r1, r20
 d7c:	05 06       	cpc	r0, r21
 d7e:	08 95       	ret

00000d80 <__fp_round>:
 d80:	09 2e       	mov	r0, r25
 d82:	03 94       	inc	r0
 d84:	00 0c       	add	r0, r0
 d86:	11 f4       	brne	.+4      	; 0xd8c <__fp_round+0xc>
 d88:	88 23       	and	r24, r24
 d8a:	52 f0       	brmi	.+20     	; 0xda0 <__fp_round+0x20>
 d8c:	bb 0f       	add	r27, r27
 d8e:	40 f4       	brcc	.+16     	; 0xda0 <__fp_round+0x20>
 d90:	bf 2b       	or	r27, r31
 d92:	11 f4       	brne	.+4      	; 0xd98 <__fp_round+0x18>
 d94:	60 ff       	sbrs	r22, 0
 d96:	04 c0       	rjmp	.+8      	; 0xda0 <__fp_round+0x20>
 d98:	6f 5f       	subi	r22, 0xFF	; 255
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255
 d9c:	8f 4f       	sbci	r24, 0xFF	; 255
 d9e:	9f 4f       	sbci	r25, 0xFF	; 255
 da0:	08 95       	ret

00000da2 <__fp_split3>:
 da2:	57 fd       	sbrc	r21, 7
 da4:	90 58       	subi	r25, 0x80	; 128
 da6:	44 0f       	add	r20, r20
 da8:	55 1f       	adc	r21, r21
 daa:	59 f0       	breq	.+22     	; 0xdc2 <__fp_splitA+0x10>
 dac:	5f 3f       	cpi	r21, 0xFF	; 255
 dae:	71 f0       	breq	.+28     	; 0xdcc <__fp_splitA+0x1a>
 db0:	47 95       	ror	r20

00000db2 <__fp_splitA>:
 db2:	88 0f       	add	r24, r24
 db4:	97 fb       	bst	r25, 7
 db6:	99 1f       	adc	r25, r25
 db8:	61 f0       	breq	.+24     	; 0xdd2 <__fp_splitA+0x20>
 dba:	9f 3f       	cpi	r25, 0xFF	; 255
 dbc:	79 f0       	breq	.+30     	; 0xddc <__fp_splitA+0x2a>
 dbe:	87 95       	ror	r24
 dc0:	08 95       	ret
 dc2:	12 16       	cp	r1, r18
 dc4:	13 06       	cpc	r1, r19
 dc6:	14 06       	cpc	r1, r20
 dc8:	55 1f       	adc	r21, r21
 dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <__fp_split3+0xe>
 dcc:	46 95       	lsr	r20
 dce:	f1 df       	rcall	.-30     	; 0xdb2 <__fp_splitA>
 dd0:	08 c0       	rjmp	.+16     	; 0xde2 <__fp_splitA+0x30>
 dd2:	16 16       	cp	r1, r22
 dd4:	17 06       	cpc	r1, r23
 dd6:	18 06       	cpc	r1, r24
 dd8:	99 1f       	adc	r25, r25
 dda:	f1 cf       	rjmp	.-30     	; 0xdbe <__fp_splitA+0xc>
 ddc:	86 95       	lsr	r24
 dde:	71 05       	cpc	r23, r1
 de0:	61 05       	cpc	r22, r1
 de2:	08 94       	sec
 de4:	08 95       	ret

00000de6 <__fp_zero>:
 de6:	e8 94       	clt

00000de8 <__fp_szero>:
 de8:	bb 27       	eor	r27, r27
 dea:	66 27       	eor	r22, r22
 dec:	77 27       	eor	r23, r23
 dee:	cb 01       	movw	r24, r22
 df0:	97 f9       	bld	r25, 7
 df2:	08 95       	ret

00000df4 <__gesf2>:
 df4:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_cmp>
 df8:	08 f4       	brcc	.+2      	; 0xdfc <__gesf2+0x8>
 dfa:	8f ef       	ldi	r24, 0xFF	; 255
 dfc:	08 95       	ret

00000dfe <__mulsf3>:
 dfe:	0e 94 12 07 	call	0xe24	; 0xe24 <__mulsf3x>
 e02:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
 e06:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
 e0a:	38 f0       	brcs	.+14     	; 0xe1a <__mulsf3+0x1c>
 e0c:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
 e10:	20 f0       	brcs	.+8      	; 0xe1a <__mulsf3+0x1c>
 e12:	95 23       	and	r25, r21
 e14:	11 f0       	breq	.+4      	; 0xe1a <__mulsf3+0x1c>
 e16:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
 e1a:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>
 e1e:	11 24       	eor	r1, r1
 e20:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>

00000e24 <__mulsf3x>:
 e24:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
 e28:	70 f3       	brcs	.-36     	; 0xe06 <__mulsf3+0x8>

00000e2a <__mulsf3_pse>:
 e2a:	95 9f       	mul	r25, r21
 e2c:	c1 f3       	breq	.-16     	; 0xe1e <__mulsf3+0x20>
 e2e:	95 0f       	add	r25, r21
 e30:	50 e0       	ldi	r21, 0x00	; 0
 e32:	55 1f       	adc	r21, r21
 e34:	62 9f       	mul	r22, r18
 e36:	f0 01       	movw	r30, r0
 e38:	72 9f       	mul	r23, r18
 e3a:	bb 27       	eor	r27, r27
 e3c:	f0 0d       	add	r31, r0
 e3e:	b1 1d       	adc	r27, r1
 e40:	63 9f       	mul	r22, r19
 e42:	aa 27       	eor	r26, r26
 e44:	f0 0d       	add	r31, r0
 e46:	b1 1d       	adc	r27, r1
 e48:	aa 1f       	adc	r26, r26
 e4a:	64 9f       	mul	r22, r20
 e4c:	66 27       	eor	r22, r22
 e4e:	b0 0d       	add	r27, r0
 e50:	a1 1d       	adc	r26, r1
 e52:	66 1f       	adc	r22, r22
 e54:	82 9f       	mul	r24, r18
 e56:	22 27       	eor	r18, r18
 e58:	b0 0d       	add	r27, r0
 e5a:	a1 1d       	adc	r26, r1
 e5c:	62 1f       	adc	r22, r18
 e5e:	73 9f       	mul	r23, r19
 e60:	b0 0d       	add	r27, r0
 e62:	a1 1d       	adc	r26, r1
 e64:	62 1f       	adc	r22, r18
 e66:	83 9f       	mul	r24, r19
 e68:	a0 0d       	add	r26, r0
 e6a:	61 1d       	adc	r22, r1
 e6c:	22 1f       	adc	r18, r18
 e6e:	74 9f       	mul	r23, r20
 e70:	33 27       	eor	r19, r19
 e72:	a0 0d       	add	r26, r0
 e74:	61 1d       	adc	r22, r1
 e76:	23 1f       	adc	r18, r19
 e78:	84 9f       	mul	r24, r20
 e7a:	60 0d       	add	r22, r0
 e7c:	21 1d       	adc	r18, r1
 e7e:	82 2f       	mov	r24, r18
 e80:	76 2f       	mov	r23, r22
 e82:	6a 2f       	mov	r22, r26
 e84:	11 24       	eor	r1, r1
 e86:	9f 57       	subi	r25, 0x7F	; 127
 e88:	50 40       	sbci	r21, 0x00	; 0
 e8a:	9a f0       	brmi	.+38     	; 0xeb2 <__mulsf3_pse+0x88>
 e8c:	f1 f0       	breq	.+60     	; 0xeca <__mulsf3_pse+0xa0>
 e8e:	88 23       	and	r24, r24
 e90:	4a f0       	brmi	.+18     	; 0xea4 <__mulsf3_pse+0x7a>
 e92:	ee 0f       	add	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	bb 1f       	adc	r27, r27
 e98:	66 1f       	adc	r22, r22
 e9a:	77 1f       	adc	r23, r23
 e9c:	88 1f       	adc	r24, r24
 e9e:	91 50       	subi	r25, 0x01	; 1
 ea0:	50 40       	sbci	r21, 0x00	; 0
 ea2:	a9 f7       	brne	.-22     	; 0xe8e <__mulsf3_pse+0x64>
 ea4:	9e 3f       	cpi	r25, 0xFE	; 254
 ea6:	51 05       	cpc	r21, r1
 ea8:	80 f0       	brcs	.+32     	; 0xeca <__mulsf3_pse+0xa0>
 eaa:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
 eae:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
 eb2:	5f 3f       	cpi	r21, 0xFF	; 255
 eb4:	e4 f3       	brlt	.-8      	; 0xeae <__mulsf3_pse+0x84>
 eb6:	98 3e       	cpi	r25, 0xE8	; 232
 eb8:	d4 f3       	brlt	.-12     	; 0xeae <__mulsf3_pse+0x84>
 eba:	86 95       	lsr	r24
 ebc:	77 95       	ror	r23
 ebe:	67 95       	ror	r22
 ec0:	b7 95       	ror	r27
 ec2:	f7 95       	ror	r31
 ec4:	e7 95       	ror	r30
 ec6:	9f 5f       	subi	r25, 0xFF	; 255
 ec8:	c1 f7       	brne	.-16     	; 0xeba <__mulsf3_pse+0x90>
 eca:	fe 2b       	or	r31, r30
 ecc:	88 0f       	add	r24, r24
 ece:	91 1d       	adc	r25, r1
 ed0:	96 95       	lsr	r25
 ed2:	87 95       	ror	r24
 ed4:	97 f9       	bld	r25, 7
 ed6:	08 95       	ret

00000ed8 <_exit>:
 ed8:	f8 94       	cli

00000eda <__stop_program>:
 eda:	ff cf       	rjmp	.-2      	; 0xeda <__stop_program>
