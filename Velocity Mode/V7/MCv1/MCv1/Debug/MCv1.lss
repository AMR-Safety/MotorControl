
MCv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000c7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bcf  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcc  00000000  00000000  000029fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cce  00000000  00000000  000039c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145b  00000000  00000000  00005389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000067e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a0 31       	cpi	r26, 0x10	; 16
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 92 00 	call	0x124	; 0x124 <main>
  cc:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <setup_pins_motor1>:
#include "direction.h"



void setup_pins_motor1(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 67       	ori	r24, 0x70	; 112
  d8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <set_direction_motor1>:
	//set_direction_motor1(0);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
  e2:	88 23       	and	r24, r24
  e4:	21 f0       	breq	.+8      	; 0xee <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <setup_pins_motor2>:
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <set_direction_motor2>:
	//set_direction_motor2(0);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
 110:	88 23       	and	r24, r24
 112:	21 f0       	breq	.+8      	; 0x11c <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	82 60       	ori	r24, 0x02	; 2
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <main>:

#include "motion_control.h"


int main(void) {
	setup_pins_motor1();
 124:	0e 94 6a 00 	call	0xd4	; 0xd4 <setup_pins_motor1>
	setup_pins_motor2();
 128:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_pins_motor2>
	set_direction_motor1(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 71 00 	call	0xe2	; 0xe2 <set_direction_motor1>
	set_direction_motor2(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 88 00 	call	0x110	; 0x110 <set_direction_motor2>
	//move_distance(1.21,50,1);
	move_distance(1.83,50,1);
 138:	01 e0       	ldi	r16, 0x01	; 1
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	48 e4       	ldi	r20, 0x48	; 72
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	61 e7       	ldi	r22, 0x71	; 113
 144:	7d e3       	ldi	r23, 0x3D	; 61
 146:	8a ee       	ldi	r24, 0xEA	; 234
 148:	9f e3       	ldi	r25, 0x3F	; 63
 14a:	0e 94 0a 01 	call	0x214	; 0x214 <move_distance>
 14e:	ff cf       	rjmp	.-2      	; 0x14e <main+0x2a>

00000150 <calculate_accel_distance>:
	set_angular_velocity_motor1(0);
	set_angular_velocity_motor2(0);
}

// Helper function to calculate distance covered during acceleration
float calculate_accel_distance(float omega_target, uint16_t profile_steps) {
 150:	4f 92       	push	r4
 152:	5f 92       	push	r5
 154:	6f 92       	push	r6
 156:	7f 92       	push	r7
 158:	8f 92       	push	r8
 15a:	9f 92       	push	r9
 15c:	af 92       	push	r10
 15e:	bf 92       	push	r11
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	2b 01       	movw	r4, r22
 172:	3c 01       	movw	r6, r24
 174:	8a 01       	movw	r16, r20
	float total_distance = 0;
	//float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	const float GEAR_RATIO = 10.0f; // 10:1 gear ratio
	
	// Calculate distance for each step of the acceleration profile
	for (int i = 1; i <= profile_steps; i++) {
 176:	c1 e0       	ldi	r28, 0x01	; 1
 178:	d0 e0       	ldi	r29, 0x00	; 0
	set_angular_velocity_motor2(0);
}

// Helper function to calculate distance covered during acceleration
float calculate_accel_distance(float omega_target, uint16_t profile_steps) {
	float total_distance = 0;
 17a:	c1 2c       	mov	r12, r1
 17c:	d1 2c       	mov	r13, r1
 17e:	76 01       	movw	r14, r12
	//float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	const float GEAR_RATIO = 10.0f; // 10:1 gear ratio
	
	// Calculate distance for each step of the acceleration profile
	for (int i = 1; i <= profile_steps; i++) {
 180:	33 c0       	rjmp	.+102    	; 0x1e8 <calculate_accel_distance+0x98>
		float motor_omega = (omega_target * i) / profile_steps;
 182:	be 01       	movw	r22, r28
 184:	0d 2e       	mov	r0, r29
 186:	00 0c       	add	r0, r0
 188:	88 0b       	sbc	r24, r24
 18a:	99 0b       	sbc	r25, r25
 18c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 190:	a3 01       	movw	r20, r6
 192:	92 01       	movw	r18, r4
 194:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 198:	4b 01       	movw	r8, r22
 19a:	5c 01       	movw	r10, r24
 19c:	b8 01       	movw	r22, r16
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 de 04 	call	0x9bc	; 0x9bc <__floatunsisf>
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
		// Convert motor angular velocity to wheel angular velocity
		float wheel_omega = motor_omega / GEAR_RATIO;
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e2       	ldi	r20, 0x20	; 32
 1b8:	51 e4       	ldi	r21, 0x41	; 65
 1ba:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
		// Distance = velocity * time
		// Convert wheel omega (rad/s) to linear velocity (m/s): v = omega * radius
		float linear_velocity = wheel_omega * WHEEL_RADIUS;
 1be:	26 eb       	ldi	r18, 0xB6	; 182
 1c0:	33 ef       	ldi	r19, 0xF3	; 243
 1c2:	4d e7       	ldi	r20, 0x7D	; 125
 1c4:	5d e3       	ldi	r21, 0x3D	; 61
 1c6:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
		float step_distance = linear_velocity * (TRAPEZOID_DELAY_MS / 1000.0f); // Convert ms to s
 1ca:	2d ec       	ldi	r18, 0xCD	; 205
 1cc:	3c ec       	ldi	r19, 0xCC	; 204
 1ce:	4c e4       	ldi	r20, 0x4C	; 76
 1d0:	5d e3       	ldi	r21, 0x3D	; 61
 1d2:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 1d6:	9b 01       	movw	r18, r22
 1d8:	ac 01       	movw	r20, r24
		total_distance += step_distance;
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	0e 94 cc 03 	call	0x798	; 0x798 <__addsf3>
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
	float total_distance = 0;
	//float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	const float GEAR_RATIO = 10.0f; // 10:1 gear ratio
	
	// Calculate distance for each step of the acceleration profile
	for (int i = 1; i <= profile_steps; i++) {
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	0c 17       	cp	r16, r28
 1ea:	1d 07       	cpc	r17, r29
 1ec:	50 f6       	brcc	.-108    	; 0x182 <calculate_accel_distance+0x32>
		float step_distance = linear_velocity * (TRAPEZOID_DELAY_MS / 1000.0f); // Convert ms to s
		total_distance += step_distance;
	}
	
	return total_distance;
}
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	bf 90       	pop	r11
 204:	af 90       	pop	r10
 206:	9f 90       	pop	r9
 208:	8f 90       	pop	r8
 20a:	7f 90       	pop	r7
 20c:	6f 90       	pop	r6
 20e:	5f 90       	pop	r5
 210:	4f 90       	pop	r4
 212:	08 95       	ret

00000214 <move_distance>:
		}
		ms -= chunk;
	}
}

void move_distance(float distance_m, float omega_target, uint8_t use_trapezoid) {
 214:	4f 92       	push	r4
 216:	5f 92       	push	r5
 218:	6f 92       	push	r6
 21a:	7f 92       	push	r7
 21c:	8f 92       	push	r8
 21e:	9f 92       	push	r9
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	2b 01       	movw	r4, r22
 230:	3c 01       	movw	r6, r24
 232:	49 01       	movw	r8, r18
 234:	5a 01       	movw	r10, r20
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	const float GEAR_RATIO = 10.0f; // 10:1 gear ratio
	
	// Calculate distance covered during acceleration and deceleration phases
	uint16_t profile_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	float accel_distance = calculate_accel_distance(omega_target, profile_steps);
 236:	42 e3       	ldi	r20, 0x32	; 50
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	c5 01       	movw	r24, r10
 23c:	b4 01       	movw	r22, r8
 23e:	0e 94 a8 00 	call	0x150	; 0x150 <calculate_accel_distance>
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
	float decel_distance = accel_distance; // Same as acceleration distance
	
	// Calculate cruise distance (remaining distance after accel/decel)
	float cruise_distance = distance_m - accel_distance - decel_distance;
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	c3 01       	movw	r24, r6
 24c:	b2 01       	movw	r22, r4
 24e:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 252:	a7 01       	movw	r20, r14
 254:	96 01       	movw	r18, r12
 256:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
 25a:	6b 01       	movw	r12, r22
 25c:	7c 01       	movw	r14, r24
	
	// Ensure cruise distance is not negative
	if (cruise_distance < 0) {
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	a9 01       	movw	r20, r18
 264:	0e 94 38 04 	call	0x870	; 0x870 <__cmpsf2>
 268:	88 23       	and	r24, r24
 26a:	1c f4       	brge	.+6      	; 0x272 <move_distance+0x5e>
		cruise_distance = 0;
 26c:	c1 2c       	mov	r12, r1
 26e:	d1 2c       	mov	r13, r1
 270:	76 01       	movw	r14, r12
		// or adjust the acceleration parameters
	}
	
	// Convert cruise distance to physical motor steps
	// Account for gear ratio: motor rotations = wheel rotations * gear ratio
	float wheel_rotations = cruise_distance / wheel_circ;
 272:	24 e1       	ldi	r18, 0x14	; 20
 274:	34 e7       	ldi	r19, 0x74	; 116
 276:	47 ec       	ldi	r20, 0xC7	; 199
 278:	5e e3       	ldi	r21, 0x3E	; 62
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
	float motor_rotations = wheel_rotations * GEAR_RATIO;
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e2       	ldi	r20, 0x20	; 32
 288:	51 e4       	ldi	r21, 0x41	; 65
 28a:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
	uint32_t cruise_steps = (uint32_t)(motor_rotations * STEPS_PER_REV);
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	48 e4       	ldi	r20, 0x48	; 72
 294:	54 e4       	ldi	r21, 0x44	; 68
 296:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 29a:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
	
	// Reset step counters
	motor1_steps = 0;
 2a2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor1_steps>
 2a6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <motor1_steps+0x1>
 2aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <motor1_steps+0x2>
 2ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <motor1_steps+0x3>
	motor2_steps = 0;
 2b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2be:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	// Ramp Up
	if (use_trapezoid) {
 2c2:	00 23       	and	r16, r16
 2c4:	29 f0       	breq	.+10     	; 0x2d0 <move_distance+0xbc>
		ramp_up_trapezoid(omega_target);
 2c6:	c5 01       	movw	r24, r10
 2c8:	b4 01       	movw	r22, r8
 2ca:	0e 94 9f 02 	call	0x53e	; 0x53e <ramp_up_trapezoid>
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <move_distance+0xc4>
		} else {
		ramp_up_scurve(omega_target);
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	0e 94 1c 02 	call	0x438	; 0x438 <ramp_up_scurve>
	}
	
	// Cruise phase with precise step counting
	set_angular_velocity_motor1(omega_target);
 2d8:	c5 01       	movw	r24, r10
 2da:	b4 01       	movw	r22, r8
 2dc:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 2e0:	c5 01       	movw	r24, r10
 2e2:	b4 01       	movw	r22, r8
 2e4:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
	
	uint32_t target_steps = cruise_steps;
	while (motor1_steps < target_steps && motor2_steps < target_steps) {
 2e8:	30 c0       	rjmp	.+96     	; 0x34a <move_distance+0x136>
		// Wait for timer interrupts to generate steps
		// This is more precise than delay-based timing
		if (TIFR1 & (1 << OCF1A)) {
 2ea:	b1 9b       	sbis	0x16, 1	; 22
 2ec:	16 c0       	rjmp	.+44     	; 0x31a <move_distance+0x106>
			TIFR1 |= (1 << OCF1A);
 2ee:	86 b3       	in	r24, 0x16	; 22
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	86 bb       	out	0x16, r24	; 22
			motor1_steps++;
 2f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 2f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 2fc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 300:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	b1 1d       	adc	r27, r1
 30a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor1_steps>
 30e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <motor1_steps+0x1>
 312:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <motor1_steps+0x2>
 316:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <motor1_steps+0x3>
		}
		if (TIFR3 & (1 << OCF3A)) {
 31a:	c1 9b       	sbis	0x18, 1	; 24
 31c:	16 c0       	rjmp	.+44     	; 0x34a <move_distance+0x136>
			TIFR3 |= (1 << OCF3A);
 31e:	88 b3       	in	r24, 0x18	; 24
 320:	82 60       	ori	r24, 0x02	; 2
 322:	88 bb       	out	0x18, r24	; 24
			motor2_steps++;
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 328:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 32c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 330:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	a1 1d       	adc	r26, r1
 338:	b1 1d       	adc	r27, r1
 33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 346:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	// Cruise phase with precise step counting
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);
	
	uint32_t target_steps = cruise_steps;
	while (motor1_steps < target_steps && motor2_steps < target_steps) {
 34a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor1_steps>
 34e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <motor1_steps+0x1>
 352:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <motor1_steps+0x2>
 356:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <motor1_steps+0x3>
 35a:	8c 15       	cp	r24, r12
 35c:	9d 05       	cpc	r25, r13
 35e:	ae 05       	cpc	r26, r14
 360:	bf 05       	cpc	r27, r15
 362:	70 f4       	brcc	.+28     	; 0x380 <move_distance+0x16c>
 364:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 370:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 374:	8c 15       	cp	r24, r12
 376:	9d 05       	cpc	r25, r13
 378:	ae 05       	cpc	r26, r14
 37a:	bf 05       	cpc	r27, r15
 37c:	08 f4       	brcc	.+2      	; 0x380 <move_distance+0x16c>
 37e:	b5 cf       	rjmp	.-150    	; 0x2ea <move_distance+0xd6>
			motor2_steps++;
		}
	}
	
	// Ramp Down
	if (use_trapezoid) {
 380:	00 23       	and	r16, r16
 382:	29 f0       	breq	.+10     	; 0x38e <move_distance+0x17a>
		ramp_down_trapezoid(omega_target);
 384:	c5 01       	movw	r24, r10
 386:	b4 01       	movw	r22, r8
 388:	0e 94 df 02 	call	0x5be	; 0x5be <ramp_down_trapezoid>
 38c:	04 c0       	rjmp	.+8      	; 0x396 <move_distance+0x182>
		} else {
		ramp_down_scurve(omega_target);
 38e:	c5 01       	movw	r24, r10
 390:	b4 01       	movw	r22, r8
 392:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ramp_down_scurve>
	}
	
	// Stop motors
	set_angular_velocity_motor1(0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	cb 01       	movw	r24, r22
 39c:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	cb 01       	movw	r24, r22
 3a6:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
}
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	7f 90       	pop	r7
 3be:	6f 90       	pop	r6
 3c0:	5f 90       	pop	r5
 3c2:	4f 90       	pop	r4
 3c4:	08 95       	ret

000003c6 <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 3c6:	8f 92       	push	r8
 3c8:	9f 92       	push	r9
 3ca:	af 92       	push	r10
 3cc:	bf 92       	push	r11
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	6b 01       	movw	r12, r22
 3d8:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e4       	ldi	r20, 0x40	; 64
 3e0:	50 e4       	ldi	r21, 0x40	; 64
 3e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 3e6:	9b 01       	movw	r18, r22
 3e8:	ac 01       	movw	r20, r24
 3ea:	c7 01       	movw	r24, r14
 3ec:	b6 01       	movw	r22, r12
 3ee:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 3f2:	4b 01       	movw	r8, r22
 3f4:	5c 01       	movw	r10, r24
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	c7 01       	movw	r24, r14
 3fc:	b6 01       	movw	r22, r12
 3fe:	0e 94 cc 03 	call	0x798	; 0x798 <__addsf3>
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	c5 01       	movw	r24, r10
 420:	b4 01       	movw	r22, r8
 422:	0e 94 cb 03 	call	0x796	; 0x796 <__subsf3>
}
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	08 95       	ret

00000438 <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	4b 01       	movw	r8, r22
 44e:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 450:	c1 e0       	ldi	r28, 0x01	; 1
 452:	d0 e0       	ldi	r29, 0x00	; 0
 454:	25 c0       	rjmp	.+74     	; 0x4a0 <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 456:	be 01       	movw	r22, r28
 458:	0d 2e       	mov	r0, r29
 45a:	00 0c       	add	r0, r0
 45c:	88 0b       	sbc	r24, r24
 45e:	99 0b       	sbc	r25, r25
 460:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	48 e4       	ldi	r20, 0x48	; 72
 46a:	52 e4       	ldi	r21, 0x42	; 66
 46c:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 470:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <s_curve_profile>
 474:	a5 01       	movw	r20, r10
 476:	94 01       	movw	r18, r8
 478:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 47c:	6b 01       	movw	r12, r22
 47e:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 480:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 484:	c7 01       	movw	r24, r14
 486:	b6 01       	movw	r22, r12
 488:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	80 e7       	ldi	r24, 0x70	; 112
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <ramp_up_scurve+0x5a>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <ramp_up_scurve+0x64>
 49c:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 49e:	21 96       	adiw	r28, 0x01	; 1
 4a0:	c3 33       	cpi	r28, 0x33	; 51
 4a2:	d1 05       	cpc	r29, r1
 4a4:	c4 f2       	brlt	.-80     	; 0x456 <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	bf 90       	pop	r11
 4b4:	af 90       	pop	r10
 4b6:	9f 90       	pop	r9
 4b8:	8f 90       	pop	r8
 4ba:	08 95       	ret

000004bc <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 4bc:	8f 92       	push	r8
 4be:	9f 92       	push	r9
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	4b 01       	movw	r8, r22
 4d2:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 4d4:	c1 e3       	ldi	r28, 0x31	; 49
 4d6:	d0 e0       	ldi	r29, 0x00	; 0
 4d8:	25 c0       	rjmp	.+74     	; 0x524 <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 4da:	be 01       	movw	r22, r28
 4dc:	0d 2e       	mov	r0, r29
 4de:	00 0c       	add	r0, r0
 4e0:	88 0b       	sbc	r24, r24
 4e2:	99 0b       	sbc	r25, r25
 4e4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	48 e4       	ldi	r20, 0x48	; 72
 4ee:	52 e4       	ldi	r21, 0x42	; 66
 4f0:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 4f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <s_curve_profile>
 4f8:	a5 01       	movw	r20, r10
 4fa:	94 01       	movw	r18, r8
 4fc:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 500:	6b 01       	movw	r12, r22
 502:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 504:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	80 e7       	ldi	r24, 0x70	; 112
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <ramp_down_scurve+0x5a>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <ramp_down_scurve+0x64>
 520:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 522:	21 97       	sbiw	r28, 0x01	; 1
 524:	dd 23       	and	r29, r29
 526:	cc f6       	brge	.-78     	; 0x4da <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	9f 90       	pop	r9
 53a:	8f 90       	pop	r8
 53c:	08 95       	ret

0000053e <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 53e:	8f 92       	push	r8
 540:	9f 92       	push	r9
 542:	af 92       	push	r10
 544:	bf 92       	push	r11
 546:	cf 92       	push	r12
 548:	df 92       	push	r13
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	4b 01       	movw	r8, r22
 554:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 556:	c1 e0       	ldi	r28, 0x01	; 1
 558:	d0 e0       	ldi	r29, 0x00	; 0
 55a:	23 c0       	rjmp	.+70     	; 0x5a2 <ramp_up_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 55c:	be 01       	movw	r22, r28
 55e:	0d 2e       	mov	r0, r29
 560:	00 0c       	add	r0, r0
 562:	88 0b       	sbc	r24, r24
 564:	99 0b       	sbc	r25, r25
 566:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 56a:	a5 01       	movw	r20, r10
 56c:	94 01       	movw	r18, r8
 56e:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	48 e4       	ldi	r20, 0x48	; 72
 578:	52 e4       	ldi	r21, 0x42	; 66
 57a:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 57e:	6b 01       	movw	r12, r22
 580:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 582:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 586:	c7 01       	movw	r24, r14
 588:	b6 01       	movw	r22, r12
 58a:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
 58e:	2f ef       	ldi	r18, 0xFF	; 255
 590:	80 e7       	ldi	r24, 0x70	; 112
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	21 50       	subi	r18, 0x01	; 1
 596:	80 40       	sbci	r24, 0x00	; 0
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <ramp_up_trapezoid+0x56>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <ramp_up_trapezoid+0x60>
 59e:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 5a0:	21 96       	adiw	r28, 0x01	; 1
 5a2:	c3 33       	cpi	r28, 0x33	; 51
 5a4:	d1 05       	cpc	r29, r1
 5a6:	d4 f2       	brlt	.-76     	; 0x55c <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	df 90       	pop	r13
 5b2:	cf 90       	pop	r12
 5b4:	bf 90       	pop	r11
 5b6:	af 90       	pop	r10
 5b8:	9f 90       	pop	r9
 5ba:	8f 90       	pop	r8
 5bc:	08 95       	ret

000005be <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 5be:	8f 92       	push	r8
 5c0:	9f 92       	push	r9
 5c2:	af 92       	push	r10
 5c4:	bf 92       	push	r11
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	4b 01       	movw	r8, r22
 5d4:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 5d6:	c1 e3       	ldi	r28, 0x31	; 49
 5d8:	d0 e0       	ldi	r29, 0x00	; 0
 5da:	23 c0       	rjmp	.+70     	; 0x622 <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 5dc:	be 01       	movw	r22, r28
 5de:	0d 2e       	mov	r0, r29
 5e0:	00 0c       	add	r0, r0
 5e2:	88 0b       	sbc	r24, r24
 5e4:	99 0b       	sbc	r25, r25
 5e6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
 5ea:	a5 01       	movw	r20, r10
 5ec:	94 01       	movw	r18, r8
 5ee:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	48 e4       	ldi	r20, 0x48	; 72
 5f8:	52 e4       	ldi	r21, 0x42	; 66
 5fa:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 5fe:	6b 01       	movw	r12, r22
 600:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 602:	0e 94 ad 03 	call	0x75a	; 0x75a <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 606:	c7 01       	movw	r24, r14
 608:	b6 01       	movw	r22, r12
 60a:	0e 94 bc 03 	call	0x778	; 0x778 <set_angular_velocity_motor2>
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	80 e7       	ldi	r24, 0x70	; 112
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	21 50       	subi	r18, 0x01	; 1
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	90 40       	sbci	r25, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <ramp_down_trapezoid+0x56>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <ramp_down_trapezoid+0x60>
 61e:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 620:	21 97       	sbiw	r28, 0x01	; 1
 622:	dd 23       	and	r29, r29
 624:	dc f6       	brge	.-74     	; 0x5dc <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	bf 90       	pop	r11
 634:	af 90       	pop	r10
 636:	9f 90       	pop	r9
 638:	8f 90       	pop	r8
 63a:	08 95       	ret

0000063c <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 63c:	2b ee       	ldi	r18, 0xEB	; 235
 63e:	39 ec       	ldi	r19, 0xC9	; 201
 640:	48 e1       	ldi	r20, 0x18	; 24
 642:	51 e4       	ldi	r21, 0x41	; 65
 644:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
}
 648:	08 95       	ret

0000064a <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 64a:	cf 92       	push	r12
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	6b 01       	movw	r12, r22
 654:	7c 01       	movw	r14, r24
	if (rpm <= 0) {
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	0e 94 38 04 	call	0x870	; 0x870 <__cmpsf2>
 660:	18 16       	cp	r1, r24
 662:	0c f0       	brlt	.+2      	; 0x666 <rpm_to_ocr+0x1c>
 664:	40 c0       	rjmp	.+128    	; 0x6e6 <rpm_to_ocr+0x9c>
		return 0;  // Return 0 to indicate motor should be stopped
	}
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	48 e4       	ldi	r20, 0x48	; 72
 66c:	54 e4       	ldi	r21, 0x44	; 68
 66e:	c7 01       	movw	r24, r14
 670:	b6 01       	movw	r22, r12
 672:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	40 e7       	ldi	r20, 0x70	; 112
 67c:	52 e4       	ldi	r21, 0x42	; 66
 67e:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	a9 01       	movw	r20, r18
 68c:	0e 94 38 04 	call	0x870	; 0x870 <__cmpsf2>
 690:	18 16       	cp	r1, r24
 692:	64 f5       	brge	.+88     	; 0x6ec <rpm_to_ocr+0xa2>
		return 0;
	}
	
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	51 e4       	ldi	r21, 0x41	; 65
 69c:	c7 01       	movw	r24, r14
 69e:	b6 01       	movw	r22, r12
 6a0:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3>
 6a4:	9b 01       	movw	r18, r22
 6a6:	ac 01       	movw	r20, r24
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	74 e2       	ldi	r23, 0x24	; 36
 6ac:	84 e7       	ldi	r24, 0x74	; 116
 6ae:	9b e4       	ldi	r25, 0x4B	; 75
 6b0:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 6b4:	6b 01       	movw	r12, r22
 6b6:	7c 01       	movw	r14, r24
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	3f ef       	ldi	r19, 0xFF	; 255
 6bc:	4f e7       	ldi	r20, 0x7F	; 127
 6be:	57 e4       	ldi	r21, 0x47	; 71
 6c0:	0e 94 90 05 	call	0xb20	; 0xb20 <__gesf2>
 6c4:	18 16       	cp	r1, r24
 6c6:	4c f4       	brge	.+18     	; 0x6da <rpm_to_ocr+0x90>
 6c8:	0f 2e       	mov	r0, r31
 6ca:	c1 2c       	mov	r12, r1
 6cc:	dd 24       	eor	r13, r13
 6ce:	da 94       	dec	r13
 6d0:	ff e7       	ldi	r31, 0x7F	; 127
 6d2:	ef 2e       	mov	r14, r31
 6d4:	f7 e4       	ldi	r31, 0x47	; 71
 6d6:	ff 2e       	mov	r15, r31
 6d8:	f0 2d       	mov	r31, r0
	
	return (uint16_t)ocr;
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 6e2:	cb 01       	movw	r24, r22
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <rpm_to_ocr+0xa6>
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) {
		return 0;  // Return 0 to indicate motor should be stopped
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <rpm_to_ocr+0xa6>
	
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	
	// Avoid division by zero
	if (steps_per_sec <= 0) {
		return 0;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
	
	// Clamp to maximum timer value
	if (ocr > 65535) ocr = 65535;
	
	return (uint16_t)ocr;
}
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	08 95       	ret

000006fa <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	if (ocr_value == 0) {
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	59 f4       	brne	.+22     	; 0x714 <setup_timer1+0x1a>
		// Stop the motor by disabling output compare
		TCCR1A &= ~(1 << COM1A0);
 6fe:	e0 e8       	ldi	r30, 0x80	; 128
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	8f 7b       	andi	r24, 0xBF	; 191
 706:	80 83       	st	Z, r24
		TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Stop timer
 708:	e1 e8       	ldi	r30, 0x81	; 129
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	88 7f       	andi	r24, 0xF8	; 248
 710:	80 83       	st	Z, r24
 712:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR1A = (1 << COM1A0);  // Toggle OC1A on compare match
 714:	20 e4       	ldi	r18, 0x40	; 64
 716:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << WGM12) | (1 << CS11);  // CTC mode, prescaler 8
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		OCR1A = ocr_value;
 720:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 724:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 728:	08 95       	ret

0000072a <setup_timer3>:
	}
}

void setup_timer3(uint16_t ocr_value) {
	if (ocr_value == 0) {
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	59 f4       	brne	.+22     	; 0x744 <setup_timer3+0x1a>
		// Stop the motor by disabling output compare
		TCCR3A &= ~(1 << COM3A0);
 72e:	e0 e9       	ldi	r30, 0x90	; 144
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8f 7b       	andi	r24, 0xBF	; 191
 736:	80 83       	st	Z, r24
		TCCR3B &= ~((1 << CS32) | (1 << CS31) | (1 << CS30)); // Stop timer
 738:	e1 e9       	ldi	r30, 0x91	; 145
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	88 7f       	andi	r24, 0xF8	; 248
 740:	80 83       	st	Z, r24
 742:	08 95       	ret
		} else {
		// Configure timer for CTC mode with toggle output
		TCCR3A = (1 << COM3A0);  // Toggle OC3A on compare match
 744:	20 e4       	ldi	r18, 0x40	; 64
 746:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
		TCCR3B = (1 << WGM32) | (1 << CS31);  // CTC mode, prescaler 8
 74a:	2a e0       	ldi	r18, 0x0A	; 10
 74c:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
		OCR3A = ocr_value;
 750:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 754:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 758:	08 95       	ret

0000075a <set_angular_velocity_motor1>:
	}
}

void set_angular_velocity_motor1(float omega) {
	target_velocity_motor1 = omega;  // Store target velocity
 75a:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <target_velocity_motor1>
 75e:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <target_velocity_motor1+0x1>
 762:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <target_velocity_motor1+0x2>
 766:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <target_velocity_motor1+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 76a:	0e 94 1e 03 	call	0x63c	; 0x63c <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 76e:	0e 94 25 03 	call	0x64a	; 0x64a <rpm_to_ocr>
	setup_timer1(ocr);
 772:	0e 94 7d 03 	call	0x6fa	; 0x6fa <setup_timer1>
 776:	08 95       	ret

00000778 <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	target_velocity_motor2 = omega;  // Store target velocity
 778:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <target_velocity_motor2>
 77c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <target_velocity_motor2+0x1>
 780:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <target_velocity_motor2+0x2>
 784:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <target_velocity_motor2+0x3>
	float rpm = angular_velocity_to_rpm(omega);
 788:	0e 94 1e 03 	call	0x63c	; 0x63c <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 78c:	0e 94 25 03 	call	0x64a	; 0x64a <rpm_to_ocr>
	setup_timer3(ocr);
 790:	0e 94 95 03 	call	0x72a	; 0x72a <setup_timer3>
 794:	08 95       	ret

00000796 <__subsf3>:
 796:	50 58       	subi	r21, 0x80	; 128

00000798 <__addsf3>:
 798:	bb 27       	eor	r27, r27
 79a:	aa 27       	eor	r26, r26
 79c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3x>
 7a0:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_round>
 7a4:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscA>
 7a8:	38 f0       	brcs	.+14     	; 0x7b8 <__addsf3+0x20>
 7aa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_pscB>
 7ae:	20 f0       	brcs	.+8      	; 0x7b8 <__addsf3+0x20>
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <__addsf3+0x28>
 7b2:	9f 3f       	cpi	r25, 0xFF	; 255
 7b4:	19 f4       	brne	.+6      	; 0x7bc <__addsf3+0x24>
 7b6:	26 f4       	brtc	.+8      	; 0x7c0 <__addsf3+0x28>
 7b8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_nan>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3+0x28>
 7be:	e0 95       	com	r30
 7c0:	e7 fb       	bst	r30, 7
 7c2:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_inf>

000007c6 <__addsf3x>:
 7c6:	e9 2f       	mov	r30, r25
 7c8:	0e 94 67 05 	call	0xace	; 0xace <__fp_split3>
 7cc:	58 f3       	brcs	.-42     	; 0x7a4 <__addsf3+0xc>
 7ce:	ba 17       	cp	r27, r26
 7d0:	62 07       	cpc	r22, r18
 7d2:	73 07       	cpc	r23, r19
 7d4:	84 07       	cpc	r24, r20
 7d6:	95 07       	cpc	r25, r21
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__addsf3x+0x1c>
 7da:	79 f4       	brne	.+30     	; 0x7fa <__addsf3x+0x34>
 7dc:	a6 f5       	brtc	.+104    	; 0x846 <__addsf3x+0x80>
 7de:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_zero>
 7e2:	0e f4       	brtc	.+2      	; 0x7e6 <__addsf3x+0x20>
 7e4:	e0 95       	com	r30
 7e6:	0b 2e       	mov	r0, r27
 7e8:	ba 2f       	mov	r27, r26
 7ea:	a0 2d       	mov	r26, r0
 7ec:	0b 01       	movw	r0, r22
 7ee:	b9 01       	movw	r22, r18
 7f0:	90 01       	movw	r18, r0
 7f2:	0c 01       	movw	r0, r24
 7f4:	ca 01       	movw	r24, r20
 7f6:	a0 01       	movw	r20, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	ff 27       	eor	r31, r31
 7fc:	59 1b       	sub	r21, r25
 7fe:	99 f0       	breq	.+38     	; 0x826 <__addsf3x+0x60>
 800:	59 3f       	cpi	r21, 0xF9	; 249
 802:	50 f4       	brcc	.+20     	; 0x818 <__addsf3x+0x52>
 804:	50 3e       	cpi	r21, 0xE0	; 224
 806:	68 f1       	brcs	.+90     	; 0x862 <__addsf3x+0x9c>
 808:	1a 16       	cp	r1, r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	a2 2f       	mov	r26, r18
 80e:	23 2f       	mov	r18, r19
 810:	34 2f       	mov	r19, r20
 812:	44 27       	eor	r20, r20
 814:	58 5f       	subi	r21, 0xF8	; 248
 816:	f3 cf       	rjmp	.-26     	; 0x7fe <__addsf3x+0x38>
 818:	46 95       	lsr	r20
 81a:	37 95       	ror	r19
 81c:	27 95       	ror	r18
 81e:	a7 95       	ror	r26
 820:	f0 40       	sbci	r31, 0x00	; 0
 822:	53 95       	inc	r21
 824:	c9 f7       	brne	.-14     	; 0x818 <__addsf3x+0x52>
 826:	7e f4       	brtc	.+30     	; 0x846 <__addsf3x+0x80>
 828:	1f 16       	cp	r1, r31
 82a:	ba 0b       	sbc	r27, r26
 82c:	62 0b       	sbc	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	ba f0       	brmi	.+46     	; 0x862 <__addsf3x+0x9c>
 834:	91 50       	subi	r25, 0x01	; 1
 836:	a1 f0       	breq	.+40     	; 0x860 <__addsf3x+0x9a>
 838:	ff 0f       	add	r31, r31
 83a:	bb 1f       	adc	r27, r27
 83c:	66 1f       	adc	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	c2 f7       	brpl	.-16     	; 0x834 <__addsf3x+0x6e>
 844:	0e c0       	rjmp	.+28     	; 0x862 <__addsf3x+0x9c>
 846:	ba 0f       	add	r27, r26
 848:	62 1f       	adc	r22, r18
 84a:	73 1f       	adc	r23, r19
 84c:	84 1f       	adc	r24, r20
 84e:	48 f4       	brcc	.+18     	; 0x862 <__addsf3x+0x9c>
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	9e 3f       	cpi	r25, 0xFE	; 254
 85c:	08 f0       	brcs	.+2      	; 0x860 <__addsf3x+0x9a>
 85e:	b0 cf       	rjmp	.-160    	; 0x7c0 <__addsf3+0x28>
 860:	93 95       	inc	r25
 862:	88 0f       	add	r24, r24
 864:	08 f0       	brcs	.+2      	; 0x868 <__addsf3x+0xa2>
 866:	99 27       	eor	r25, r25
 868:	ee 0f       	add	r30, r30
 86a:	97 95       	ror	r25
 86c:	87 95       	ror	r24
 86e:	08 95       	ret

00000870 <__cmpsf2>:
 870:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_cmp>
 874:	08 f4       	brcc	.+2      	; 0x878 <__cmpsf2+0x8>
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 95       	ret

0000087a <__divsf3>:
 87a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__divsf3x>
 87e:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_round>
 882:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_pscB>
 886:	58 f0       	brcs	.+22     	; 0x89e <__divsf3+0x24>
 888:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscA>
 88c:	40 f0       	brcs	.+16     	; 0x89e <__divsf3+0x24>
 88e:	29 f4       	brne	.+10     	; 0x89a <__divsf3+0x20>
 890:	5f 3f       	cpi	r21, 0xFF	; 255
 892:	29 f0       	breq	.+10     	; 0x89e <__divsf3+0x24>
 894:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_inf>
 898:	51 11       	cpse	r21, r1
 89a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_szero>
 89e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_nan>

000008a2 <__divsf3x>:
 8a2:	0e 94 67 05 	call	0xace	; 0xace <__fp_split3>
 8a6:	68 f3       	brcs	.-38     	; 0x882 <__divsf3+0x8>

000008a8 <__divsf3_pse>:
 8a8:	99 23       	and	r25, r25
 8aa:	b1 f3       	breq	.-20     	; 0x898 <__divsf3+0x1e>
 8ac:	55 23       	and	r21, r21
 8ae:	91 f3       	breq	.-28     	; 0x894 <__divsf3+0x1a>
 8b0:	95 1b       	sub	r25, r21
 8b2:	55 0b       	sbc	r21, r21
 8b4:	bb 27       	eor	r27, r27
 8b6:	aa 27       	eor	r26, r26
 8b8:	62 17       	cp	r22, r18
 8ba:	73 07       	cpc	r23, r19
 8bc:	84 07       	cpc	r24, r20
 8be:	38 f0       	brcs	.+14     	; 0x8ce <__divsf3_pse+0x26>
 8c0:	9f 5f       	subi	r25, 0xFF	; 255
 8c2:	5f 4f       	sbci	r21, 0xFF	; 255
 8c4:	22 0f       	add	r18, r18
 8c6:	33 1f       	adc	r19, r19
 8c8:	44 1f       	adc	r20, r20
 8ca:	aa 1f       	adc	r26, r26
 8cc:	a9 f3       	breq	.-22     	; 0x8b8 <__divsf3_pse+0x10>
 8ce:	35 d0       	rcall	.+106    	; 0x93a <__divsf3_pse+0x92>
 8d0:	0e 2e       	mov	r0, r30
 8d2:	3a f0       	brmi	.+14     	; 0x8e2 <__divsf3_pse+0x3a>
 8d4:	e0 e8       	ldi	r30, 0x80	; 128
 8d6:	32 d0       	rcall	.+100    	; 0x93c <__divsf3_pse+0x94>
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	50 40       	sbci	r21, 0x00	; 0
 8dc:	e6 95       	lsr	r30
 8de:	00 1c       	adc	r0, r0
 8e0:	ca f7       	brpl	.-14     	; 0x8d4 <__divsf3_pse+0x2c>
 8e2:	2b d0       	rcall	.+86     	; 0x93a <__divsf3_pse+0x92>
 8e4:	fe 2f       	mov	r31, r30
 8e6:	29 d0       	rcall	.+82     	; 0x93a <__divsf3_pse+0x92>
 8e8:	66 0f       	add	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	bb 1f       	adc	r27, r27
 8f0:	26 17       	cp	r18, r22
 8f2:	37 07       	cpc	r19, r23
 8f4:	48 07       	cpc	r20, r24
 8f6:	ab 07       	cpc	r26, r27
 8f8:	b0 e8       	ldi	r27, 0x80	; 128
 8fa:	09 f0       	breq	.+2      	; 0x8fe <__divsf3_pse+0x56>
 8fc:	bb 0b       	sbc	r27, r27
 8fe:	80 2d       	mov	r24, r0
 900:	bf 01       	movw	r22, r30
 902:	ff 27       	eor	r31, r31
 904:	93 58       	subi	r25, 0x83	; 131
 906:	5f 4f       	sbci	r21, 0xFF	; 255
 908:	3a f0       	brmi	.+14     	; 0x918 <__divsf3_pse+0x70>
 90a:	9e 3f       	cpi	r25, 0xFE	; 254
 90c:	51 05       	cpc	r21, r1
 90e:	78 f0       	brcs	.+30     	; 0x92e <__divsf3_pse+0x86>
 910:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_inf>
 914:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_szero>
 918:	5f 3f       	cpi	r21, 0xFF	; 255
 91a:	e4 f3       	brlt	.-8      	; 0x914 <__divsf3_pse+0x6c>
 91c:	98 3e       	cpi	r25, 0xE8	; 232
 91e:	d4 f3       	brlt	.-12     	; 0x914 <__divsf3_pse+0x6c>
 920:	86 95       	lsr	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	f7 95       	ror	r31
 92a:	9f 5f       	subi	r25, 0xFF	; 255
 92c:	c9 f7       	brne	.-14     	; 0x920 <__divsf3_pse+0x78>
 92e:	88 0f       	add	r24, r24
 930:	91 1d       	adc	r25, r1
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret
 93a:	e1 e0       	ldi	r30, 0x01	; 1
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	bb 1f       	adc	r27, r27
 944:	62 17       	cp	r22, r18
 946:	73 07       	cpc	r23, r19
 948:	84 07       	cpc	r24, r20
 94a:	ba 07       	cpc	r27, r26
 94c:	20 f0       	brcs	.+8      	; 0x956 <__divsf3_pse+0xae>
 94e:	62 1b       	sub	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	ba 0b       	sbc	r27, r26
 956:	ee 1f       	adc	r30, r30
 958:	88 f7       	brcc	.-30     	; 0x93c <__divsf3_pse+0x94>
 95a:	e0 95       	com	r30
 95c:	08 95       	ret

0000095e <__fixunssfsi>:
 95e:	0e 94 6f 05 	call	0xade	; 0xade <__fp_splitA>
 962:	88 f0       	brcs	.+34     	; 0x986 <__fixunssfsi+0x28>
 964:	9f 57       	subi	r25, 0x7F	; 127
 966:	98 f0       	brcs	.+38     	; 0x98e <__fixunssfsi+0x30>
 968:	b9 2f       	mov	r27, r25
 96a:	99 27       	eor	r25, r25
 96c:	b7 51       	subi	r27, 0x17	; 23
 96e:	b0 f0       	brcs	.+44     	; 0x99c <__fixunssfsi+0x3e>
 970:	e1 f0       	breq	.+56     	; 0x9aa <__fixunssfsi+0x4c>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	1a f0       	brmi	.+6      	; 0x982 <__fixunssfsi+0x24>
 97c:	ba 95       	dec	r27
 97e:	c9 f7       	brne	.-14     	; 0x972 <__fixunssfsi+0x14>
 980:	14 c0       	rjmp	.+40     	; 0x9aa <__fixunssfsi+0x4c>
 982:	b1 30       	cpi	r27, 0x01	; 1
 984:	91 f0       	breq	.+36     	; 0x9aa <__fixunssfsi+0x4c>
 986:	0e 94 89 05 	call	0xb12	; 0xb12 <__fp_zero>
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	08 95       	ret
 98e:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__fp_zero>
 992:	67 2f       	mov	r22, r23
 994:	78 2f       	mov	r23, r24
 996:	88 27       	eor	r24, r24
 998:	b8 5f       	subi	r27, 0xF8	; 248
 99a:	39 f0       	breq	.+14     	; 0x9aa <__fixunssfsi+0x4c>
 99c:	b9 3f       	cpi	r27, 0xF9	; 249
 99e:	cc f3       	brlt	.-14     	; 0x992 <__fixunssfsi+0x34>
 9a0:	86 95       	lsr	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b3 95       	inc	r27
 9a8:	d9 f7       	brne	.-10     	; 0x9a0 <__fixunssfsi+0x42>
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__fixunssfsi+0x5c>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__floatunsisf>:
 9bc:	e8 94       	clt
 9be:	09 c0       	rjmp	.+18     	; 0x9d2 <__floatsisf+0x12>

000009c0 <__floatsisf>:
 9c0:	97 fb       	bst	r25, 7
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__floatsisf+0x12>
 9c4:	90 95       	com	r25
 9c6:	80 95       	com	r24
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	99 23       	and	r25, r25
 9d4:	a9 f0       	breq	.+42     	; 0xa00 <__DATA_REGION_LENGTH__>
 9d6:	f9 2f       	mov	r31, r25
 9d8:	96 e9       	ldi	r25, 0x96	; 150
 9da:	bb 27       	eor	r27, r27
 9dc:	93 95       	inc	r25
 9de:	f6 95       	lsr	r31
 9e0:	87 95       	ror	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f1 11       	cpse	r31, r1
 9ea:	f8 cf       	rjmp	.-16     	; 0x9dc <__floatsisf+0x1c>
 9ec:	fa f4       	brpl	.+62     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 9ee:	bb 0f       	add	r27, r27
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__floatsisf+0x36>
 9f2:	60 ff       	sbrs	r22, 0
 9f4:	1b c0       	rjmp	.+54     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	16 c0       	rjmp	.+44     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a00:	88 23       	and	r24, r24
 a02:	11 f0       	breq	.+4      	; 0xa08 <__DATA_REGION_LENGTH__+0x8>
 a04:	96 e9       	ldi	r25, 0x96	; 150
 a06:	11 c0       	rjmp	.+34     	; 0xa2a <__DATA_REGION_LENGTH__+0x2a>
 a08:	77 23       	and	r23, r23
 a0a:	21 f0       	breq	.+8      	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
 a0c:	9e e8       	ldi	r25, 0x8E	; 142
 a0e:	87 2f       	mov	r24, r23
 a10:	76 2f       	mov	r23, r22
 a12:	05 c0       	rjmp	.+10     	; 0xa1e <__DATA_REGION_LENGTH__+0x1e>
 a14:	66 23       	and	r22, r22
 a16:	71 f0       	breq	.+28     	; 0xa34 <__DATA_REGION_LENGTH__+0x34>
 a18:	96 e8       	ldi	r25, 0x86	; 134
 a1a:	86 2f       	mov	r24, r22
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	2a f0       	brmi	.+10     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a22:	9a 95       	dec	r25
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	da f7       	brpl	.-10     	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
 a2c:	88 0f       	add	r24, r24
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret

00000a36 <__fp_cmp>:
 a36:	99 0f       	add	r25, r25
 a38:	00 08       	sbc	r0, r0
 a3a:	55 0f       	add	r21, r21
 a3c:	aa 0b       	sbc	r26, r26
 a3e:	e0 e8       	ldi	r30, 0x80	; 128
 a40:	fe ef       	ldi	r31, 0xFE	; 254
 a42:	16 16       	cp	r1, r22
 a44:	17 06       	cpc	r1, r23
 a46:	e8 07       	cpc	r30, r24
 a48:	f9 07       	cpc	r31, r25
 a4a:	c0 f0       	brcs	.+48     	; 0xa7c <__fp_cmp+0x46>
 a4c:	12 16       	cp	r1, r18
 a4e:	13 06       	cpc	r1, r19
 a50:	e4 07       	cpc	r30, r20
 a52:	f5 07       	cpc	r31, r21
 a54:	98 f0       	brcs	.+38     	; 0xa7c <__fp_cmp+0x46>
 a56:	62 1b       	sub	r22, r18
 a58:	73 0b       	sbc	r23, r19
 a5a:	84 0b       	sbc	r24, r20
 a5c:	95 0b       	sbc	r25, r21
 a5e:	39 f4       	brne	.+14     	; 0xa6e <__fp_cmp+0x38>
 a60:	0a 26       	eor	r0, r26
 a62:	61 f0       	breq	.+24     	; 0xa7c <__fp_cmp+0x46>
 a64:	23 2b       	or	r18, r19
 a66:	24 2b       	or	r18, r20
 a68:	25 2b       	or	r18, r21
 a6a:	21 f4       	brne	.+8      	; 0xa74 <__fp_cmp+0x3e>
 a6c:	08 95       	ret
 a6e:	0a 26       	eor	r0, r26
 a70:	09 f4       	brne	.+2      	; 0xa74 <__fp_cmp+0x3e>
 a72:	a1 40       	sbci	r26, 0x01	; 1
 a74:	a6 95       	lsr	r26
 a76:	8f ef       	ldi	r24, 0xFF	; 255
 a78:	81 1d       	adc	r24, r1
 a7a:	81 1d       	adc	r24, r1
 a7c:	08 95       	ret

00000a7e <__fp_inf>:
 a7e:	97 f9       	bld	r25, 7
 a80:	9f 67       	ori	r25, 0x7F	; 127
 a82:	80 e8       	ldi	r24, 0x80	; 128
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	08 95       	ret

00000a8a <__fp_nan>:
 a8a:	9f ef       	ldi	r25, 0xFF	; 255
 a8c:	80 ec       	ldi	r24, 0xC0	; 192
 a8e:	08 95       	ret

00000a90 <__fp_pscA>:
 a90:	00 24       	eor	r0, r0
 a92:	0a 94       	dec	r0
 a94:	16 16       	cp	r1, r22
 a96:	17 06       	cpc	r1, r23
 a98:	18 06       	cpc	r1, r24
 a9a:	09 06       	cpc	r0, r25
 a9c:	08 95       	ret

00000a9e <__fp_pscB>:
 a9e:	00 24       	eor	r0, r0
 aa0:	0a 94       	dec	r0
 aa2:	12 16       	cp	r1, r18
 aa4:	13 06       	cpc	r1, r19
 aa6:	14 06       	cpc	r1, r20
 aa8:	05 06       	cpc	r0, r21
 aaa:	08 95       	ret

00000aac <__fp_round>:
 aac:	09 2e       	mov	r0, r25
 aae:	03 94       	inc	r0
 ab0:	00 0c       	add	r0, r0
 ab2:	11 f4       	brne	.+4      	; 0xab8 <__fp_round+0xc>
 ab4:	88 23       	and	r24, r24
 ab6:	52 f0       	brmi	.+20     	; 0xacc <__fp_round+0x20>
 ab8:	bb 0f       	add	r27, r27
 aba:	40 f4       	brcc	.+16     	; 0xacc <__fp_round+0x20>
 abc:	bf 2b       	or	r27, r31
 abe:	11 f4       	brne	.+4      	; 0xac4 <__fp_round+0x18>
 ac0:	60 ff       	sbrs	r22, 0
 ac2:	04 c0       	rjmp	.+8      	; 0xacc <__fp_round+0x20>
 ac4:	6f 5f       	subi	r22, 0xFF	; 255
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	08 95       	ret

00000ace <__fp_split3>:
 ace:	57 fd       	sbrc	r21, 7
 ad0:	90 58       	subi	r25, 0x80	; 128
 ad2:	44 0f       	add	r20, r20
 ad4:	55 1f       	adc	r21, r21
 ad6:	59 f0       	breq	.+22     	; 0xaee <__fp_splitA+0x10>
 ad8:	5f 3f       	cpi	r21, 0xFF	; 255
 ada:	71 f0       	breq	.+28     	; 0xaf8 <__fp_splitA+0x1a>
 adc:	47 95       	ror	r20

00000ade <__fp_splitA>:
 ade:	88 0f       	add	r24, r24
 ae0:	97 fb       	bst	r25, 7
 ae2:	99 1f       	adc	r25, r25
 ae4:	61 f0       	breq	.+24     	; 0xafe <__fp_splitA+0x20>
 ae6:	9f 3f       	cpi	r25, 0xFF	; 255
 ae8:	79 f0       	breq	.+30     	; 0xb08 <__stack+0x9>
 aea:	87 95       	ror	r24
 aec:	08 95       	ret
 aee:	12 16       	cp	r1, r18
 af0:	13 06       	cpc	r1, r19
 af2:	14 06       	cpc	r1, r20
 af4:	55 1f       	adc	r21, r21
 af6:	f2 cf       	rjmp	.-28     	; 0xadc <__fp_split3+0xe>
 af8:	46 95       	lsr	r20
 afa:	f1 df       	rcall	.-30     	; 0xade <__fp_splitA>
 afc:	08 c0       	rjmp	.+16     	; 0xb0e <__stack+0xf>
 afe:	16 16       	cp	r1, r22
 b00:	17 06       	cpc	r1, r23
 b02:	18 06       	cpc	r1, r24
 b04:	99 1f       	adc	r25, r25
 b06:	f1 cf       	rjmp	.-30     	; 0xaea <__fp_splitA+0xc>
 b08:	86 95       	lsr	r24
 b0a:	71 05       	cpc	r23, r1
 b0c:	61 05       	cpc	r22, r1
 b0e:	08 94       	sec
 b10:	08 95       	ret

00000b12 <__fp_zero>:
 b12:	e8 94       	clt

00000b14 <__fp_szero>:
 b14:	bb 27       	eor	r27, r27
 b16:	66 27       	eor	r22, r22
 b18:	77 27       	eor	r23, r23
 b1a:	cb 01       	movw	r24, r22
 b1c:	97 f9       	bld	r25, 7
 b1e:	08 95       	ret

00000b20 <__gesf2>:
 b20:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_cmp>
 b24:	08 f4       	brcc	.+2      	; 0xb28 <__gesf2+0x8>
 b26:	8f ef       	ldi	r24, 0xFF	; 255
 b28:	08 95       	ret

00000b2a <__mulsf3>:
 b2a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__mulsf3x>
 b2e:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_round>
 b32:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscA>
 b36:	38 f0       	brcs	.+14     	; 0xb46 <__mulsf3+0x1c>
 b38:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_pscB>
 b3c:	20 f0       	brcs	.+8      	; 0xb46 <__mulsf3+0x1c>
 b3e:	95 23       	and	r25, r21
 b40:	11 f0       	breq	.+4      	; 0xb46 <__mulsf3+0x1c>
 b42:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_inf>
 b46:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_nan>
 b4a:	11 24       	eor	r1, r1
 b4c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_szero>

00000b50 <__mulsf3x>:
 b50:	0e 94 67 05 	call	0xace	; 0xace <__fp_split3>
 b54:	70 f3       	brcs	.-36     	; 0xb32 <__mulsf3+0x8>

00000b56 <__mulsf3_pse>:
 b56:	95 9f       	mul	r25, r21
 b58:	c1 f3       	breq	.-16     	; 0xb4a <__mulsf3+0x20>
 b5a:	95 0f       	add	r25, r21
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	55 1f       	adc	r21, r21
 b60:	62 9f       	mul	r22, r18
 b62:	f0 01       	movw	r30, r0
 b64:	72 9f       	mul	r23, r18
 b66:	bb 27       	eor	r27, r27
 b68:	f0 0d       	add	r31, r0
 b6a:	b1 1d       	adc	r27, r1
 b6c:	63 9f       	mul	r22, r19
 b6e:	aa 27       	eor	r26, r26
 b70:	f0 0d       	add	r31, r0
 b72:	b1 1d       	adc	r27, r1
 b74:	aa 1f       	adc	r26, r26
 b76:	64 9f       	mul	r22, r20
 b78:	66 27       	eor	r22, r22
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	66 1f       	adc	r22, r22
 b80:	82 9f       	mul	r24, r18
 b82:	22 27       	eor	r18, r18
 b84:	b0 0d       	add	r27, r0
 b86:	a1 1d       	adc	r26, r1
 b88:	62 1f       	adc	r22, r18
 b8a:	73 9f       	mul	r23, r19
 b8c:	b0 0d       	add	r27, r0
 b8e:	a1 1d       	adc	r26, r1
 b90:	62 1f       	adc	r22, r18
 b92:	83 9f       	mul	r24, r19
 b94:	a0 0d       	add	r26, r0
 b96:	61 1d       	adc	r22, r1
 b98:	22 1f       	adc	r18, r18
 b9a:	74 9f       	mul	r23, r20
 b9c:	33 27       	eor	r19, r19
 b9e:	a0 0d       	add	r26, r0
 ba0:	61 1d       	adc	r22, r1
 ba2:	23 1f       	adc	r18, r19
 ba4:	84 9f       	mul	r24, r20
 ba6:	60 0d       	add	r22, r0
 ba8:	21 1d       	adc	r18, r1
 baa:	82 2f       	mov	r24, r18
 bac:	76 2f       	mov	r23, r22
 bae:	6a 2f       	mov	r22, r26
 bb0:	11 24       	eor	r1, r1
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	9a f0       	brmi	.+38     	; 0xbde <__mulsf3_pse+0x88>
 bb8:	f1 f0       	breq	.+60     	; 0xbf6 <__mulsf3_pse+0xa0>
 bba:	88 23       	and	r24, r24
 bbc:	4a f0       	brmi	.+18     	; 0xbd0 <__mulsf3_pse+0x7a>
 bbe:	ee 0f       	add	r30, r30
 bc0:	ff 1f       	adc	r31, r31
 bc2:	bb 1f       	adc	r27, r27
 bc4:	66 1f       	adc	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	91 50       	subi	r25, 0x01	; 1
 bcc:	50 40       	sbci	r21, 0x00	; 0
 bce:	a9 f7       	brne	.-22     	; 0xbba <__mulsf3_pse+0x64>
 bd0:	9e 3f       	cpi	r25, 0xFE	; 254
 bd2:	51 05       	cpc	r21, r1
 bd4:	80 f0       	brcs	.+32     	; 0xbf6 <__mulsf3_pse+0xa0>
 bd6:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_inf>
 bda:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_szero>
 bde:	5f 3f       	cpi	r21, 0xFF	; 255
 be0:	e4 f3       	brlt	.-8      	; 0xbda <__mulsf3_pse+0x84>
 be2:	98 3e       	cpi	r25, 0xE8	; 232
 be4:	d4 f3       	brlt	.-12     	; 0xbda <__mulsf3_pse+0x84>
 be6:	86 95       	lsr	r24
 be8:	77 95       	ror	r23
 bea:	67 95       	ror	r22
 bec:	b7 95       	ror	r27
 bee:	f7 95       	ror	r31
 bf0:	e7 95       	ror	r30
 bf2:	9f 5f       	subi	r25, 0xFF	; 255
 bf4:	c1 f7       	brne	.-16     	; 0xbe6 <__mulsf3_pse+0x90>
 bf6:	fe 2b       	or	r31, r30
 bf8:	88 0f       	add	r24, r24
 bfa:	91 1d       	adc	r25, r1
 bfc:	96 95       	lsr	r25
 bfe:	87 95       	ror	r24
 c00:	97 f9       	bld	r25, 7
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
