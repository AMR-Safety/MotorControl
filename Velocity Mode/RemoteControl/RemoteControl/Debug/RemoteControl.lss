
RemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000c50  00000ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  00000cfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea4  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010eb  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e07  00000000  00000000  00003e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00004c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000828  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001145  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e5       	ldi	r30, 0x50	; 80
  c0:	fc e0       	ldi	r31, 0x0C	; 12
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 31       	cpi	r26, 0x18	; 24
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e1       	ldi	r26, 0x18	; 24
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 32       	cpi	r26, 0x21	; 33
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  e2:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <USART1_init>:

static char buffer[BUFFER_SIZE];
static uint8_t idx = 0;

static void USART1_init(uint16_t baud) {
	uint16_t ubrr = (F_CPU / (16UL * baud)) - 1;
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	aa 1f       	adc	r26, r26
  f4:	bb 1f       	adc	r27, r27
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	9c 01       	movw	r18, r24
 100:	ad 01       	movw	r20, r26
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	44 1f       	adc	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	44 1f       	adc	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	74 e2       	ldi	r23, 0x24	; 36
 116:	84 ef       	ldi	r24, 0xF4	; 244
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 04 06 	call	0xc08	; 0xc08 <__udivmodsi4>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
	UBRR1H = (ubrr >> 8);
 122:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = ubrr;
 126:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); // 8N1
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 136:	08 95       	ret

00000138 <RS485_send_char>:
}

static void RS485_send_char(char c) {
	while (!(UCSR1A & (1 << UDRE1)));
 138:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <RS485_send_char>
	UDR1 = c;
 140:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 144:	08 95       	ret

00000146 <RS485_send_str>:
}

void RS485_send_str(const char* str) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	RS485_PORT |= (1 << RE_DE_PIN);  // Enable transmit
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <RS485_send_str+0x10>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <RS485_send_str+0x16>
 15c:	00 00       	nop
 15e:	03 c0       	rjmp	.+6      	; 0x166 <RS485_send_str+0x20>
	_delay_ms(1);
	while (*str) {
		RS485_send_char(*str++);
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <RS485_send_char>
}

void RS485_send_str(const char* str) {
	RS485_PORT |= (1 << RE_DE_PIN);  // Enable transmit
	_delay_ms(1);
	while (*str) {
 166:	88 81       	ld	r24, Y
 168:	81 11       	cpse	r24, r1
 16a:	fa cf       	rjmp	.-12     	; 0x160 <RS485_send_str+0x1a>
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <RS485_send_str+0x2a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <RS485_send_str+0x30>
 176:	00 00       	nop
		RS485_send_char(*str++);
	}
	_delay_ms(1);
	RS485_PORT &= ~(1 << RE_DE_PIN); // Back to receive
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	8b b9       	out	0x0b, r24	; 11
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <ArrowParser_init>:

void ArrowParser_init(void) {
	RS485_DDR |= (1 << RE_DE_PIN);
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	80 61       	ori	r24, 0x10	; 16
 188:	8a b9       	out	0x0a, r24	; 10
	RS485_PORT &= ~(1 << RE_DE_PIN); // Start in receive mode
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
	USART1_init(9600);
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	95 e2       	ldi	r25, 0x25	; 37
 194:	0e 94 75 00 	call	0xea	; 0xea <USART1_init>
	idx = 0;
 198:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 19c:	08 95       	ret

0000019e <ArrowParser_process_input>:
}

void ArrowParser_process_input(void) {
 19e:	0f 93       	push	r16
	if (UCSR1A & (1 << RXC1)) {
 1a0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 1a4:	88 23       	and	r24, r24
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <ArrowParser_process_input+0xc>
 1a8:	9e c0       	rjmp	.+316    	; 0x2e6 <ArrowParser_process_input+0x148>
		char c = UDR1;
 1aa:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>

		if (idx < BUFFER_SIZE - 1) {
 1ae:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
 1b2:	e7 30       	cpi	r30, 0x07	; 7
 1b4:	68 f4       	brcc	.+26     	; 0x1d0 <ArrowParser_process_input+0x32>
			buffer[idx++] = c;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	8e 0f       	add	r24, r30
 1ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e7 5e       	subi	r30, 0xE7	; 231
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	90 83       	st	Z, r25
			buffer[idx] = '\0';
 1c6:	e8 2f       	mov	r30, r24
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e7 5e       	subi	r30, 0xE7	; 231
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	10 82       	st	Z, r1
		}

		if (idx >= 3 && buffer[idx - 3] == 27 && buffer[idx - 2] == '[') {
 1d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	08 f4       	brcc	.+2      	; 0x1da <ArrowParser_process_input+0x3c>
 1d8:	80 c0       	rjmp	.+256    	; 0x2da <ArrowParser_process_input+0x13c>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	ea 5e       	subi	r30, 0xEA	; 234
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	20 81       	ld	r18, Z
 1e4:	2b 31       	cpi	r18, 0x1B	; 27
 1e6:	09 f0       	breq	.+2      	; 0x1ea <ArrowParser_process_input+0x4c>
 1e8:	78 c0       	rjmp	.+240    	; 0x2da <ArrowParser_process_input+0x13c>
 1ea:	fc 01       	movw	r30, r24
 1ec:	e9 5e       	subi	r30, 0xE9	; 233
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	20 81       	ld	r18, Z
 1f2:	2b 35       	cpi	r18, 0x5B	; 91
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <ArrowParser_process_input+0x5a>
 1f6:	71 c0       	rjmp	.+226    	; 0x2da <ArrowParser_process_input+0x13c>
			switch (buffer[idx - 1]) {
 1f8:	fc 01       	movw	r30, r24
 1fa:	e8 5e       	subi	r30, 0xE8	; 232
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	82 34       	cpi	r24, 0x42	; 66
 202:	11 f1       	breq	.+68     	; 0x248 <ArrowParser_process_input+0xaa>
 204:	18 f4       	brcc	.+6      	; 0x20c <ArrowParser_process_input+0x6e>
 206:	81 34       	cpi	r24, 0x41	; 65
 208:	39 f0       	breq	.+14     	; 0x218 <ArrowParser_process_input+0x7a>
 20a:	65 c0       	rjmp	.+202    	; 0x2d6 <ArrowParser_process_input+0x138>
 20c:	83 34       	cpi	r24, 0x43	; 67
 20e:	a1 f1       	breq	.+104    	; 0x278 <ArrowParser_process_input+0xda>
 210:	84 34       	cpi	r24, 0x44	; 68
 212:	09 f4       	brne	.+2      	; 0x216 <ArrowParser_process_input+0x78>
 214:	49 c0       	rjmp	.+146    	; 0x2a8 <ArrowParser_process_input+0x10a>
 216:	5f c0       	rjmp	.+190    	; 0x2d6 <ArrowParser_process_input+0x138>
				case 'A':
				RS485_send_str("up\n");
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 a3 00 	call	0x146	; 0x146 <RS485_send_str>
				set_direction_motor1(0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_direction_motor1>
				set_direction_motor2(0);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 93 01 	call	0x326	; 0x326 <set_direction_motor2>
				move_distance(5, 104.72, 1);
 230:	01 e0       	ldi	r16, 0x01	; 1
 232:	24 ea       	ldi	r18, 0xA4	; 164
 234:	30 e7       	ldi	r19, 0x70	; 112
 236:	41 ed       	ldi	r20, 0xD1	; 209
 238:	52 e4       	ldi	r21, 0x42	; 66
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 ea       	ldi	r24, 0xA0	; 160
 240:	90 e4       	ldi	r25, 0x40	; 64
 242:	0e 94 ac 01 	call	0x358	; 0x358 <move_distance>
				break;
 246:	47 c0       	rjmp	.+142    	; 0x2d6 <ArrowParser_process_input+0x138>
				case 'B':
				RS485_send_str("down\n");
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 a3 00 	call	0x146	; 0x146 <RS485_send_str>
				set_direction_motor1(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_direction_motor1>
				set_direction_motor2(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 93 01 	call	0x326	; 0x326 <set_direction_motor2>
				move_distance(5, 104.72, 1);
 260:	01 e0       	ldi	r16, 0x01	; 1
 262:	24 ea       	ldi	r18, 0xA4	; 164
 264:	30 e7       	ldi	r19, 0x70	; 112
 266:	41 ed       	ldi	r20, 0xD1	; 209
 268:	52 e4       	ldi	r21, 0x42	; 66
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 ea       	ldi	r24, 0xA0	; 160
 270:	90 e4       	ldi	r25, 0x40	; 64
 272:	0e 94 ac 01 	call	0x358	; 0x358 <move_distance>
				break;
 276:	2f c0       	rjmp	.+94     	; 0x2d6 <ArrowParser_process_input+0x138>
				case 'C':
				RS485_send_str("right\n");
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 a3 00 	call	0x146	; 0x146 <RS485_send_str>
				set_direction_motor1(0);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_direction_motor1>
				set_direction_motor2(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 93 01 	call	0x326	; 0x326 <set_direction_motor2>
				move_distance(5, 104.72, 1);
 290:	01 e0       	ldi	r16, 0x01	; 1
 292:	24 ea       	ldi	r18, 0xA4	; 164
 294:	30 e7       	ldi	r19, 0x70	; 112
 296:	41 ed       	ldi	r20, 0xD1	; 209
 298:	52 e4       	ldi	r21, 0x42	; 66
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 ea       	ldi	r24, 0xA0	; 160
 2a0:	90 e4       	ldi	r25, 0x40	; 64
 2a2:	0e 94 ac 01 	call	0x358	; 0x358 <move_distance>
				break;
 2a6:	17 c0       	rjmp	.+46     	; 0x2d6 <ArrowParser_process_input+0x138>
				case 'D':
				RS485_send_str("left\n");
 2a8:	81 e1       	ldi	r24, 0x11	; 17
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 a3 00 	call	0x146	; 0x146 <RS485_send_str>
				set_direction_motor1(1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_direction_motor1>
				set_direction_motor2(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 93 01 	call	0x326	; 0x326 <set_direction_motor2>
				move_distance(5, 104.72, 1);
 2c0:	01 e0       	ldi	r16, 0x01	; 1
 2c2:	24 ea       	ldi	r18, 0xA4	; 164
 2c4:	30 e7       	ldi	r19, 0x70	; 112
 2c6:	41 ed       	ldi	r20, 0xD1	; 209
 2c8:	52 e4       	ldi	r21, 0x42	; 66
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 ea       	ldi	r24, 0xA0	; 160
 2d0:	90 e4       	ldi	r25, 0x40	; 64
 2d2:	0e 94 ac 01 	call	0x358	; 0x358 <move_distance>
				break;
			}
			idx = 0;
 2d6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		}

		if (idx >= BUFFER_SIZE - 1) {
 2da:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2de:	87 30       	cpi	r24, 0x07	; 7
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <ArrowParser_process_input+0x148>
			idx = 0;
 2e2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		}
	}
}
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <setup_pins_motor1>:
#include "direction.h"



void setup_pins_motor1(void) {
	DDRB |= (1 << STEP_PIN) | (1 << DIR_PIN) | (1 << EN_PIN);
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	80 67       	ori	r24, 0x70	; 112
 2ee:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << EN_PIN);
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	8f 7e       	andi	r24, 0xEF	; 239
 2f4:	85 b9       	out	0x05, r24	; 5
 2f6:	08 95       	ret

000002f8 <set_direction_motor1>:
	//set_direction_motor1(1);
}

void set_direction_motor1(uint8_t forward) {
	if (forward)
 2f8:	88 23       	and	r24, r24
 2fa:	21 f0       	breq	.+8      	; 0x304 <set_direction_motor1+0xc>
	PORTB |= (1 << DIR_PIN);
 2fc:	85 b1       	in	r24, 0x05	; 5
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	85 b9       	out	0x05, r24	; 5
 302:	08 95       	ret
	else
	PORTB &= ~(1 << DIR_PIN);
 304:	85 b1       	in	r24, 0x05	; 5
 306:	8f 7b       	andi	r24, 0xBF	; 191
 308:	85 b9       	out	0x05, r24	; 5
 30a:	08 95       	ret

0000030c <setup_pins_motor2>:
}

void setup_pins_motor2(void) {
	DDRC |= (1 << STEP2_PIN);
 30c:	87 b1       	in	r24, 0x07	; 7
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << DIR2_PIN);
 312:	84 b1       	in	r24, 0x04	; 4
 314:	82 60       	ori	r24, 0x02	; 2
 316:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << EN2_PIN);
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << EN2_PIN);  // Enable motor 2
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	8b b9       	out	0x0b, r24	; 11
 324:	08 95       	ret

00000326 <set_direction_motor2>:
	//set_direction_motor2(1);
}

void set_direction_motor2(uint8_t forward) {
	if (forward)
 326:	88 23       	and	r24, r24
 328:	21 f0       	breq	.+8      	; 0x332 <set_direction_motor2+0xc>
	PORTB |= (1 << DIR2_PIN);
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	85 b9       	out	0x05, r24	; 5
 330:	08 95       	ret
	else
	PORTB &= ~(1 << DIR2_PIN);
 332:	85 b1       	in	r24, 0x05	; 5
 334:	8d 7f       	andi	r24, 0xFD	; 253
 336:	85 b9       	out	0x05, r24	; 5
 338:	08 95       	ret

0000033a <main>:
#include <util/delay.h>
#include "motion_control.h"
#include "arrow_parser.h"  // for RS485 input

int main(void) {
	setup_pins_motor1();
 33a:	0e 94 75 01 	call	0x2ea	; 0x2ea <setup_pins_motor1>
	set_direction_motor1(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_direction_motor1>
	setup_pins_motor2();
 344:	0e 94 86 01 	call	0x30c	; 0x30c <setup_pins_motor2>
	set_direction_motor2(1);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 93 01 	call	0x326	; 0x326 <set_direction_motor2>
	//move_distance(10, 104.72, 1);

	ArrowParser_init();
 34e:	0e 94 c2 00 	call	0x184	; 0x184 <ArrowParser_init>

	while (1) {
		ArrowParser_process_input();
 352:	0e 94 cf 00 	call	0x19e	; 0x19e <ArrowParser_process_input>
 356:	fd cf       	rjmp	.-6      	; 0x352 <main+0x18>

00000358 <move_distance>:
#include <math.h>

#define WHEEL_RADIUS 0.03f
#define STEP_ANGLE   (2.0f * M_PI / STEPS_PER_REV)

void move_distance(float distance_m, float omega_target, uint8_t use_trapezoid) {
 358:	8f 92       	push	r8
 35a:	9f 92       	push	r9
 35c:	af 92       	push	r10
 35e:	bf 92       	push	r11
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	49 01       	movw	r8, r18
 36c:	5a 01       	movw	r10, r20
	float wheel_circ = 2.0f * M_PI * WHEEL_RADIUS;
	float rotations = distance_m / wheel_circ;
 36e:	2b ef       	ldi	r18, 0xFB	; 251
 370:	34 e0       	ldi	r19, 0x04	; 4
 372:	41 e4       	ldi	r20, 0x41	; 65
 374:	5e e3       	ldi	r21, 0x3E	; 62
 376:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
	uint32_t total_steps = (uint32_t)(rotations * STEPS_PER_REV);
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	48 e4       	ldi	r20, 0x48	; 72
 380:	54 e4       	ldi	r21, 0x44	; 68
 382:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 386:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>

	uint16_t accel_steps = (use_trapezoid) ? TRAPEZOID_STEPS : SCURVE_STEPS;
	uint32_t cruise_steps = (total_steps > 2 * accel_steps) ? (total_steps - 2 * accel_steps) : 0;
 38a:	65 36       	cpi	r22, 0x65	; 101
 38c:	71 05       	cpc	r23, r1
 38e:	81 05       	cpc	r24, r1
 390:	91 05       	cpc	r25, r1
 392:	40 f0       	brcs	.+16     	; 0x3a4 <move_distance+0x4c>
 394:	6b 01       	movw	r12, r22
 396:	7c 01       	movw	r14, r24
 398:	24 e6       	ldi	r18, 0x64	; 100
 39a:	c2 1a       	sub	r12, r18
 39c:	d1 08       	sbc	r13, r1
 39e:	e1 08       	sbc	r14, r1
 3a0:	f1 08       	sbc	r15, r1
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <move_distance+0x52>
 3a4:	c1 2c       	mov	r12, r1
 3a6:	d1 2c       	mov	r13, r1
 3a8:	76 01       	movw	r14, r12

	// Ramp Up
	if (use_trapezoid) {
 3aa:	00 23       	and	r16, r16
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <move_distance+0x60>
		ramp_up_trapezoid(omega_target);
 3ae:	c5 01       	movw	r24, r10
 3b0:	b4 01       	movw	r22, r8
 3b2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ramp_up_trapezoid>
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <move_distance+0x68>
		} else {
		ramp_up_scurve(omega_target);
 3b8:	c5 01       	movw	r24, r10
 3ba:	b4 01       	movw	r22, r8
 3bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <ramp_up_scurve>
	}

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
 3c0:	c5 01       	movw	r24, r10
 3c2:	b4 01       	movw	r22, r8
 3c4:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(omega_target);
 3c8:	c5 01       	movw	r24, r10
 3ca:	b4 01       	movw	r22, r8
 3cc:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>

	for (uint32_t i = 0; i < cruise_steps; i++) {
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	ba 01       	movw	r22, r20
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <move_distance+0x9c>
		while (!(TIFR1 & (1 << OCF1A))) {}
 3d8:	b1 9b       	sbis	0x16, 1	; 22
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <move_distance+0x80>
		TIFR1 |= (1 << OCF1A);
 3dc:	86 b3       	in	r24, 0x16	; 22
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	86 bb       	out	0x16, r24	; 22
		while (!(TIFR3 & (1 << OCF3A))) {}
 3e2:	c1 9b       	sbis	0x18, 1	; 24
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <move_distance+0x8a>
		TIFR3 |= (1 << OCF3A);
 3e6:	88 b3       	in	r24, 0x18	; 24
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	88 bb       	out	0x18, r24	; 24

	// Cruise at constant speed
	set_angular_velocity_motor1(omega_target);
	set_angular_velocity_motor2(omega_target);

	for (uint32_t i = 0; i < cruise_steps; i++) {
 3ec:	4f 5f       	subi	r20, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	6f 4f       	sbci	r22, 0xFF	; 255
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	4c 15       	cp	r20, r12
 3f6:	5d 05       	cpc	r21, r13
 3f8:	6e 05       	cpc	r22, r14
 3fa:	7f 05       	cpc	r23, r15
 3fc:	68 f3       	brcs	.-38     	; 0x3d8 <move_distance+0x80>
		while (!(TIFR3 & (1 << OCF3A))) {}
		TIFR3 |= (1 << OCF3A);
	}

	// Ramp Down
	if (use_trapezoid) {
 3fe:	00 23       	and	r16, r16
 400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		ramp_down_trapezoid(omega_target);
 402:	c5 01       	movw	r24, r10
 404:	b4 01       	movw	r22, r8
 406:	0e 94 1a 03 	call	0x634	; 0x634 <ramp_down_trapezoid>
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		} else {
		ramp_down_scurve(omega_target);
 40c:	c5 01       	movw	r24, r10
 40e:	b4 01       	movw	r22, r8
 410:	0e 94 99 02 	call	0x532	; 0x532 <ramp_down_scurve>
	}

	// Stop motors
	set_angular_velocity_motor1(0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	cb 01       	movw	r24, r22
 41a:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
	set_angular_velocity_motor2(0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	cb 01       	movw	r24, r22
 424:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>
}
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	bf 90       	pop	r11
 434:	af 90       	pop	r10
 436:	9f 90       	pop	r9
 438:	8f 90       	pop	r8
 43a:	08 95       	ret

0000043c <s_curve_profile>:
#include "velocity.h"

#include <util/delay.h>
#include <math.h>

static float s_curve_profile(float x) {
 43c:	8f 92       	push	r8
 43e:	9f 92       	push	r9
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	6b 01       	movw	r12, r22
 44e:	7c 01       	movw	r14, r24
	return 3 * x * x - 2 * x * x * x;
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 e4       	ldi	r20, 0x40	; 64
 456:	50 e4       	ldi	r21, 0x40	; 64
 458:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 45c:	9b 01       	movw	r18, r22
 45e:	ac 01       	movw	r20, r24
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 468:	4b 01       	movw	r8, r22
 46a:	5c 01       	movw	r10, r24
 46c:	a7 01       	movw	r20, r14
 46e:	96 01       	movw	r18, r12
 470:	c7 01       	movw	r24, r14
 472:	b6 01       	movw	r22, r12
 474:	0e 94 ce 03 	call	0x79c	; 0x79c <__addsf3>
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	c7 01       	movw	r24, r14
 47e:	b6 01       	movw	r22, r12
 480:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	c7 01       	movw	r24, r14
 48a:	b6 01       	movw	r22, r12
 48c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	c5 01       	movw	r24, r10
 496:	b4 01       	movw	r22, r8
 498:	0e 94 cd 03 	call	0x79a	; 0x79a <__subsf3>
}
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	df 90       	pop	r13
 4a2:	cf 90       	pop	r12
 4a4:	bf 90       	pop	r11
 4a6:	af 90       	pop	r10
 4a8:	9f 90       	pop	r9
 4aa:	8f 90       	pop	r8
 4ac:	08 95       	ret

000004ae <ramp_up_scurve>:

void ramp_up_scurve(float target_omega) {
 4ae:	8f 92       	push	r8
 4b0:	9f 92       	push	r9
 4b2:	af 92       	push	r10
 4b4:	bf 92       	push	r11
 4b6:	cf 92       	push	r12
 4b8:	df 92       	push	r13
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	4b 01       	movw	r8, r22
 4c4:	5c 01       	movw	r10, r24
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 4c6:	c1 e0       	ldi	r28, 0x01	; 1
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	25 c0       	rjmp	.+74     	; 0x516 <ramp_up_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 4cc:	be 01       	movw	r22, r28
 4ce:	0d 2e       	mov	r0, r29
 4d0:	00 0c       	add	r0, r0
 4d2:	88 0b       	sbc	r24, r24
 4d4:	99 0b       	sbc	r25, r25
 4d6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	48 e4       	ldi	r20, 0x48	; 72
 4e0:	52 e4       	ldi	r21, 0x42	; 66
 4e2:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 4e6:	0e 94 1e 02 	call	0x43c	; 0x43c <s_curve_profile>
 4ea:	a5 01       	movw	r20, r10
 4ec:	94 01       	movw	r18, r8
 4ee:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 4f2:	6b 01       	movw	r12, r22
 4f4:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 4f6:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 4fa:	c7 01       	movw	r24, r14
 4fc:	b6 01       	movw	r22, r12
 4fe:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	80 e7       	ldi	r24, 0x70	; 112
 506:	92 e0       	ldi	r25, 0x02	; 2
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <ramp_up_scurve+0x5a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <ramp_up_scurve+0x64>
 512:	00 00       	nop
static float s_curve_profile(float x) {
	return 3 * x * x - 2 * x * x * x;
}

void ramp_up_scurve(float target_omega) {
	for (int i = 1; i <= SCURVE_STEPS; i++) {
 514:	21 96       	adiw	r28, 0x01	; 1
 516:	c3 33       	cpi	r28, 0x33	; 51
 518:	d1 05       	cpc	r29, r1
 51a:	c4 f2       	brlt	.-80     	; 0x4cc <ramp_up_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	08 95       	ret

00000532 <ramp_down_scurve>:

void ramp_down_scurve(float target_omega) {
 532:	8f 92       	push	r8
 534:	9f 92       	push	r9
 536:	af 92       	push	r10
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	4b 01       	movw	r8, r22
 548:	5c 01       	movw	r10, r24
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 54a:	c1 e3       	ldi	r28, 0x31	; 49
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	25 c0       	rjmp	.+74     	; 0x59a <ramp_down_scurve+0x68>
		float x = (float)i / SCURVE_STEPS;
 550:	be 01       	movw	r22, r28
 552:	0d 2e       	mov	r0, r29
 554:	00 0c       	add	r0, r0
 556:	88 0b       	sbc	r24, r24
 558:	99 0b       	sbc	r25, r25
 55a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	48 e4       	ldi	r20, 0x48	; 72
 564:	52 e4       	ldi	r21, 0x42	; 66
 566:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
		float omega = s_curve_profile(x) * target_omega;
 56a:	0e 94 1e 02 	call	0x43c	; 0x43c <s_curve_profile>
 56e:	a5 01       	movw	r20, r10
 570:	94 01       	movw	r18, r8
 572:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 576:	6b 01       	movw	r12, r22
 578:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 57a:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	80 e7       	ldi	r24, 0x70	; 112
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	80 40       	sbci	r24, 0x00	; 0
 590:	90 40       	sbci	r25, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <ramp_down_scurve+0x5a>
 594:	00 c0       	rjmp	.+0      	; 0x596 <ramp_down_scurve+0x64>
 596:	00 00       	nop
		_delay_ms(SCURVE_DELAY_MS);
	}
}

void ramp_down_scurve(float target_omega) {
	for (int i = SCURVE_STEPS - 1; i >= 0; i--) {
 598:	21 97       	sbiw	r28, 0x01	; 1
 59a:	dd 23       	and	r29, r29
 59c:	cc f6       	brge	.-78     	; 0x550 <ramp_down_scurve+0x1e>
		float omega = s_curve_profile(x) * target_omega;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(SCURVE_DELAY_MS);
	}
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	bf 90       	pop	r11
 5ac:	af 90       	pop	r10
 5ae:	9f 90       	pop	r9
 5b0:	8f 90       	pop	r8
 5b2:	08 95       	ret

000005b4 <ramp_up_trapezoid>:
#include "trapezoid.h"
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
 5b4:	8f 92       	push	r8
 5b6:	9f 92       	push	r9
 5b8:	af 92       	push	r10
 5ba:	bf 92       	push	r11
 5bc:	cf 92       	push	r12
 5be:	df 92       	push	r13
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	4b 01       	movw	r8, r22
 5ca:	5c 01       	movw	r10, r24
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 5cc:	c1 e0       	ldi	r28, 0x01	; 1
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	23 c0       	rjmp	.+70     	; 0x618 <ramp_up_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 5d2:	be 01       	movw	r22, r28
 5d4:	0d 2e       	mov	r0, r29
 5d6:	00 0c       	add	r0, r0
 5d8:	88 0b       	sbc	r24, r24
 5da:	99 0b       	sbc	r25, r25
 5dc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>
 5e0:	a5 01       	movw	r20, r10
 5e2:	94 01       	movw	r18, r8
 5e4:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	48 e4       	ldi	r20, 0x48	; 72
 5ee:	52 e4       	ldi	r21, 0x42	; 66
 5f0:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
 5f4:	6b 01       	movw	r12, r22
 5f6:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 5f8:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	80 e7       	ldi	r24, 0x70	; 112
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <ramp_up_trapezoid+0x56>
 612:	00 c0       	rjmp	.+0      	; 0x614 <ramp_up_trapezoid+0x60>
 614:	00 00       	nop
#include "velocity.h"

#include <util/delay.h>

void ramp_up_trapezoid(float target_omega) {
	for (int i = 1; i <= TRAPEZOID_STEPS; i++) {
 616:	21 96       	adiw	r28, 0x01	; 1
 618:	c3 33       	cpi	r28, 0x33	; 51
 61a:	d1 05       	cpc	r29, r1
 61c:	d4 f2       	brlt	.-76     	; 0x5d2 <ramp_up_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	bf 90       	pop	r11
 62c:	af 90       	pop	r10
 62e:	9f 90       	pop	r9
 630:	8f 90       	pop	r8
 632:	08 95       	ret

00000634 <ramp_down_trapezoid>:

void ramp_down_trapezoid(float target_omega) {
 634:	8f 92       	push	r8
 636:	9f 92       	push	r9
 638:	af 92       	push	r10
 63a:	bf 92       	push	r11
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	4b 01       	movw	r8, r22
 64a:	5c 01       	movw	r10, r24
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 64c:	c1 e3       	ldi	r28, 0x31	; 49
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	23 c0       	rjmp	.+70     	; 0x698 <ramp_down_trapezoid+0x64>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
 652:	be 01       	movw	r22, r28
 654:	0d 2e       	mov	r0, r29
 656:	00 0c       	add	r0, r0
 658:	88 0b       	sbc	r24, r24
 65a:	99 0b       	sbc	r25, r25
 65c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>
 660:	a5 01       	movw	r20, r10
 662:	94 01       	movw	r18, r8
 664:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	48 e4       	ldi	r20, 0x48	; 72
 66e:	52 e4       	ldi	r21, 0x42	; 66
 670:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
 674:	6b 01       	movw	r12, r22
 676:	7c 01       	movw	r14, r24
		set_angular_velocity_motor1(omega);
 678:	0e 94 bf 03 	call	0x77e	; 0x77e <set_angular_velocity_motor1>
		set_angular_velocity_motor2(omega);
 67c:	c7 01       	movw	r24, r14
 67e:	b6 01       	movw	r22, r12
 680:	0e 94 c6 03 	call	0x78c	; 0x78c <set_angular_velocity_motor2>
 684:	2f ef       	ldi	r18, 0xFF	; 255
 686:	80 e7       	ldi	r24, 0x70	; 112
 688:	92 e0       	ldi	r25, 0x02	; 2
 68a:	21 50       	subi	r18, 0x01	; 1
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <ramp_down_trapezoid+0x56>
 692:	00 c0       	rjmp	.+0      	; 0x694 <ramp_down_trapezoid+0x60>
 694:	00 00       	nop
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}

void ramp_down_trapezoid(float target_omega) {
	for (int i = TRAPEZOID_STEPS - 1; i >= 0; i--) {
 696:	21 97       	sbiw	r28, 0x01	; 1
 698:	dd 23       	and	r29, r29
 69a:	dc f6       	brge	.-74     	; 0x652 <ramp_down_trapezoid+0x1e>
		float omega = (target_omega * i) / TRAPEZOID_STEPS;
		set_angular_velocity_motor1(omega);
		set_angular_velocity_motor2(omega);
		_delay_ms(TRAPEZOID_DELAY_MS);
	}
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	bf 90       	pop	r11
 6aa:	af 90       	pop	r10
 6ac:	9f 90       	pop	r9
 6ae:	8f 90       	pop	r8
 6b0:	08 95       	ret

000006b2 <angular_velocity_to_rpm>:
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
 6b2:	2b ee       	ldi	r18, 0xEB	; 235
 6b4:	39 ec       	ldi	r19, 0xC9	; 201
 6b6:	48 e1       	ldi	r20, 0x18	; 24
 6b8:	51 e4       	ldi	r21, 0x41	; 65
 6ba:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
}
 6be:	08 95       	ret

000006c0 <rpm_to_ocr>:

uint16_t rpm_to_ocr(float rpm) {
 6c0:	cf 92       	push	r12
 6c2:	df 92       	push	r13
 6c4:	ef 92       	push	r14
 6c6:	ff 92       	push	r15
 6c8:	6b 01       	movw	r12, r22
 6ca:	7c 01       	movw	r14, r24
	if (rpm <= 0) return 65535;
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	a9 01       	movw	r20, r18
 6d2:	0e 94 3a 04 	call	0x874	; 0x874 <__cmpsf2>
 6d6:	18 16       	cp	r1, r24
 6d8:	ac f5       	brge	.+106    	; 0x744 <rpm_to_ocr+0x84>
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	48 e4       	ldi	r20, 0x48	; 72
 6e0:	54 e4       	ldi	r21, 0x44	; 68
 6e2:	c7 01       	movw	r24, r14
 6e4:	b6 01       	movw	r22, r12
 6e6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	40 e7       	ldi	r20, 0x70	; 112
 6f0:	52 e4       	ldi	r21, 0x42	; 66
 6f2:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
 6f6:	20 e0       	ldi	r18, 0x00	; 0
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	51 e4       	ldi	r21, 0x41	; 65
 6fe:	0e 94 97 05 	call	0xb2e	; 0xb2e <__mulsf3>
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	74 e2       	ldi	r23, 0x24	; 36
 70a:	84 e7       	ldi	r24, 0x74	; 116
 70c:	9b e4       	ldi	r25, 0x4B	; 75
 70e:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
 712:	6b 01       	movw	r12, r22
 714:	7c 01       	movw	r14, r24
	if (ocr > 65535) ocr = 65535;
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	3f ef       	ldi	r19, 0xFF	; 255
 71a:	4f e7       	ldi	r20, 0x7F	; 127
 71c:	57 e4       	ldi	r21, 0x47	; 71
 71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__gesf2>
 722:	18 16       	cp	r1, r24
 724:	4c f4       	brge	.+18     	; 0x738 <rpm_to_ocr+0x78>
 726:	0f 2e       	mov	r0, r31
 728:	c1 2c       	mov	r12, r1
 72a:	dd 24       	eor	r13, r13
 72c:	da 94       	dec	r13
 72e:	ff e7       	ldi	r31, 0x7F	; 127
 730:	ef 2e       	mov	r14, r31
 732:	f7 e4       	ldi	r31, 0x47	; 71
 734:	ff 2e       	mov	r15, r31
 736:	f0 2d       	mov	r31, r0
	return (uint16_t)ocr;
 738:	c7 01       	movw	r24, r14
 73a:	b6 01       	movw	r22, r12
 73c:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 740:	cb 01       	movw	r24, r22
 742:	02 c0       	rjmp	.+4      	; 0x748 <rpm_to_ocr+0x88>
float angular_velocity_to_rpm(float omega) {
	return omega * (60.0f / (2.0f * M_PI));
}

uint16_t rpm_to_ocr(float rpm) {
	if (rpm <= 0) return 65535;
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	9f ef       	ldi	r25, 0xFF	; 255
	float steps_per_sec = (rpm * STEPS_PER_REV) / 60.0f;
	float ocr = (float)F_CPU / (PRESCALER * steps_per_sec);
	if (ocr > 65535) ocr = 65535;
	return (uint16_t)ocr;
}
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	df 90       	pop	r13
 74e:	cf 90       	pop	r12
 750:	08 95       	ret

00000752 <setup_timer1>:

void setup_timer1(uint16_t ocr_value) {
	TCCR1A = (1 << COM1A0);
 752:	20 e4       	ldi	r18, 0x40	; 64
 754:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11);
 758:	2a e0       	ldi	r18, 0x0A	; 10
 75a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = ocr_value;
 75e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 762:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 766:	08 95       	ret

00000768 <setup_timer3>:
}

void setup_timer3(uint16_t ocr_value) {
	TCCR3A = (1 << COM3A0);
 768:	20 e4       	ldi	r18, 0x40	; 64
 76a:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31);
 76e:	2a e0       	ldi	r18, 0x0A	; 10
 770:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = ocr_value;
 774:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 778:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 77c:	08 95       	ret

0000077e <set_angular_velocity_motor1>:
}

void set_angular_velocity_motor1(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 77e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 782:	0e 94 60 03 	call	0x6c0	; 0x6c0 <rpm_to_ocr>
	setup_timer1(ocr);
 786:	0e 94 a9 03 	call	0x752	; 0x752 <setup_timer1>
 78a:	08 95       	ret

0000078c <set_angular_velocity_motor2>:
}

void set_angular_velocity_motor2(float omega) {
	float rpm = angular_velocity_to_rpm(omega);
 78c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <angular_velocity_to_rpm>
	uint16_t ocr = rpm_to_ocr(rpm);
 790:	0e 94 60 03 	call	0x6c0	; 0x6c0 <rpm_to_ocr>
	setup_timer3(ocr);
 794:	0e 94 b4 03 	call	0x768	; 0x768 <setup_timer3>
 798:	08 95       	ret

0000079a <__subsf3>:
 79a:	50 58       	subi	r21, 0x80	; 128

0000079c <__addsf3>:
 79c:	bb 27       	eor	r27, r27
 79e:	aa 27       	eor	r26, r26
 7a0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__addsf3x>
 7a4:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>
 7a8:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <__addsf3+0x20>
 7ae:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__addsf3+0x20>
 7b4:	39 f4       	brne	.+14     	; 0x7c4 <__addsf3+0x28>
 7b6:	9f 3f       	cpi	r25, 0xFF	; 255
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <__addsf3+0x24>
 7ba:	26 f4       	brtc	.+8      	; 0x7c4 <__addsf3+0x28>
 7bc:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>
 7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3+0x28>
 7c2:	e0 95       	com	r30
 7c4:	e7 fb       	bst	r30, 7
 7c6:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>

000007ca <__addsf3x>:
 7ca:	e9 2f       	mov	r30, r25
 7cc:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_split3>
 7d0:	58 f3       	brcs	.-42     	; 0x7a8 <__addsf3+0xc>
 7d2:	ba 17       	cp	r27, r26
 7d4:	62 07       	cpc	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	95 07       	cpc	r25, r21
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__addsf3x+0x1c>
 7de:	79 f4       	brne	.+30     	; 0x7fe <__addsf3x+0x34>
 7e0:	a6 f5       	brtc	.+104    	; 0x84a <__addsf3x+0x80>
 7e2:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_zero>
 7e6:	0e f4       	brtc	.+2      	; 0x7ea <__addsf3x+0x20>
 7e8:	e0 95       	com	r30
 7ea:	0b 2e       	mov	r0, r27
 7ec:	ba 2f       	mov	r27, r26
 7ee:	a0 2d       	mov	r26, r0
 7f0:	0b 01       	movw	r0, r22
 7f2:	b9 01       	movw	r22, r18
 7f4:	90 01       	movw	r18, r0
 7f6:	0c 01       	movw	r0, r24
 7f8:	ca 01       	movw	r24, r20
 7fa:	a0 01       	movw	r20, r0
 7fc:	11 24       	eor	r1, r1
 7fe:	ff 27       	eor	r31, r31
 800:	59 1b       	sub	r21, r25
 802:	99 f0       	breq	.+38     	; 0x82a <__addsf3x+0x60>
 804:	59 3f       	cpi	r21, 0xF9	; 249
 806:	50 f4       	brcc	.+20     	; 0x81c <__addsf3x+0x52>
 808:	50 3e       	cpi	r21, 0xE0	; 224
 80a:	68 f1       	brcs	.+90     	; 0x866 <__addsf3x+0x9c>
 80c:	1a 16       	cp	r1, r26
 80e:	f0 40       	sbci	r31, 0x00	; 0
 810:	a2 2f       	mov	r26, r18
 812:	23 2f       	mov	r18, r19
 814:	34 2f       	mov	r19, r20
 816:	44 27       	eor	r20, r20
 818:	58 5f       	subi	r21, 0xF8	; 248
 81a:	f3 cf       	rjmp	.-26     	; 0x802 <__addsf3x+0x38>
 81c:	46 95       	lsr	r20
 81e:	37 95       	ror	r19
 820:	27 95       	ror	r18
 822:	a7 95       	ror	r26
 824:	f0 40       	sbci	r31, 0x00	; 0
 826:	53 95       	inc	r21
 828:	c9 f7       	brne	.-14     	; 0x81c <__addsf3x+0x52>
 82a:	7e f4       	brtc	.+30     	; 0x84a <__addsf3x+0x80>
 82c:	1f 16       	cp	r1, r31
 82e:	ba 0b       	sbc	r27, r26
 830:	62 0b       	sbc	r22, r18
 832:	73 0b       	sbc	r23, r19
 834:	84 0b       	sbc	r24, r20
 836:	ba f0       	brmi	.+46     	; 0x866 <__addsf3x+0x9c>
 838:	91 50       	subi	r25, 0x01	; 1
 83a:	a1 f0       	breq	.+40     	; 0x864 <__addsf3x+0x9a>
 83c:	ff 0f       	add	r31, r31
 83e:	bb 1f       	adc	r27, r27
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	c2 f7       	brpl	.-16     	; 0x838 <__addsf3x+0x6e>
 848:	0e c0       	rjmp	.+28     	; 0x866 <__addsf3x+0x9c>
 84a:	ba 0f       	add	r27, r26
 84c:	62 1f       	adc	r22, r18
 84e:	73 1f       	adc	r23, r19
 850:	84 1f       	adc	r24, r20
 852:	48 f4       	brcc	.+18     	; 0x866 <__addsf3x+0x9c>
 854:	87 95       	ror	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	9e 3f       	cpi	r25, 0xFE	; 254
 860:	08 f0       	brcs	.+2      	; 0x864 <__addsf3x+0x9a>
 862:	b0 cf       	rjmp	.-160    	; 0x7c4 <__addsf3+0x28>
 864:	93 95       	inc	r25
 866:	88 0f       	add	r24, r24
 868:	08 f0       	brcs	.+2      	; 0x86c <__addsf3x+0xa2>
 86a:	99 27       	eor	r25, r25
 86c:	ee 0f       	add	r30, r30
 86e:	97 95       	ror	r25
 870:	87 95       	ror	r24
 872:	08 95       	ret

00000874 <__cmpsf2>:
 874:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_cmp>
 878:	08 f4       	brcc	.+2      	; 0x87c <__cmpsf2+0x8>
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	08 95       	ret

0000087e <__divsf3>:
 87e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3x>
 882:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>
 886:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 88a:	58 f0       	brcs	.+22     	; 0x8a2 <__divsf3+0x24>
 88c:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 890:	40 f0       	brcs	.+16     	; 0x8a2 <__divsf3+0x24>
 892:	29 f4       	brne	.+10     	; 0x89e <__divsf3+0x20>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	29 f0       	breq	.+10     	; 0x8a2 <__divsf3+0x24>
 898:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 89c:	51 11       	cpse	r21, r1
 89e:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>
 8a2:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>

000008a6 <__divsf3x>:
 8a6:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_split3>
 8aa:	68 f3       	brcs	.-38     	; 0x886 <__divsf3+0x8>

000008ac <__divsf3_pse>:
 8ac:	99 23       	and	r25, r25
 8ae:	b1 f3       	breq	.-20     	; 0x89c <__divsf3+0x1e>
 8b0:	55 23       	and	r21, r21
 8b2:	91 f3       	breq	.-28     	; 0x898 <__divsf3+0x1a>
 8b4:	95 1b       	sub	r25, r21
 8b6:	55 0b       	sbc	r21, r21
 8b8:	bb 27       	eor	r27, r27
 8ba:	aa 27       	eor	r26, r26
 8bc:	62 17       	cp	r22, r18
 8be:	73 07       	cpc	r23, r19
 8c0:	84 07       	cpc	r24, r20
 8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__divsf3_pse+0x26>
 8c4:	9f 5f       	subi	r25, 0xFF	; 255
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	44 1f       	adc	r20, r20
 8ce:	aa 1f       	adc	r26, r26
 8d0:	a9 f3       	breq	.-22     	; 0x8bc <__divsf3_pse+0x10>
 8d2:	35 d0       	rcall	.+106    	; 0x93e <__divsf3_pse+0x92>
 8d4:	0e 2e       	mov	r0, r30
 8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x3a>
 8d8:	e0 e8       	ldi	r30, 0x80	; 128
 8da:	32 d0       	rcall	.+100    	; 0x940 <__divsf3_pse+0x94>
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	e6 95       	lsr	r30
 8e2:	00 1c       	adc	r0, r0
 8e4:	ca f7       	brpl	.-14     	; 0x8d8 <__divsf3_pse+0x2c>
 8e6:	2b d0       	rcall	.+86     	; 0x93e <__divsf3_pse+0x92>
 8e8:	fe 2f       	mov	r31, r30
 8ea:	29 d0       	rcall	.+82     	; 0x93e <__divsf3_pse+0x92>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	bb 1f       	adc	r27, r27
 8f4:	26 17       	cp	r18, r22
 8f6:	37 07       	cpc	r19, r23
 8f8:	48 07       	cpc	r20, r24
 8fa:	ab 07       	cpc	r26, r27
 8fc:	b0 e8       	ldi	r27, 0x80	; 128
 8fe:	09 f0       	breq	.+2      	; 0x902 <__divsf3_pse+0x56>
 900:	bb 0b       	sbc	r27, r27
 902:	80 2d       	mov	r24, r0
 904:	bf 01       	movw	r22, r30
 906:	ff 27       	eor	r31, r31
 908:	93 58       	subi	r25, 0x83	; 131
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	3a f0       	brmi	.+14     	; 0x91c <__divsf3_pse+0x70>
 90e:	9e 3f       	cpi	r25, 0xFE	; 254
 910:	51 05       	cpc	r21, r1
 912:	78 f0       	brcs	.+30     	; 0x932 <__divsf3_pse+0x86>
 914:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 918:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>
 91c:	5f 3f       	cpi	r21, 0xFF	; 255
 91e:	e4 f3       	brlt	.-8      	; 0x918 <__divsf3_pse+0x6c>
 920:	98 3e       	cpi	r25, 0xE8	; 232
 922:	d4 f3       	brlt	.-12     	; 0x918 <__divsf3_pse+0x6c>
 924:	86 95       	lsr	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	b7 95       	ror	r27
 92c:	f7 95       	ror	r31
 92e:	9f 5f       	subi	r25, 0xFF	; 255
 930:	c9 f7       	brne	.-14     	; 0x924 <__divsf3_pse+0x78>
 932:	88 0f       	add	r24, r24
 934:	91 1d       	adc	r25, r1
 936:	96 95       	lsr	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret
 93e:	e1 e0       	ldi	r30, 0x01	; 1
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	bb 1f       	adc	r27, r27
 948:	62 17       	cp	r22, r18
 94a:	73 07       	cpc	r23, r19
 94c:	84 07       	cpc	r24, r20
 94e:	ba 07       	cpc	r27, r26
 950:	20 f0       	brcs	.+8      	; 0x95a <__divsf3_pse+0xae>
 952:	62 1b       	sub	r22, r18
 954:	73 0b       	sbc	r23, r19
 956:	84 0b       	sbc	r24, r20
 958:	ba 0b       	sbc	r27, r26
 95a:	ee 1f       	adc	r30, r30
 95c:	88 f7       	brcc	.-30     	; 0x940 <__divsf3_pse+0x94>
 95e:	e0 95       	com	r30
 960:	08 95       	ret

00000962 <__fixunssfsi>:
 962:	0e 94 71 05 	call	0xae2	; 0xae2 <__fp_splitA>
 966:	88 f0       	brcs	.+34     	; 0x98a <__fixunssfsi+0x28>
 968:	9f 57       	subi	r25, 0x7F	; 127
 96a:	98 f0       	brcs	.+38     	; 0x992 <__fixunssfsi+0x30>
 96c:	b9 2f       	mov	r27, r25
 96e:	99 27       	eor	r25, r25
 970:	b7 51       	subi	r27, 0x17	; 23
 972:	b0 f0       	brcs	.+44     	; 0x9a0 <__fixunssfsi+0x3e>
 974:	e1 f0       	breq	.+56     	; 0x9ae <__fixunssfsi+0x4c>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	1a f0       	brmi	.+6      	; 0x986 <__fixunssfsi+0x24>
 980:	ba 95       	dec	r27
 982:	c9 f7       	brne	.-14     	; 0x976 <__fixunssfsi+0x14>
 984:	14 c0       	rjmp	.+40     	; 0x9ae <__fixunssfsi+0x4c>
 986:	b1 30       	cpi	r27, 0x01	; 1
 988:	91 f0       	breq	.+36     	; 0x9ae <__fixunssfsi+0x4c>
 98a:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_zero>
 98e:	b1 e0       	ldi	r27, 0x01	; 1
 990:	08 95       	ret
 992:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_zero>
 996:	67 2f       	mov	r22, r23
 998:	78 2f       	mov	r23, r24
 99a:	88 27       	eor	r24, r24
 99c:	b8 5f       	subi	r27, 0xF8	; 248
 99e:	39 f0       	breq	.+14     	; 0x9ae <__fixunssfsi+0x4c>
 9a0:	b9 3f       	cpi	r27, 0xF9	; 249
 9a2:	cc f3       	brlt	.-14     	; 0x996 <__fixunssfsi+0x34>
 9a4:	86 95       	lsr	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b3 95       	inc	r27
 9ac:	d9 f7       	brne	.-10     	; 0x9a4 <__fixunssfsi+0x42>
 9ae:	3e f4       	brtc	.+14     	; 0x9be <__fixunssfsi+0x5c>
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__floatunsisf>:
 9c0:	e8 94       	clt
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__floatsisf+0x12>

000009c4 <__floatsisf>:
 9c4:	97 fb       	bst	r25, 7
 9c6:	3e f4       	brtc	.+14     	; 0x9d6 <__floatsisf+0x12>
 9c8:	90 95       	com	r25
 9ca:	80 95       	com	r24
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	99 23       	and	r25, r25
 9d8:	a9 f0       	breq	.+42     	; 0xa04 <__DATA_REGION_LENGTH__+0x4>
 9da:	f9 2f       	mov	r31, r25
 9dc:	96 e9       	ldi	r25, 0x96	; 150
 9de:	bb 27       	eor	r27, r27
 9e0:	93 95       	inc	r25
 9e2:	f6 95       	lsr	r31
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f1 11       	cpse	r31, r1
 9ee:	f8 cf       	rjmp	.-16     	; 0x9e0 <__floatsisf+0x1c>
 9f0:	fa f4       	brpl	.+62     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 9f2:	bb 0f       	add	r27, r27
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__floatsisf+0x36>
 9f6:	60 ff       	sbrs	r22, 0
 9f8:	1b c0       	rjmp	.+54     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 9fa:	6f 5f       	subi	r22, 0xFF	; 255
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 a04:	88 23       	and	r24, r24
 a06:	11 f0       	breq	.+4      	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
 a08:	96 e9       	ldi	r25, 0x96	; 150
 a0a:	11 c0       	rjmp	.+34     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
 a0c:	77 23       	and	r23, r23
 a0e:	21 f0       	breq	.+8      	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
 a10:	9e e8       	ldi	r25, 0x8E	; 142
 a12:	87 2f       	mov	r24, r23
 a14:	76 2f       	mov	r23, r22
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
 a18:	66 23       	and	r22, r22
 a1a:	71 f0       	breq	.+28     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a1c:	96 e8       	ldi	r25, 0x86	; 134
 a1e:	86 2f       	mov	r24, r22
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	2a f0       	brmi	.+10     	; 0xa30 <__DATA_REGION_LENGTH__+0x30>
 a26:	9a 95       	dec	r25
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	da f7       	brpl	.-10     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a30:	88 0f       	add	r24, r24
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <__fp_cmp>:
 a3a:	99 0f       	add	r25, r25
 a3c:	00 08       	sbc	r0, r0
 a3e:	55 0f       	add	r21, r21
 a40:	aa 0b       	sbc	r26, r26
 a42:	e0 e8       	ldi	r30, 0x80	; 128
 a44:	fe ef       	ldi	r31, 0xFE	; 254
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	e8 07       	cpc	r30, r24
 a4c:	f9 07       	cpc	r31, r25
 a4e:	c0 f0       	brcs	.+48     	; 0xa80 <__fp_cmp+0x46>
 a50:	12 16       	cp	r1, r18
 a52:	13 06       	cpc	r1, r19
 a54:	e4 07       	cpc	r30, r20
 a56:	f5 07       	cpc	r31, r21
 a58:	98 f0       	brcs	.+38     	; 0xa80 <__fp_cmp+0x46>
 a5a:	62 1b       	sub	r22, r18
 a5c:	73 0b       	sbc	r23, r19
 a5e:	84 0b       	sbc	r24, r20
 a60:	95 0b       	sbc	r25, r21
 a62:	39 f4       	brne	.+14     	; 0xa72 <__fp_cmp+0x38>
 a64:	0a 26       	eor	r0, r26
 a66:	61 f0       	breq	.+24     	; 0xa80 <__fp_cmp+0x46>
 a68:	23 2b       	or	r18, r19
 a6a:	24 2b       	or	r18, r20
 a6c:	25 2b       	or	r18, r21
 a6e:	21 f4       	brne	.+8      	; 0xa78 <__fp_cmp+0x3e>
 a70:	08 95       	ret
 a72:	0a 26       	eor	r0, r26
 a74:	09 f4       	brne	.+2      	; 0xa78 <__fp_cmp+0x3e>
 a76:	a1 40       	sbci	r26, 0x01	; 1
 a78:	a6 95       	lsr	r26
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	81 1d       	adc	r24, r1
 a7e:	81 1d       	adc	r24, r1
 a80:	08 95       	ret

00000a82 <__fp_inf>:
 a82:	97 f9       	bld	r25, 7
 a84:	9f 67       	ori	r25, 0x7F	; 127
 a86:	80 e8       	ldi	r24, 0x80	; 128
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	08 95       	ret

00000a8e <__fp_nan>:
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	80 ec       	ldi	r24, 0xC0	; 192
 a92:	08 95       	ret

00000a94 <__fp_pscA>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	09 06       	cpc	r0, r25
 aa0:	08 95       	ret

00000aa2 <__fp_pscB>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	14 06       	cpc	r1, r20
 aac:	05 06       	cpc	r0, r21
 aae:	08 95       	ret

00000ab0 <__fp_round>:
 ab0:	09 2e       	mov	r0, r25
 ab2:	03 94       	inc	r0
 ab4:	00 0c       	add	r0, r0
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0xc>
 ab8:	88 23       	and	r24, r24
 aba:	52 f0       	brmi	.+20     	; 0xad0 <__fp_round+0x20>
 abc:	bb 0f       	add	r27, r27
 abe:	40 f4       	brcc	.+16     	; 0xad0 <__fp_round+0x20>
 ac0:	bf 2b       	or	r27, r31
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__fp_round+0x18>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__fp_round+0x20>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	08 95       	ret

00000ad2 <__fp_split3>:
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	90 58       	subi	r25, 0x80	; 128
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	59 f0       	breq	.+22     	; 0xaf2 <__fp_splitA+0x10>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	71 f0       	breq	.+28     	; 0xafc <__fp_splitA+0x1a>
 ae0:	47 95       	ror	r20

00000ae2 <__fp_splitA>:
 ae2:	88 0f       	add	r24, r24
 ae4:	97 fb       	bst	r25, 7
 ae6:	99 1f       	adc	r25, r25
 ae8:	61 f0       	breq	.+24     	; 0xb02 <__stack+0x3>
 aea:	9f 3f       	cpi	r25, 0xFF	; 255
 aec:	79 f0       	breq	.+30     	; 0xb0c <__stack+0xd>
 aee:	87 95       	ror	r24
 af0:	08 95       	ret
 af2:	12 16       	cp	r1, r18
 af4:	13 06       	cpc	r1, r19
 af6:	14 06       	cpc	r1, r20
 af8:	55 1f       	adc	r21, r21
 afa:	f2 cf       	rjmp	.-28     	; 0xae0 <__fp_split3+0xe>
 afc:	46 95       	lsr	r20
 afe:	f1 df       	rcall	.-30     	; 0xae2 <__fp_splitA>
 b00:	08 c0       	rjmp	.+16     	; 0xb12 <__stack+0x13>
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	f1 cf       	rjmp	.-30     	; 0xaee <__fp_splitA+0xc>
 b0c:	86 95       	lsr	r24
 b0e:	71 05       	cpc	r23, r1
 b10:	61 05       	cpc	r22, r1
 b12:	08 94       	sec
 b14:	08 95       	ret

00000b16 <__fp_zero>:
 b16:	e8 94       	clt

00000b18 <__fp_szero>:
 b18:	bb 27       	eor	r27, r27
 b1a:	66 27       	eor	r22, r22
 b1c:	77 27       	eor	r23, r23
 b1e:	cb 01       	movw	r24, r22
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <__gesf2>:
 b24:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_cmp>
 b28:	08 f4       	brcc	.+2      	; 0xb2c <__gesf2+0x8>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	08 95       	ret

00000b2e <__mulsf3>:
 b2e:	0e 94 aa 05 	call	0xb54	; 0xb54 <__mulsf3x>
 b32:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>
 b36:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 b3a:	38 f0       	brcs	.+14     	; 0xb4a <__mulsf3+0x1c>
 b3c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 b40:	20 f0       	brcs	.+8      	; 0xb4a <__mulsf3+0x1c>
 b42:	95 23       	and	r25, r21
 b44:	11 f0       	breq	.+4      	; 0xb4a <__mulsf3+0x1c>
 b46:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 b4a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>
 b4e:	11 24       	eor	r1, r1
 b50:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>

00000b54 <__mulsf3x>:
 b54:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_split3>
 b58:	70 f3       	brcs	.-36     	; 0xb36 <__mulsf3+0x8>

00000b5a <__mulsf3_pse>:
 b5a:	95 9f       	mul	r25, r21
 b5c:	c1 f3       	breq	.-16     	; 0xb4e <__mulsf3+0x20>
 b5e:	95 0f       	add	r25, r21
 b60:	50 e0       	ldi	r21, 0x00	; 0
 b62:	55 1f       	adc	r21, r21
 b64:	62 9f       	mul	r22, r18
 b66:	f0 01       	movw	r30, r0
 b68:	72 9f       	mul	r23, r18
 b6a:	bb 27       	eor	r27, r27
 b6c:	f0 0d       	add	r31, r0
 b6e:	b1 1d       	adc	r27, r1
 b70:	63 9f       	mul	r22, r19
 b72:	aa 27       	eor	r26, r26
 b74:	f0 0d       	add	r31, r0
 b76:	b1 1d       	adc	r27, r1
 b78:	aa 1f       	adc	r26, r26
 b7a:	64 9f       	mul	r22, r20
 b7c:	66 27       	eor	r22, r22
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	66 1f       	adc	r22, r22
 b84:	82 9f       	mul	r24, r18
 b86:	22 27       	eor	r18, r18
 b88:	b0 0d       	add	r27, r0
 b8a:	a1 1d       	adc	r26, r1
 b8c:	62 1f       	adc	r22, r18
 b8e:	73 9f       	mul	r23, r19
 b90:	b0 0d       	add	r27, r0
 b92:	a1 1d       	adc	r26, r1
 b94:	62 1f       	adc	r22, r18
 b96:	83 9f       	mul	r24, r19
 b98:	a0 0d       	add	r26, r0
 b9a:	61 1d       	adc	r22, r1
 b9c:	22 1f       	adc	r18, r18
 b9e:	74 9f       	mul	r23, r20
 ba0:	33 27       	eor	r19, r19
 ba2:	a0 0d       	add	r26, r0
 ba4:	61 1d       	adc	r22, r1
 ba6:	23 1f       	adc	r18, r19
 ba8:	84 9f       	mul	r24, r20
 baa:	60 0d       	add	r22, r0
 bac:	21 1d       	adc	r18, r1
 bae:	82 2f       	mov	r24, r18
 bb0:	76 2f       	mov	r23, r22
 bb2:	6a 2f       	mov	r22, r26
 bb4:	11 24       	eor	r1, r1
 bb6:	9f 57       	subi	r25, 0x7F	; 127
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	9a f0       	brmi	.+38     	; 0xbe2 <__mulsf3_pse+0x88>
 bbc:	f1 f0       	breq	.+60     	; 0xbfa <__mulsf3_pse+0xa0>
 bbe:	88 23       	and	r24, r24
 bc0:	4a f0       	brmi	.+18     	; 0xbd4 <__mulsf3_pse+0x7a>
 bc2:	ee 0f       	add	r30, r30
 bc4:	ff 1f       	adc	r31, r31
 bc6:	bb 1f       	adc	r27, r27
 bc8:	66 1f       	adc	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	91 50       	subi	r25, 0x01	; 1
 bd0:	50 40       	sbci	r21, 0x00	; 0
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <__mulsf3_pse+0x64>
 bd4:	9e 3f       	cpi	r25, 0xFE	; 254
 bd6:	51 05       	cpc	r21, r1
 bd8:	80 f0       	brcs	.+32     	; 0xbfa <__mulsf3_pse+0xa0>
 bda:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 bde:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_szero>
 be2:	5f 3f       	cpi	r21, 0xFF	; 255
 be4:	e4 f3       	brlt	.-8      	; 0xbde <__mulsf3_pse+0x84>
 be6:	98 3e       	cpi	r25, 0xE8	; 232
 be8:	d4 f3       	brlt	.-12     	; 0xbde <__mulsf3_pse+0x84>
 bea:	86 95       	lsr	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b7 95       	ror	r27
 bf2:	f7 95       	ror	r31
 bf4:	e7 95       	ror	r30
 bf6:	9f 5f       	subi	r25, 0xFF	; 255
 bf8:	c1 f7       	brne	.-16     	; 0xbea <__mulsf3_pse+0x90>
 bfa:	fe 2b       	or	r31, r30
 bfc:	88 0f       	add	r24, r24
 bfe:	91 1d       	adc	r25, r1
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__udivmodsi4>:
 c08:	a1 e2       	ldi	r26, 0x21	; 33
 c0a:	1a 2e       	mov	r1, r26
 c0c:	aa 1b       	sub	r26, r26
 c0e:	bb 1b       	sub	r27, r27
 c10:	fd 01       	movw	r30, r26
 c12:	0d c0       	rjmp	.+26     	; 0xc2e <__udivmodsi4_ep>

00000c14 <__udivmodsi4_loop>:
 c14:	aa 1f       	adc	r26, r26
 c16:	bb 1f       	adc	r27, r27
 c18:	ee 1f       	adc	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	a2 17       	cp	r26, r18
 c1e:	b3 07       	cpc	r27, r19
 c20:	e4 07       	cpc	r30, r20
 c22:	f5 07       	cpc	r31, r21
 c24:	20 f0       	brcs	.+8      	; 0xc2e <__udivmodsi4_ep>
 c26:	a2 1b       	sub	r26, r18
 c28:	b3 0b       	sbc	r27, r19
 c2a:	e4 0b       	sbc	r30, r20
 c2c:	f5 0b       	sbc	r31, r21

00000c2e <__udivmodsi4_ep>:
 c2e:	66 1f       	adc	r22, r22
 c30:	77 1f       	adc	r23, r23
 c32:	88 1f       	adc	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	1a 94       	dec	r1
 c38:	69 f7       	brne	.-38     	; 0xc14 <__udivmodsi4_loop>
 c3a:	60 95       	com	r22
 c3c:	70 95       	com	r23
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	9b 01       	movw	r18, r22
 c44:	ac 01       	movw	r20, r24
 c46:	bd 01       	movw	r22, r26
 c48:	cf 01       	movw	r24, r30
 c4a:	08 95       	ret

00000c4c <_exit>:
 c4c:	f8 94       	cli

00000c4e <__stop_program>:
 c4e:	ff cf       	rjmp	.-2      	; 0xc4e <__stop_program>
